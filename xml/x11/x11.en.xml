<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document SYSTEM "../finkdoc.dtd">
<document filename="index" lang="en">
  <title>Running X11 on Darwin and Mac OS X</title>
  <shorttitle>Running X11</shorttitle>
  <cvsid>$Id: x11.en.xml,v 1.24 2013/01/02 02:49:03 alexkhansen Exp $</cvsid>
  <preface>
    <p>
      This document is about running X11  on Apple's Mac
      OS X and Darwin systems.
      It gives an introduction and a history of development, then goes on to
      describe the current situation and the many options you have to use
      X11 with or without Fink.
    </p>
  </preface>
  <chapter filename="intro">
    <title>Introduction</title>
    <shorttitle>Intro</shorttitle>
    <section name="def-x11">
      <title>What is X11?</title>
      <p>
The <link url="http://www.x.org/">X Window System</link> Version 11,
or X11 for short, is a graphics display system with a
network-transparent client-server architecture.
It allows applications to draw pixels, lines, text, images, etc. on
your screen.
X11 also comes with additional libraries that let applications easily
draw user interfaces, i.e. buttons, text fields, and so on.
</p>
      <p>
X11 is the de facto standard graphics system in the Unix world.
It comes with Linux, the *BSDs and most commercial Unix flavors.
Desktop environments like CDE, KDE and GNOME run on top of it.
</p>
    </section>
    <section name="def-macosx">
      <title>What is Mac OS X?</title>
      <p>
        <link url="http://www.apple.com/macosx/">Mac OS X</link> is an
operating system produced by <link url="http://www.apple.com/">Apple</link>.
Like its predecessors NeXTStep and OpenStep, it is based on BSD and is
thus a member of the Unix OS family.
However, it comes with a proprietary graphics display system.
The graphics engine is called Quartz and the look and feel is called
Aqua, although the two names are often used intercheangably.
</p>
    </section>
    <section name="def-darwin">
      <title>What is Darwin?</title>
      <p>
        <link url="http://opendarwin.org/">Darwin</link> is
basically a stripped-down version of Mac OS X that is available free
of charge and with full source code.
It does not contain Quartz, Aqua, or any other related technology.
By default, it only offers a text console.
</p>
    </section>
    <section name="def-xfree86">
      <title>What is XFree86?</title>
      <p>
        <link url="http://www.xfree86.org/">XFree86</link> is an open source
implementation of X11.
It was initially developed to run on Intel x86 PCs, hence the name.
Nowadays, it runs on many architectures and operating systems,
including OS/2, Darwin, Mac OS X and Windows.
      </p>
       <p>
Apple's X11 distributions on OS 10.2, 10.3 and 10.4 are derived from XFree86.
      </p>
</section>
<section name="def-xorg">
  <title>What is X.org?</title>
  <p>
<link url ="http://www.x.org/wiki/">X.org</link> is an open source implementation
of X11, and a successor to XFree86.  It has supplanted XFree86 in most places.
  </p>
  <p>
Apple's X11 distributions on OS 10.5 and 10.6 are derived from X.org, as is
 <link url="http://xquartz.macosforge.org/trac/wiki">XQuartz</link>.
Apple's X11 distribution on 10.7 is derived, in turn, from XQuartz.</p>
</section>
<section name="def-xquartx">
  <title>What is XQuartz?</title>
  <p>
<link url="http://xquartz.macosforge.org/trac/wiki">
XQuartz</link> is an X11 distribution for OS 10.5 and later which contains newer features
than does the stock X11 on 10.5-10.7.  On 10.5, XQuartz replaces the system's X11 distribution,
whereas on 10.6 and 10.7 Xquartz and the system's X11 distribution coexist by installing
in different base paths.  On 10.8 Xquartz <em>is</em> the standard X11 distribution.
  </p>
</section>
     <section name="client-server">
      <title>Client and Server</title>
      <p>
X11 has a client-server architecture.
There is one central program that does the actual drawing and
coordinates access by several applications; that is the server.
An application that wants to draw using X11 connects to the server and
tells it what to draw.
Thus applications are called clients in the X11 world.
</p>
      <p>
X11 allows the server and the clients to be on different machines,
which often results in confusion over the terms.
In an environment with workstations and servers, you will run the X11
display server on the workstation machine and the applications (the X
clients) on the server machine.
So when talking about the "server", that means the X11 display server
program, not the machine hidden in your wardrobe.
</p>
    </section>
    <section name="rootless">
      <title>What does rootless mean?</title>
      <p>
A little background:
X11 models the screen as a hierarchy of windows contained in each
other.
At the top of the hierarchy is a special window which is the size of
the screen and contains all other windows.
This window contains the desktop background and is called the "root
window".
</p>
      <p>
Now back on topic:
Like any graphical environment, X11 was written to stand alone and
have full control over the screen.
In Mac OS X, Quartz already governs the screen, so one must make
arrangements if both are to get along together.
</p>
      <p>
One arrangement is to let the two take turns.
Each environment gets a complete screen, but only one of them is
visible at a time and the user can switch between them.
This is called full-screen or rooted mode.
It is called rooted because there is a perfectly normal root window on
the X11 screen that works like on other systems.
</p>
      <p>
Another arrangement is to mix the two environments window by window.
This eliminates the need to switch between two screens.
It also eliminates the X11 root window, because Quartz already takes
care of the desktop background.
Because there is no (visible) root window, this mode is called
"rootless".  It is the most comfortable way to use X11 on Mac OS X.
</p>
    </section>
    <section name="wm">
      <title>What is a window manager?</title>
      <p>
In most graphical environments the look of window frames (title bar,
close button, etc.) is defined by the system.
X11 is different.
With X11, the window frames (also called "decoration") are provided by
a separate program, called the window manager.
In most respects, the window manager is just another client
application; it is started the same way and talks to the X server
through the same channels.
</p>
      <p>
There is a large number of different window managers to choose from.
<link url="http://www.xwinman.org/">xwinman.org</link> has a
comprehensive list.
Most popular ones allow the user to customize the appearance via
so-called <link url="http://www.themes.org/">themes</link>.
Many window managers also provide additional functionality, like pop
up menus in the root window, docks or launch buttons.
</p>
      <p>
Many window managers have been packaged for Fink; here is a
<link url="http://pdb.finkproject.org/pdb/browse.php?sec=x11-wm">    
current list.
</link>
      </p>
    </section>
    <section name="desktop">
      <title>What are Quartz/Aqua, Gnome, and KDE?</title>
      <p>
They are desktop environments, and there are many others.  Their purpose 
is to provide additional framework to applications, so that their look, 
feel, and behaviour can be visually consistent.  Example: 
</p>
      <p> graphics engine : X11
</p>
      <p> window manager:
<link url="http://sawmill.sourceforge.net/">sawfish</link>
      </p>
      <p> desktop: <link url="http://www.gnome.org/">Gnome</link>
      </p>
      <p>
The lines between graphics display engine, window manager,
and desktop are blurred because similar, or the same functionality, 
may be implemented by one or more of them. This is one reason why a
particular window manager may not be able to be used with a
particular desktop environment.

</p>
      <p>
Many applications are developed to integrate with a particular desktop.  
Most often by installing the libraries for the desktop environment 
(and the other underlying libraries) that an application was developed 
for, the application will work with limited or no function loss.  
Examples are the increasing 
<link url="http://pdb.finkproject.org/pdb/section.php/gnome">
selection of GNOME applications 
</link>
available to be installed and run without running GNOME.  
Unfortunately, the same 
<link url="/faq/usage-fink.php#kde">
progress is not quite yet able to be made
</link>
with <link url="http://www.kde.org/">KDE applications.</link>
      </p>
    </section>
  </chapter>
  <chapter filename="history">
    <title>History</title>
    <shorttitle>History</shorttitle>
    <preface>
      <p>[Sorry for the epic language, I couldn't resist...]</p>
    </preface>
    <section name="early">
      <title>The early days</title>
      <p>
In the beginning, there was void.
Darwin was in its infancy, Mac OS X was still in development and there
was no X11 implementation for both of them.
</p>
      <p>
Then there came John Carmack and ported XFree86 to Mac OS X Server,
which was the only OS in the Darwin family available at that time.
Later that port was updated for XFree86 4.0 and Darwin 1.0 by Dave
Zarzycki.
The patches found their way into the Darwin CVS repository and slept
there, waiting for things to come.
</p>
    </section>
    <section name="xonx-forms">
      <title>XonX forms</title>
      <p>
One fine day Torrey T. Lyons came along and gave the Darwin patches
the attention they had been waiting for.
Finally, he brought them to a new home, the official XFree86 CVS
repository.
This was the time of the Mac OS X Public Beta and Darwin 1.2.
XFree86 4.0.2 worked fine on Darwin, but on Mac OS X it required users
to log out of Aqua and go to the console to run it.
So Torrey gathered the <link url="http://mrcla.com/XonX/">XonX team</link> around
him and set out on a voyage to bring XFree86 to Mac OS X.
</p>
      <p>
At about the same time Tenon started to build Xtools, using XFree86
4.0 as the foundation.
</p>
    </section>
    <section name="root-or-not">
      <title>To root or not to root</title>
      <p>
Soon the XonX team had XFree86 running in a fullscreen mode in
parallel to Quartz and was putting out test releases for adventurous
users.
The test releases were called XFree86-Aqua, or XAqua for short.
Since Torrey had taken the lead, changes went directly to
XFree86's CVS repository, which was heading towards the 4.1.0
release.
</p>
      <p>
In the first stages interfacing with Quartz was done via a small
application called Xmaster.app (written with Carbon, then rewritten
with Cocoa).
Later that code was integrated into the X server proper, giving birth
to XDarwin.app.
Shared library support was also added at this time (and Tenon was
convinced to use this set of patches instead of their own to ensure
binary compatibility).
There was even good progress on a rootless mode (using the Carbon
API), but alas, it was too late to get it into XFree86 4.1.0.
And the rootless patch was free, and continued to float around the
net.
After XFree86 4.1.0 shipped with just the fullscreen mode, work on the
rootless mode continued, now using the Cocoa API.
An experimental rootless mode was put into XFree86's CVS repository.
</p>
      <p>
In the meantime, Apple released Mac OS X 10.0 and Darwin 1.3,
and Tenon released Xtools 1.0 some weeks after that.
</p>
      <p>Development continued on integrating the rootless mode into XFree86,
so that by the time XFree86 4.2.0 shipped in January 2002, the Darwin/Mac OS X 
version had been completely integrated into the main XFree86 distribution.
</p>
    </section>
    <section name="apple-x11-distros">
         <title>Apple's X11 distributions</title>
      <p>
        On January 7, 2003, Apple released a beta version of its own custom X11
        implementation for OS 10.2.
        It was based on XFree86-4.2 and included Quartz rendering and accelerated
        OpenGL.
        A new version was released on February 10, 2003 with additional features
        and bugfixes.
        A third release (i.e. Beta 3) was made on March 17, 2003 with
        further additional features and bugfixes.
      </p>
      <p>
        On October 24, 2003, Apple released Panther (10.3), which included the first
        release version of their X11 distribution, based on XFree86-4.3.
      </p>
      <p>
        On April 29, 2005, Apple released Tiger (10.4), which included an X11 distribution based on XFree86-4.4.
      </p>
      <p>
        On October 26, 2007, Apple released Leopard (10.5), which included an X11 distribution based on X.org-7.2.  
      </p>  
      <p>
        On August 28, 2009, Apple released Snow Leopard (10.6), which included an X11 distribution based on X.org-7.2.  
      </p>
      <p>On July 20, 2011, Apple released Lion (10.7), which included an X11 distribution based on XQuartz-2.6.4.</p>
      <p>
        On July 25, 2012, Apple relased Mountain Lion (10.8).  For this version of OS X, XQuartz-2.7 or later is the
        appropriate X11 distribution to use.
      </p>
    </section>
  </chapter>
  <chapter filename="inst-xfree86">
    <title>Getting and Installing X11</title>
    <shorttitle>Installing X11</shorttitle>
    <section name="apple-binary">
      <title>Apple's Distributions</title>
      <p>
        All of the OS X versions currently supported by Fink use an X11 distribution from Apple.
        The supported configurations are:
      </p>
      <ul>
        <li>
          <p>
            <em>10.5:</em>  Fink supports the built-in X11 as well as XQuartz-2.6.3 and earlier.
          </p>
          <p>
            <em>Note:</em>  Apple's X11 on 10.6 has older-versioned libraries than does XQuartz-2.4, so
            installing such a version of XQuartz complicates upgrades from 10.5 to 10.6.
          </p>
        </li>
        <li>
          <p>
            <em>10.6:</em>  Fink only supports the built-in X11.  Since our packages are only
            supposed to build the built-in X11, if you really want to use XQuartz and Fink you will
            need to make sure to keep the stock X11 installed, too.
          </p>
        </li>
        <li>
          <p>
            <em>10.7:</em>  Fink only supports the built-in X11.  Since our packages are only
            supposed to build the built-in X11, if you really want to use XQuartz and Fink you will
            need to make sure to keep the stock X11 installed, too.
          </p>
        </li>
        <li>
          <p>
            <em>10.8:</em>  Fink only supports XQuartz-2.7 and later.
          </p>
        </li>
      </ul>
      <p>
        To build packages, if you're using the stock X11 on 10.5-10.7, for Xcode &lt;= 4.2.1
        you will also need to make sure that the X11 SDK is installed (though this is normally 
        the case by default).  XQuartz users on 10.5 should <em>not</em> do this, since
        XQuartz contains everything.  On 10.7, the Command Line Tools for Xcode &gt;= 4.3 contains
        the X11 SDK.  On 10.8, you only need to install XQuartz.
      </p>
      <p>
        All of the X11 packages support both full-screen and rootless operation, and have OpenGL support.
      </p>
      <p>For more information on using Apple's X11, check out this <link url="http://developer.apple.com/darwin/runningx11.html">article</link> at the Apple Developer Connection.</p>
    </section>
    <section name="fink">
      <title>Using X11 via Fink</title>
      <p>Fink keeps track of X11 via a set of virtual packages.  The most important of these are:</p>
      <ul>
        <li><code>system-xfree86-shlibs</code>, representing the shared libraries</li>
        <li><code>system-xfree86</code>, representing the executables</li>
        <li><code>x11-shlibs</code>, again representing the shared libraries</li>
        <li><code>x11</code>, again representing the executables.</li>
        <li><code>system-xfree86-dev</code>, representing the headers</li>
        <li><code>x11-dev</code>, again representing the headers</li>
      </ul>
      <p>
        <strong>Note:</strong>  The presence of the separate <code>system-xfree86*</code> and 
        <code>x11*</code> families is a holdover from OS versions prior to 10.5, where Fink 
        had its own X11 packages which also provided the <code>x11</code> family.
      </p>
      <p>
        If you are missing any of these packages, then you're missing files from your X11 installation
        and may need to (re)install something.  For example, if <code>x11-dev</code> and
        <code>system-xfree86-dev</code> are missing, this often indicates that the X11 SDK hasn't been
        installed.
      </p>
    </section>
  </chapter>
  <chapter filename="run-xfree86">
    <title>Starting X11</title>
    <shorttitle>Starting X11</shorttitle>
    <section name="display-server">
      <title>Starting the Display Server</title>
      <p>
        There are basically two ways to start X11 under Mac OS X.
      </p>
      <p>
        One is by running the application bundle, e.g. via double-clicking the app in the Finder.
        This is typically <filename>/Applications/Utilities/X11(.app)</filename>, if you are on
        10.5-10.7, or <filename>/Applications/Utilities/XQuartz(.app)</filename> if you're using
        Xquartz.
      </p>
      <p>
        The other way is via entering 
        the <code>startx</code> command from a terminal window.
      </p>
    </section>
    <section name="xinitrc-d">
      <title>Customizing startup using the .xinitrc.d directory</title>
      <p>
        The preferred method in current versions of X11 to customize your startup is to create a
        directory named <filename>.xinitrc.d</filename> at the top of your home directory, and to
        fill that with executable scripts to run programs that you want to use at startup, including window
        managers
      </p>
      <p>
        <em>Important:</em> make sure to put an '&amp;'; after the names of programs that
        aren't window managers, or they will block other programs, including a window manager,
        from being run.  Also make sure that window managers do <em>not</em> have an
        '&amp;' after their names or they won't remain running, unless there is a session manager.
        that is set to run after them.  The <filename>xinit</filename>
        program interprets such a condition that as "the session has ended, I should kill the X server
        now, too".
      </p>
      <p>
        Example:  to run the <filename>WindowMaker</filename> window manager on startup, start
        with the following commands:
      </p>
      <codeblock>mkdir -p $HOME/.xinitrc.d
nano $HOME/.xinitrc.d/94-wmaker.sh</codeblock>
      <p>
        (or use your favorite editor).  Then put the following contents in
        <filename>94-wmaker.sh</filename>:</p>
      <codeblock>. /sw/bin/init.sh
quartz-wm --only-proxy &amp;
exec wmaker
      </codeblock>
      <p>Save the file, then use</p>
      <codeblock>chmod a+x 94-wmaker.sh</codeblock>
      <p>to make the script executable (<code>quartz-wm --only-proxy</code> will be discussed in a
      later section).</p>
      <p>
        Example:  to run the <filename>xlogo</filename> program on startup, start
        with the following commands:
      </p>
      <codeblock>mkdir -p $HOME/.xinitrc.d
nano $HOME/.xinitrc.d/74-xlogo.sh</codeblock>
      <p>
        (again, feel free to use your favorite editor).  Then put the following contents in
        <filename>74-xlogo.sh</filename>:</p>
      <codeblock>. /sw/bin/init.sh
xlogo &amp;</codeblock>
      <p>Save the file, then use</p>
      <codeblock>chmod a+x 74-xlogo.sh</codeblock>
      <p>to make the script executable.</p>
      <p>
        If you were to create both scripts above, the result would be that X11 would start up, run
        <filename>xlogo</filename>, and then the <filename>wmaker</filename> window manager.
      </p>
      <p>
        Example: full GNOME session.  Create an executable <filename>94-gnome-session.sh</filename>
        with the following contents:
      </p>
      <codeblock>. /sw/bin/init.sh
quartz-wm --only-proxy &amp;
metacity &amp;
exec gnome-session</codeblock>
      <p>
        Example: rootless GNOME session.  Create an executable <filename>94-gnome-panel.sh</filename>
        with the following contents:
      </p>
      <codeblock>. /sw/bin/init.sh
quartz-wm --only-proxy &amp;
metacity &amp;
exec gnome-panel</codeblock>
      <p>
        Example: KDE3.  Create an executable <filename>94-startkde.sh</filename> with the following
        contents:
      </p>
      <codeblock>. /sw/bin/init.sh
exec startkde</codeblock>
      <p>
        (startkde automatically starts a window manager and uses <code>quartz-wm --only-proxy</code>)
      </p>
      <p>
        Example: KDE4.  Create an executable <filename>94-startkde.sh</filename> with the following
        contents:
      </p>
      <codeblock>. /sw/bin/init.sh
exec /sw/opt/kde4/x11/bin/startkde</codeblock>
      <p><em>Notes:</em></p>
      <ul>
        <li>
          Starting each script with <code>. /sw/bin/init.sh</code> ensures that programs which require
          other items from the Fink tree can find them.
        </li>
        <li>
          The scripts are processed in ASCII order, so use prefixes to change that, as per the '74'
          and '94' above.
        </li>
        <li>
          The scripts must be executable and have a <filename>.sh</filename> extension.  Changing the
          execute permissions provides a method to alter which programs are run without deleting
          the scripts.
        </li>
        <li>
          Fink's <filename>xinitrc</filename> package, which is in the dependency chain for GNOME and
          KDE, overrides some of the default X11 lookup behavior, including that for user customization.
          We recommend that you restore it as discussed in the <xref section="xinitrc-pkg">Fink
          'xinitrc' package section</xref>.
        </li>
      </ul>
    </section>
    <section name="xinitrc">
      <title>The .xinitrc File</title>
      <p>
        <em>Note:</em>  the use of scripts in <xref section="xinitrc-d">$HOME/.xinitrc.d</xref> is
        preferred.
      </p>
      <p>
        If a file named <filename>.xinitrc</filename> exists in your home
        directory, it will be used to start some initial X clients, e.g. the
        window manager and some xterms or a desktop environment like GNOME.
        The <filename>.xinitrc</filename> file is a <filename>/bin/sh</filename>
        script that contains the commands to do this.  
        It is <em>not</em> necessary to put the usual <code>#!/bin/sh</code>
        in the first line or to set the executable bit on the file;
        <filename>xinit</filename> will always run it through the <filename>/bin/sh</filename> shell.
      </p>
      <p>
        When there is no <filename>.xinitrc</filename> file in your home
        directory, and if <xref section="xinitrc-d">$HOME/.xinitrc.d</xref> is not present, then
        X11 will use its default file,
        <filename>/usr/X11/lib/X11/xinit/xinitrc</filename>.
        You can use the default file as a starting point for your own
        .xinitrc:
      </p>
      <codeblock>cp /usr/X11/lib/X11/xinit/xinitrc ~/.xinitrc</codeblock>
      <p>
        To ensure reliable operation of Fink programs in <filename>.xinitrc</filename>, you should
        put <code>. /sw/bin/init.sh</code> right at the beginning of the file to make sure the
        environment is set up correctly.
      </p>
      <p>
        You can put fairly arbitrary commands in an <filename>.xinitrc</filename>,
        but there are some caveats.
        First, the shell that interprets the file will by default wait for
        every program to finish before it starts the next one.
        If you want several programs to run in parallel, you must tell the
        shell to put them "in the background" by adding a <code>&amp;</code> at
        the end of the line.
      </p>
      <p>
        Second, <code>xinit</code> waits for the <filename>.xinitrc</filename>
        script to finish and interprets that as "the session has ended, I should
        kill the X server now, too".
        This means that the last command of your <filename>.xinitrc</filename>
        must not be run in the background and it should be a long-living program.
        Customarily, the window manager or session manager is used for this purpose.
        In fact, most window managers or session managers assume that <code>xinit</code> is
        waiting for them to finish and use this to make the "Log out" entry in
        their menus work.
        (Note: To save some memory and CPU cycles, you can put an
        <code>exec</code> before the last line like in the examples below.)
      </p>
      <p>
        Example:  turnthe X11 bell off, starts some clients and finally execute the Enlightenment
        window manager:</p>
      <codeblock>. /sw/bin/init.sh

xset b off

xclock -geometry -0+0 &amp;
xterm &amp;
xterm &amp;

exec enlightenment</codeblock>
      <p>Example: start GNOME:</p>
      <codeblock>. /sw/bin/init.sh
quartz-wm --only-proxy &amp;
metacity &amp;
exec gnome-session</codeblock>
      <p>Finally, to start KDE3:</p>
      <codeblock>. /sw/bin/init.sh
exec startkde
</codeblock>
    </section>
    <section name="xinitrc-pkg">
      <title>The 'xinitrc' package</title>
      <p>
        Certain Fink packages need to be able to perform actions upon X11 startup.  To allow them to
        do this, there is a package called <code>xinitrc</code> (somewhat confusing, admittedly). 
        One side effect of installing this package, which is in the dependency chains of GNOME and KDE,
        is to circumvent the default behavior of using scripts from
        <filename>$HOME/.xinitrc.d</filename>.  There are currently a couple of methods available to
        allow user customization of the X11 startup <em>and</em> allow Fink packages to do their
        startup tasks:
      </p>
      <ul>
        <li>
          <p>
            The <code>xinitrc</code> package provides adminstrator entry points. Create the file
            <filename>/sw/etc/xinitrc-last-hook</filename> as a superuser, and
            give it the following contents:
          </p>
          <codeblock>#!/bin/sh
. /usr/X11/lib/X11/xinit/xinitrc.d/98-user.sh</codeblock>
          <p>
            This will restore the default behavior.
          </p>
        </li>
        <li>
          <p>
            Create a <filename>$HOME/.xinitrc</filename> as per the <xref section="xinitrc">.xinitrc</xref>
            section above.  Fink's <code>xinitrc</code> package overwrites the system's default
            version with its own, and so you will be using Fink's version.
          </p>
          <p>
            The appropriate place to add additional programs that you want to run is immediately above
            the line that says 
          </p>
          <codeblock># start the window manager</codeblock>
        </li>
      </ul>
    </section>
  </chapter>
  <chapter filename="other">
    <title>Other X11 Possibilities</title>
    <shorttitle>Other Stuff</shorttitle>
    <section name="vnc">
      <title>VNC</title>
      <p>
        VNC is a network-capable graphics display system similar in design to
        X11.
        However, it works at a lower level, making implementation easier.
        With the Xvnc server and a Mac OS X display client, it is possible to
        run X11 applications with Mac OS X.  Fink provides X11-based VNC packages for some platforms.
        Check the entries <link url="http://pdb.finkproject.org/pdb/browse.php?summary=vnc">here</link>
      </p>
      <p>
      </p>
    </section>
    <section name="weirdx">
      <title>WeirdX</title>
      <p>
        <link url="http://www.jcraft.com/weirdx/">WeirdX</link> is an X11
        server written in Java.
        It also supports rootless mode.
        Sources and a java jar file are available at the web site.
      </p>
    </section>
  </chapter>
  <chapter filename="trouble">
    <title>Troubleshooting XFree86 (*Currently being updated*)</title>
    <shorttitle>Troubleshooting</shorttitle>
    <section name="immediate-quit">
      <title>When I launch X11, it quits
or crashes almost immediately</title>
      <p>
        First of all: Don't Panic!
        There are lots of things than can go wrong with X11, and a good
        number of them can cause startup failures.
        Further, it is not unusual that X11 crashes when it experiences
        startup problems.
        This section tries to provide a comprehensive list of problems you may
        come across.
        But first, you need to gather two important pieces of information:
      </p>
      <p>
        <em>Display server version.</em>
        You can find the version of the display server in the Finder by clicking
        <em>once</em> on the X11 or XQuartz icon and then selecting "Get Info"
        from the menu.
      </p>
      <p>
        <em>Error messages.</em>
These are essential in pinpointing the particular problem you
experience.
How you get the error messages depends on how you started X11.
If you ran <code>startx</code> from a Terminal window, you'll have the
messages right there in that window.
Remember that you can scroll up.
If you started X11 by double-clicking the X11 or XQuartz icon, the messages end
up in the system log, which you can access through the Console
application in the Utilities folder.
Be sure to pick the right set of messages, e.g. the last one.
</p>
      <p>
We'll start with a list of the messages you may see:
</p>
      <codeblock>_XSERVTransmkdir: Owner of /tmp/.X11-unix should be set to root</codeblock>
      <codeblock>_IceTransmkdir: Owner of /tmp/.ICE-unix should be set to root</codeblock>
      <p>
Class: Harmless.
X11 creates hidden directories in /tmp to store the socket "files" for
local connections.
For security reasons, X11 prefers if these directories are owned by
root, but since they are world-writable anyway it will still run
without any problems.
(Note: It's quite hard to have these dirs owned by root, as Mac OS X
wipes out /tmp on reboots and X11 doesn't run with root privileges
and doesn't need to.)
    </p>
      <codeblock>cat: /Users/chrisp/.Xauthority: No such file or directory</codeblock>
      <p>
        Class: Mostly harmless.
        This issue seems to have no impact on operations.
        You can get rid of them by running <code>touch .Xauthority</code> in
        your home directory.
    </p>
      <codeblock>Gdk-WARNING **: locale not supported by C library</codeblock>
      <p>
Class: Harmless.
This just means what it says and won't keep the application from
working.
For more information, <xref section="locale">see below</xref>.
</p>
       <codeblock>Warning: no access to tty (Inappropriate ioctl for device).
Thus no job control in this shell.</codeblock>
      <p>
Class: Mostly harmless.
XDarwin 1.0a2 and later launch an interactive shell behind the scenes
to run your client startup file (.xinitrc).
This was done so that you don't have to add statements to set up PATH
in that file.
Some shells complain that they're not connected to a real terminal,
but that can be ignored since that shell instance is not used for
anything that requires job control or the like.
</p>
      <codeblock>The XKEYBOARD keymap compiler (xkbcomp) reports:
&gt; Error:            Can't find file "unknown" for geometry include
&gt;                   Exiting
&gt;                   Abandoning geometry file "(null)"
Errors from xkbcomp are not fatal to the X server</codeblock>
      <p>
Class: Mostly harmless.
As the message says, it is not fatal.
To my knowledge, X11 on Macs doesn't use the XKB extension at all.
Probably some client program tries to use it anyway...
</p>
      <codeblock>startx: Command not found.</codeblock>
      <p>
Class: Fatal.
This can happen when your shell
initialization files are not set up to add /usr/X11R6/bin to the PATH
variable.
If you use Fink and haven't changed your default shell, adding the
line <code>source /sw/bin/init.csh</code> to <filename>.cshrc</filename>
in your home directory (as recommended by the Fink instructions) should
be sufficient.
</p>
      <codeblock>_XSERVTransSocketUNIXCreateListener: ...SocketCreateListener() failed
_XSERVTransMakeAllCOTSServerListeners: server already running</codeblock>
      <codeblock>Fatal server error:
Cannot establish any listening sockets - Make sure an X server isn't already
running</codeblock>
      <p>
Class: Fatal.
This can happen when you accidentally run several instances of XDarwin
at once,
or maybe after an unclean shutdown (i.e. crash) of XDarwin.
It might also be a file permission problem with the sockets for local
connections.
You can try to clean that up with <code>rm -rf /tmp/.X11-unix</code>.
Restarting the computer also helps in most cases (Mac OS X
automatically cleans up /tmp when it boots, and the network stack is
reset).
</p>
      <codeblock>Xlib: connection to ":0.0" refused by server
Xlib: Client is not authorized to connect to Server</codeblock>
      <p>
Class: Fatal.
The client programs can't connect to the display server (XDarwin)
because they use bogus authentication data.
This can be caused by some VNC installations,
by running X11-based apps through sudo,
and probably some other freak accidents.
The usual fix is to delete the .Xauthority file (which stores the
authentication data) in your home directory and re-create an empty
file:
</p>
      <codeblock>cd
rm .Xauthority
touch .Xauthority</codeblock>
      <!--
<codeblock>more error messages still to come...</codeblock>
-->
      <p>
        <em>No message.</em>
      </p>
      <p>
Another common cause for X11 startup failures is an incorrect startup file.  If the window manager
listed in <filename>$HOME/.xinitrc</filename> doesn't exist, then 
What happens is that the <filename>.xinitrc</filename> is run and for some
reason terminates almost immediately.
<code>xinit</code> interprets this as "the user's session has ended"
and kills XDarwin.
See the <xref chapter="run-xfree86" section="xinitrc">.xinitrc
section</xref> for more details.
Remember to set up the PATH and to have one long-lived program that is
not started in the background.
It is a good idea to add <code>exec xterm</code> as a fallback when
your window manager or similar can't be found.
</p>
    </section>
    <section name="black">
      <title>Black icons in the GNOME panel or in the
menu of a GNOME application</title>
      <p>
A common problem is that icons or other images are displayed as black
rectangles or black outlines.
Ultimately, this is caused by limitations in the operating system
kernel.
The problem has been reported to Apple, but so far they seem unwilling
to fix it; see the filed <link url="http://www.opensource.apple.com/bugs/X/Kernel/2691632.html">Darwin
bug report</link> for details.
</p>
      <p>
The current situation is that the MIT-SHM extension of the X11
protocol is practically unusable on Darwin and Mac OS X.
There are two ways to turn the protocol extension off: in the server
or in the clients.
The XFree86 servers installed by Fink (i.e. the xfree86-server and
xfree86-rootless packages) have it turned off.
The GIMP and the GNOME panel have been inoculated as well.
If you experience black icons in another application, start that
application with the <code>--no-xshm</code> command line option.
</p>
    </section>
    <section name="keyboard">
      <title>The keyboard doesn't work in XFree86</title>
      <p>
This is a known problem that so far seems to affect only portables
(PowerBook, iBook).
To work around this, the "Load from file" keymapping option was
implemented.
Nowadays it has become the default because the old method (reading the
mapping from the kernel) stopped working with Mac OS X 10.1.
If you haven't enabled the option already, you can do so in the
XDarwin preferences dialog.
Check the "Load from file" checkbox and select the keymapping file to
load.
After restarting XDarwin, your keyboard should mostly work (see
below).
</p>
      <p>
If you're starting XFree86 from the command line, you can pass the
name of the keymapping file to load as an option, as in:
</p>
      <codeblock>startx -- -quartz -keymap USA.keymapping</codeblock>
    </section>
    <section name="delete-key">
      <title>The Backspace key doesn't work</title>
      <p>
This can happen when you use the "Load keymapping from file" option
described above.
The mapping files describe the backspace key as "Delete", not as
"Backspace".
You can correct that by putting the following line in your .xinitrc
file:
</p>
      <codeblock>xmodmap -e "keycode 59 = BackSpace"</codeblock>
      <p>
If I remember correctly, XDarwin 1.0a2 and later have code that
correctly maps the Backspace key automatically.
</p>
    </section>
    <section name="locale">
      <title>"Warning: locale not supported by C library"</title>
      <p>
These messages are quite common, but harmless.
It just means what it says - internationalization is not supported
through the standard C library, the program will use the default
English messages, date formats, and so on.
There are several ways to deal with this:
</p>
      <ul>
        <li>
          <p>
Just ignore the messages.
</p>
        </li>
        <li>
          <p>
Get rid of the messages by unsetting the environment variable LANG.
Note that this will also turn internationalization off in programs
that actually support it (via gettext/libintl).
Example for .xinitrc:
</p>
          <codeblock>unset LANG</codeblock>
          <p>
Example for .cshrc:
</p>
          <codeblock>unsetenv LANG</codeblock>
        </li>
        <li>
          <p>
(10.1 only) Use the <code>libxpg4</code> Fink package.
It builds a small library that contains working locale functions and
arranges that it is loaded before the system libraries (using the
DYLD_INSERT_LIBRARIES environment variable).
You may have to set the LANG environment variable to a fully qualified
value, e.g. <code>de_DE.ISO_8859-1</code> instead of <code>de</code>
or <code>de_DE</code>.
</p>
        </li>
        <li>
          <p>
Ask Apple to include proper locale support in a future version of Mac
OS X.
</p>
        </li>
      </ul>
    </section>
  </chapter>
  <chapter filename="tips">
    <title>Usage Tips (*Update Pending*)</title>
    <shorttitle>Tips</shorttitle>
    <section name="terminal-app">
      <title>Launching X11 apps from Terminal.app</title>
      <p>
To launch X11 applications from a Terminal.app window, you must set
the environment variable "DISPLAY".
This variable tells the applications where to find the X11 window
server.
In the default setup - XDarwin runs on the same machine -, you can set the variable as follows:
</p>
      <ul>
        <li><p>For tcsh users:</p>
      <codeblock>setenv DISPLAY :0.0</codeblock>
</li>
        <li><p>For bash users:</p>
<codeblock>export DISPLAY=":0.0"</codeblock>
</li>
      </ul>
      <p>
A nice setup is to have XDarwin.app started when you log in (settable
in the Login panel of the System Preferences on Mac OS 10.2, in the Accounts panel, Startup items on Mac OS 10.3):
</p>
      <ul>
        <li><p>For tcsh users, add the following to your .cshrc file:</p>
      <codeblock>if (! $?DISPLAY) then
  setenv DISPLAY :0.0
endif</codeblock>
</li>
        <li><p>For bash users, add the following to your .bashrc file:</p>
<codeblock>[[ -z $DISPLAY ]] &amp;&amp; export DISPLAY=":0.0"</codeblock>
</li>
      </ul>
      <p>
This sets DISPLAY automatically in every shell.
It doesn't override the current value when DISPLAY is already set,
though.
This way you can still run X11 applications remotely or through ssh
with X11 tunneling.
</p>
    </section>
    <section name="open">
      <title>Launching Aqua apps from an xterm</title>
      <p>
One way to launch Aqua applications from an xterm (or any other shell,
actually) is the <code>open</code> command.
Some examples:
</p>
      <codeblock>open /Applications/TextEdit.app
open SomeDocument.rtf
open -a /Applications/TextEdit.app index.html</codeblock>
      <p>
The second example opens the document in the application that is
associated with it, the third example explicitly gives an application
to use.
</p>
    </section>
    <section name="copy-n-paste">
      <title>Copy and Paste</title>
      <p>
Copy and Paste generally works between the Aqua and X11 environments.
There are still some bugs.
Emacs is reported to be picky about the current selection.
Copy and paste from Classic to X11 doesn't work.
</p>
      <p>
Anyway, the trick is to use the respective methods of the environment
you're in.
To transfer text from Aqua to X11, use Cmd-C in Aqua, then bring the
destination window to the front and use the "middle mouse button", i.e. Option-click
on a single-button mouse (this can be configured 
under XDarwin's Preferences), to paste.
To transfer text from X11 to Aqua, simply select the text with the
mouse in X11, then use Cmd-V in Aqua to paste it.
</p>
      <p>
The X11 system actually has several separate clipboards (called "cut
buffers" in X11 speak), and some applications have weird views which
one should be used.
In particular, pasting into GNU Emacs or XEmacs sometimes doesn't work
because of this.
The program <code>autocutsel</code> can help here; it automatically
synchronizes the two main cut buffers.
To run it, install the autocutsel Fink package and add the following
line to your .xinitrc:
</p>
      <codeblock>autocutsel &amp;</codeblock>
      <p>
(Make sure it's <em>before</em> the line that exec's the window
manager and never returns! Don't just add it at the end, it won't
be executed.) And remember that it is no more necessary for Apple's X11 (see <xref chapter="inst-xfree86" section="apple-binary">Some notes on using Apple's X11</xref>).
</p>
      <p>If you are using Apple's X11, then you can use Command-C or Edit-&gt;Copy, as usual for Mac apps, to copy text to the clipboard, and the middle-mouse button or Command-V to paste from the clipboard to Apple X11.</p>
      <p>In any case, if you encounter problems copying or pasting from Aqua to X11 and vice-versa, you may first try to do the pasting part twice (it may happen that the copy does not occur at once), then use intermediate applications, e.g. TextEdit or Terminal.app on the Aqua side, nedit or an xterm on the X11 side. In my experience, there is always a solution.</p>
    </section>
  </chapter>
</document>
