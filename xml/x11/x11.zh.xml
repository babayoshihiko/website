<?xml version = '1.0' encoding = 'utf-8'?>
<!DOCTYPE document SYSTEM "../finkdoc.dtd">
<document filename="index" lang="zh" >
  <title>在 Darwin 和 Mac OS X 上运行 X11</title>
  <shorttitle>运行 X11</shorttitle>
  <cvsid>$Id: x11.zh.xml,v 1.1 2004/03/04 05:05:24 jeff_yecn Exp $</cvsid>
  <preface>
    <p>
本文档是关于如何在苹果的 Mac OS X 和 Darwin 系统上运行 X11 / XFree86 / Xtools。它包括一些介绍和开发历史，然后描述当前的状况，在通过或不通过 Fink 的情况下使用 X11 的许多选项。
</p>
  </preface>
  <chapter filename="intro" >
    <title>介绍</title>
    <shorttitle>介绍</shorttitle>
    <section name="def-x11" >
      <title>什么是 X11？</title>
      <p>
<link url="http://www.x.org/" >X Window 系统</link>版本 11，简称 X11，是一个具有对网络透明特性的客户／服务器架构的图形显示系统。
它支持应用程序在你的屏幕上绘制象素，线条，文字，图象等等。
X11 还包括一些其它的辅助的函数库，使得它可以容易地绘制用户界面，例如：按钮，文本输入区等等。</p>
      <p>
X11 是 Unix 事实上的图形系统标准。
Linux，各种 BSD 版本和多数的商用 Unix 都采用它。
类似 CDE，KDE 和 GNOME 等桌面环境都运行在它之上。
</p>
    </section>
    <section name="def-macosx" >
      <title>什么是 Mac OS X？</title>
      <p>
        <link url="http://www.apple.com/macosx/" >Mac OS X</link> 是<link url="http://www.apple.com/" >苹果电脑</link>开发的一个操作系统。
和它的祖先 NeXTStep 和 OpenStep 一样，它基于 BSD，因此属于 Unix 操作系统家族的一份子。
不过，它包括一个专有的图形显示系统。
这个图形引擎称为 Quartz（石英），而其外观风格则称为 Aqua（水）。很多时候这两个名字通常会相互代替使用。
</p>
    </section>
    <section name="def-darwin" >
      <title>什么是 Darwin？</title>
      <p>
        <link url="http://OpenDarwin.org/" >Darwin</link> 基本上是 Mac OS X 的免费和公开源码的精简版本。
它不包括 Quartz，Aqua，或其它相关技术。
默认情况下，它只包括一个文字终端。
</p>
    </section>
    <section name="def-xfree86" >
      <title>什么是 XFree86？</title>
      <p>
        <link url="http://www.xfree86.org/" >XFree86</link> 是对 X11 的一个开放源码的实现。最初它开发运行在 Intel x86 PC 上，因此得名。
现在，它可以运行在主要的硬件架构和操作系统上，包括 OS/2，Darwin，Mac OS X 和 Windows。
</p>
    </section>
    <section name="def-xtools" >
      <title>什么是 Xtools？</title>
      <p>
Xtools 是 <link url="http://www.tenon.com/" >Tenon
Intersystems</link> 的一个产品。
它有针对 Mac OS X 上基于 XFree86 的 X11 的产品。
</p>
    </section>
    <section name="client-server" >
      <title>客户和服务器</title>
      <p>
X11 使用客户／服务器体系架构。
有一个中央的程序负责实际的绘图工作以及协调不同程序的访问要求，这个程序称为服务器。
想要绘图的程序使用 X11 与服务器连接告诉它要画什么，
这些程序在 X11 中称为客户（程序）。
</p>
      <p>
X11 允许服务器和客户在不同的机器上，
这种情况下很容易发生术语的混淆。
在一个工作站和服务器的环境中，你在工作站计算机上运行 X11 显示服务器程序，在服务器计算机上运行应用程序（X 客户）。
所以，我们这里谈到&quot;服务器&quot;时，我们指的是 X11 显示服务程序，而不是藏在你衣橱里面的计算机。
</p>
    </section>
    <section name="rootless" >
      <title>“无根的”（rootless）是什么意思？</title>
      <p>
一点背景：
X11 把屏幕描绘成按层次关系嵌套在一起的许多窗口。
在层次关系的顶端，有一个特殊的窗口，它的大小是整个屏幕，并包括全部其它窗口。
这个窗口包含背景，并被称为&quot;根（root）窗口&quot;。
</p>
      <p>
现在回到题目：
和任何图形环境一样，X11 被设计成独立运行并完全控制整个屏幕。
在 Mac OS X 中，Quartz 已经控制了屏幕，所以当这两个一起运行的时候，其中一个必须做出特殊的处理。
</p>
      <p>
一种办法让两个程序轮流控制。
每个环境都有完整的屏幕，但同一时间只有一个可见，用户可以在两种环境中间切换。
这个模式称为全屏幕或有根模式。
之所以称为有根模式是因为在 X11 屏幕上的确存在通常的根窗口，和其它系统一样。
</p>
      <p>
另外一种版本是根据窗口来混合两种环境。
这消除了切换两种模式屏幕的需要。
它也消除了了 X11 的根窗口，因为 Quartz 已经管理了桌面背景。
因为没有（可见的）根窗口，这种模式称为&quot;无根&quot;模式。这是在 Mac OS X 上使用 X11 最舒服的一种方式。
</p>
    </section>
    <section name="wm" >
      <title>什么是窗口管理器？</title>
      <p>
在多数图形环境中，窗口边框的外观（标题栏，关闭按钮，等）是由系统定义的。
X11 则不是这样。
在 X11 中，窗口的框架（也称为&quot;装饰&quot;）是由一个称为窗口管理器的单独程序提供的。
一般认为，窗口管理器只是另外一个客户程序；它用通常的办法启动，并与 X 服务器按同样的方法通信。
</p>
      <p>
由很多不同的窗口管理器供我们选择。
<link url="http://www.xwinman.org/" >xwinman.org</link>有一个详细的清单。
多数常见的窗口管理器都允许用户定制称为<link url="http://www.themes.org/" >主题</link>的窗口外观。
许多窗口管理器还提供额外的功能，象在根窗口上的弹出菜单，docks，或程序启动按钮。
</p>
      <p>
Fink 已经打包了很多窗口器，这里是一个
<link url="http://fink.sourceforge.net/pdb/section.php/x11-wm/" >当前的清单
</link>。
      </p>
    </section>
    <section name="desktop" >
      <title>什么是 Quartz/Aqua，Gnome 和 KDE？</title>
      <p>
他们都是桌面环境，另外还有很多类似的环境。
他们的用途是给应用程序提供额外框架，使得他们的外观，使用感觉和行为在视觉上保持一致。例如：
</p>
      <p> 图形引擎：X11
</p>
      <p> 窗口管理器：
<link url="http://sawmill.sourceforge.net/" >sawfish</link>
      </p>
      <p> 桌面：<link url="http://www.gnome.org/" >Gnome</link>
      </p>
      <p>
图形显示引擎，窗口管理器和桌面之间的界限是模糊的，因为有些类似或相同的功能，会被其中之一或多个所同时实现。这也是为什么某个特定的窗口管理器可能不可以被另外一个特定的桌面环境所使用的原因。

</p>
      <p>
许多的程序会针对特定的桌面环境开发。
多数程序可以在安装对应的桌面环境的函数库（以及相应的更底层的函数库）后，能够不减损或有限减损功能地运行。 
其中的例子是越来越多的 
<link url="http://fink.sourceforge.net/pdb/section.php/gnome" >
GNOME 程序精选
</link>
可以在不运行 GNOME 的情况下安装和运行。  
不幸的是，对 <link url="http://www.kde.org/" >KDE 应用程序</link>却
<link url="http://fink.sourceforge.net/faq/usage-fink.php#kde" >
还没有取得类似的进展
</link>。 
      </p>
    </section>
  </chapter>
  <chapter filename="history" >
    <title>历史</title>
    <shorttitle>历史</shorttitle>
    <preface>
      <p>［请原谅我使用史诗的风格，我没法抗拒…］</p>
      <p>［也请原谅我没有能力完全表达英语原文的神韵－中文译者］</p>
    </preface>
    <section name="early" >
      <title>早期岁月</title>
      <p>
创世之初，一切荒芜。
Darwin 还是一个初生婴儿，Mac OS X 仍然在开发。它们上面都没有 X11 的实现。
</p>
      <p>
John Carmack 到来了，他把 XFree86 带到了 Mac OS X 服务器版，当时 Darwin 家族唯一可用的操作系统。
后来，Dave ZarzyckiLater 把移植代码升级到 XFree86 4.0，并运行在 Darwin 1.0 上。
这些补丁最后飘落到 Darwin 项目的 CVS 库中，沉睡着，等待某一天的到来…
</p>
    </section>
    <section name="xonx-forms" >
      <title>XonX 出世</title>
      <p>
某个美好的日子，Torrey T. Lyons 经过那里，Darwin 补丁终于等到了它们所一直等待的人。
Torrey 把它们带到了新家：官方 XFree86 CVS 库。
现在是 Mac OS X Public Beta 和 Darwin 1.2 的时代。
XFree86 4.0.2 能在 Darwin 上运行得很好，但在 Mac OS X 上却需要退出 Aqua 界面回到控制台上去运行。
因此，Torrey 把 <link url="http://mrcla.com/XonX/" >XonX 团队</link>召集到他身边，开始了把 XFree86 带到 Mac OS X 上的征途。
</p>
      <p>
在差不多相同的时候，Tenon 开始使用 XFree86 4.0 为基础建造 Xtools。
</p>
    </section>
    <section name="root-or-not" >
      <title>有根到无根</title>
      <p>
很快，XonX 团队成功地使 XFree86 以全屏幕方式与 Quartz 同时运行。他们发布了测试版本给那些勇于尝试的用户。
测试版本叫做 XFree86-Aqua，简称 XAqua。
由于 Torrey 是团队的领导者，因此所做的修改直接加进了 XFree86 的 CVS 库，并一起向 4.1.0
版本迈进。
</p>
      <p>
早期，与 Quartz 的界面是通过一个叫 Xmaster.app （最初用 Carbon 编写，后来用 Cocoa 重写了）的小程序来完成的。
后来这些代码被集成到 X server 中，导致了 XDarwin.app 的诞生。
这个时候，共享库的支持也被加入了（Tenon 用它们来代替自己的补丁程序，很方便地实现了二进制兼容）。
同时，在无根模式上也获得了重要的进展（使用 Carbon API），可惜，那时候要加进 XFree86 4.1.0 中已经太晚了。
不过无根模式的补丁是免费软件，因此得以不断地在网上传播。
在 XFree86 4.1.0 仅以全屏幕模式发布以后，无根模式的工作仍在进展，不过改为使用 Cocoa API 了。
最终，一个试验性的无根模式被加进了 XFree86 的 CVS 库。
</p>
      <p>
这时，苹果发布了 Mac OS X 10.0 和 Darwin 1.3，
几个星期以后，Tenon 发布了 Xtools 1.0。
</p>
      <p>把无根模式集成进 XFree86 的开发工作一直在进行，到 2002 年一月 XFree86 4.2.0 发布的时候，Darwin/Mac OS X 的版本已经完全集成到 XFree86 的主发布版本中了。
</p>
    </section>
  </chapter>
  <chapter filename="inst-xfree86" >
    <title>获取和安装 XFree86</title>
    <shorttitle>安装 XFree86</shorttitle>
    <section name="fink" >
      <title>通过 Fink 安装</title>
      <p>
Fink 可以让你以你喜欢的方式安装 X11，
不过它也提供自己的 XFree86 软件包。如果你使用 <code>fink install ...</code>，它会下载源代码，并在你的计算机上进行编译。如果你使用 <code>apt-get install ...</code> 或 <code>dselect</code> 前端工具，它会下载预编译的二进制包，类似官方的
XFree86 发行版。
</p>
      <p>
<code>xfree86-base</code> 软件包包括除 XDarwin 服务器外的所有 XFree86 4.2.1.1 （对 10.1 用户是 4.2.0）程序。
<code>xfree86-rootless</code> 软件是来自标准稳定版的 XFree86 4.2.1.1 的服务器软件。它同时支持全屏幕和无根模式，也包括 OpenGL 支持。
（早期，Fink 还有一个只提供全屏幕模式的 <code>xfree86-server</code> 软件包，但现在已经不是一个有关联的选择了）。
你可以选择象后面那样，自己安装服务器。这种情况下，你只应该安装 <code>xfree86-base</code>，否则 Fink 可能会覆盖你自己安装的服务器。注意，当前<code> xfree86-base</code> (4.2.1.1-3) 的稳定版本在构建过程中还会产生 <code>xfree86-rootless</code>，<code>xfree86-base-shlibs</code> 和 <code>xfree86-rootless-shlibs</code>。你必须安装全部这四个软件包才能获得一个可用的 XFree86 环境。
</p>
      <p><code>xfree86-base-threaded</code> 和 <code>xfree86-rootless-threaded</code> 本质上是相同的东西，但被修改以提供线程支持。对某些程序来说，例如<filename>xine</filename>，这是必须的。</p>
      <p>XFree86 4.2.11 （非线程版）被认为是在 10.2 下与 Fink 一起使用的稳定的基准版本。XFree86 4.3.0 也有提供，但更多地被认为是试验性的，而且在本文档写作的时候，仍出于未稳定代码树中。它内置了线程支持，并比 4.2.1.1 快。要安装这个版本，你应该安装 <code>xfree86</code> 软件包。注意，对这个版本，再没有单独的 -base 和 -rootless 软件包，虽然函数库仍被划分到 <code>xfree86-shlibs</code>中。如果你构建与 4.3 连接的二进制版本，他们不能在 4.2.1.1 或苹果的 X11 上运行，请小心行事。</p>
      <p>
        <em>10.3 用户：</em>你需要安装版本 4.3.99.16-2 或更新，它是 XFree86-4.4 升级版。如果你是使用二进制发布方式，确认已经升级了软件包描述（例如，运行 <code>sudo apt-get update</code>）。</p>
    </section>
    <section name="apple-binary" >
      <title>苹果公司的二进制版本</title>
      <p>
2003 年 1 月 7 日，苹果发布了<link url="http://www.apple.com/macosx/x11/" >一个基于 XFree86-4.2 的 X11 定制实现</link>，它包括 Quartz 渲染和加速的 OpenGL。2003 年 2 月 10 日发布了补充更多特性和修正缺陷的新版本。第三个版本（Beta 3）2003 年 3 月 17 日，它包括更多的特性和缺陷修正。这个版本可以运行在 Juguar 上。
</p>
      <p>2003 年 10 月 24 日，苹果发布了 Panther (10.3)，包括了它们 X11 的发布版本。这个版本基于 XFree86-4.3。</p>
      <p>
要使用苹果的二进制版本，你需要安装 <em>X11 User</em> 软件包，你还需要
<link url="http://fink.sourceforge.net/doc/users-guide/upgrade.php" >更新</link> Fink。</p>
      <p>在 <code>fink-0.16.2</code>下，你需要安装 <em>X11 SDK</em> 软件包。这样以后，Fink 才可以创建 <code>system-xfree86</code> 虚拟软件包。</p>
      <p>在 <code>fink-0.17.0</code> 或更新版本下，只有你需要从源程序编译软件包才必须安装 X11 SDK 。这种情况下，即使你没有安装 SDK，仍然会有 <code>system-xfree86</code> 和 <code>system-xfree86-shlibs</code> 虚拟软件包，后者表示共享函数库。如果你安装了 SDK，那么还会有一个
<code>system-xfree86-dev</code> 软件包，代表头文件。
</p>
      <p>
如果你已经安装了 XFree86，无论是否通过 Fink 安装，你都可以<xref section="switching-x11" chapter="inst-xfree86" >用一个 X11 软件包来替换另一个</xref>。确定你删除了现有的软件包，然后安装苹果的 X11（如果需要的话，还包括 X11 SDK）。
</p>
      <p>
关于使用苹果 X11 的一些注意事项：
</p>
      <ul>
        <li>
          <p><filename>autocutsel</filename> 软件包已经不在需要。如果正在使用启动这个功能的 X11，你应该关闭它。</p>
        </li>
        <li>
          <p>苹果的 X11 使用你现有的 <filename>~/.xinitrc</filename> 文件。如果你希望全功能的 Quartz 集成，你应该使用 <filename>/usr/X11R6/bin/quartz-wm</filename>
作为你的窗口管理器，或者删除 <filename>~/.xinitrc</filename> 文件。</p>
          <p>如果你只需要拷贝粘贴支持，但希望使用另外一个窗口管理器，你可以按照下面的例子做：</p>
          <codeblock>/usr/X11R6/bin/quartz-wm --only-proxy &amp;
exec /sw/bin/fvwm2</codeblock>
          <p>当然，你也可以使用其它的窗口管理器，<code>startkde</code>，等等。</p>
        </li>
        <li>
          <p>
            <filename>quartz-wm</filename> 不完全支持 Gnome/KDE 窗口管理管器的一些提示参数，所以你可能会看到一些本不应该有边框的窗口会有边框。</p>
        </li>
        <li>
          <p>默认情况下，苹果的 X11 不理会 Fink 的环境变量设置。为了启动你通过 fink 安装的程序（例如窗口管理器，gnome-session，其它在
<filename>/sw/bin</filename> 下的应用程序），把下面移行放在 <filename>~/.xinitrc</filename> 文件比较靠前的地方（比如，在最初的 &quot;<filename>#!/bin/sh</filename>&quot; 的这一行之后，但在运行其它程序以前）：</p>
          <codeblock> . /sw/bin/init.sh
</codeblock>
          <p>这样 Fink 的环境就被初始化了。注意：我们使用 <filename>init.sh</filename> 文件而不是 <filename>init.csh</filename> 文件是因为<filename>.xinitrc</filename> 是使用 <filename>sh</filename> 来做解释器，而不是 <filename>tcsh</filename>。</p>
        </li>
        <li>
          <p>有些程序需要调用 Fink 目录下的其它程序，如果这些程序是通过应用程序菜单启动的话，还需要另外的专门处理。而不仅仅是使用全路径名这个简单。例如：</p>
          <codeblock>/sw/bin/emacs</codeblock>
          <p>如果你使用 bash 作为你的默认 shell 程序，你需要象下面这样设置：</p>
          <codeblock>. /sw/bin/init.sh ; emacs</codeblock>
          <p>如果你用 tcsh：</p>
          <codeblock>source /sw/bin/init.csh ; emacs</codeblock>
          <p>这个确保程序有一个正确的 PATH 环境。你可以对任何 Fink 安装的程序使用这个语法。</p>
        </li>
        <li>
          <p>如果你尝试手工编译一个需要和苹果的 X11 连接的软件包，并且看到类似下面的错误：</p>
          <codeblock>ld: err.o illegal reference to symbol: _XSetIOErrorHandler 
defined in indirectly referenced dynamic library 
/usr/X11R6/lib/libX11.6.dylib</codeblock>
          <p>那么你需要在你的连接选项中使用 <code>-lX11</code>。检查你的软件的配置选项，看如何给它添加额外的连接参数。</p>
        </li>
        <li>
          <p>如果你原来使用 <code>xfree86</code> 软件包，后来又转到苹果的 X11 （无论是 10.2.x 还是 10.3.x 上），任何连接到 <code>xfree86</code> 的软件包都需要重新编译，因为他们并不二进制兼容。</p>
        </li>
      </ul>
    </section>
    <section name="official-binary" >
      <title>官方二进制版本</title>
      <p>
XFree86 项目又一个针对 XFree86 4.2.0 的官方二进制发行版，它还可以通过补丁升级到 4.2.1.1。
你可以在你本地的 <link url="http://www.xfree86.org/MIRRORS.shtml" >XFree86 镜像站点</link>中的<code>4.2.0/binaries/Darwin-ppc-5.x</code> 目录中找到它。
一定要同时下载 <filename>Xprog.tgz</filename> 和 <filename>Xquartz.tgz</filename>
这两个压缩档，虽然它们被标为可选的。
如果你不知道你需要些什么，那么可以下载整个目录。
以 root 权限运行 <filename>Xinstall.sh</filename> 脚本来进行安装。
（在安装之前，你也许要阅读一下<link url="http://www.xfree86.org/4.2.0/Install.html" >官方指南</link>）。如果你愿意的话，也可以使用 XonX 的<link url=" http://prdownloads.sourceforge.net/xonx/XInstall_10.1.sit?download" >二进制安装包</link>，它使用相同的源程序，但更容易使用。上面两种情况下，你都应该下载，解压，然后运行下面的更新：</p>
      <ol>
        <li>10.1 用户：<link url="http://prdownloads.sourceforge.net/xonx/XFree86_4.2.0.1-10.1.zip?download" >4.2.0 -> 4.2.0.1 升级</link>。10.2 用户：  <link url="http://prdownloads.sourceforge.net/xonx/XFree86_4.2.0.1-10.2.zip?download" >4.2.0 -> 4.2.0.1 升级</link>
        </li>
        <li>10.1 和 10.2 用户：<link url="http://prdownloads.sourceforge.net/xonx/XFree86_4.2.1.1.zip?download" >4.2.0.1 -> 4.2.1.1 升级</link>
        </li>
      </ol>
      <p>同时，还有一个 XFree86 4.3.0 的官方二进制安装版，在 <link url="http://www.xfree86.org/MIRRORS.shtml" >XFree86 镜像站点</link>的<code>4.3.0/binaries/Darwin-ppc-6.x</code>目录里面。
一定要下载 <filename>Xprog.tgz</filename> 和 <filename>Xquartz.tgz</filename>
这两个压缩档，即使它们被标为可选的。
如果你不确定你需要什么，可以下载整个目录。
用 root 权限运行 <filename>Xinstall.sh</filename> 脚本来进行安装。
（你也许会希望在安装前先阅读一下<link url="http://www.xfree86.org/4.3.0/Install.html" >官方指南</link>）。</p>
      <p>无论你安装哪一个版本，你现在都拥有了一个 XFree86 软件包，其中包括一个可以在 OS X 下支持全屏幕或无根模式的服务器程序。
</p>
    </section>
    <section name="official-source" >
      <title>官方源代码版</title>
      <p>
如果你有时间可花的话，你可以用源代码构建 XFree86 4.2.0。
你可以在你本地的 <link url="http://www.xfree86.org/MIRRORS.shtml" >XFree86 镜像站点</link>的<code>4.2.0/source</code>目录中找到它们。
获取一共三个的 <filename>X420src-#.tgz</filename> 压缩档，并把它们解压到相同的一个目录里面。
你可以把一些宏定义放到 XFree86 的源代码树的 <filename>config/cf/host.def</filename> 文件里面，来自己定制构建方式。
<!--
To build on pure Darwin, create the file
<code>config/cf/host.def</code> in the XFree86 source tree and put the
following line in it:
</p>
<codeblock>#define DarwinQuartzSupport NO</codeblock>
<p>
You can add further defines to that file if you want; see
-->
查看
<filename>config/cf/darwin.cf</filename> 文件来获得一些提示。
（注意：只有那些被 #ifndef 包围的宏才可以被 host.def 文件所重定义。）
</p>
      <p>
当你对你的配置满意以后，使用下面指令编译和安装 XFree86：
</p>
      <codeblock>make World
sudo make install install.man</codeblock>
      <p>要升级到 4.2.1.1，请按照<xref section="official-binary" >官方二进制版</xref>部分的指引。</p>
      <p>要安装 4.3.0，按照上面的指引，把 &quot;2&quot; 替换成 &quot;3&quot;，但是不要做 4.2.1.1 的升级步骤。</p>
      <p>
和安装官方二进制版一样，你现在已经拥有了一个 XFree86 软件包，其中包括一个可以在 OS X 下支持全屏幕或无根模式的服务器程序。
</p>
    </section>
    <section name="latest-cvs" >
      <title>最新的源代码</title>
      <p>
如果你不但有时间，还有坚强的神经的话，你可以从公开的 CVS 库里面获取最新的开发过程中的 XFree86 源代码。
注意，代码是处于持续开发过程中的，因此，你今天下载的内容不一定和你昨天下载的相同。
</p>
      <p>
要安装，按照 <link url="http://www.xfree86.org/cvs/" >XFree86
CVS</link> 中的办法下载 <filename>xc</filename> 模块。然后，按照上面的从源代码构建的办法进行。
</p>
    </section>
<!--><section name="xonx-bin" >
<title>The XonX binary test releases (XAqua,
XDarwin)</title>
<p>
In the time before 4.1.0 was released, the XonX team put out a series
of binary test releases with the name XAqua.
These releses are obsolete and should not be used.
</p>
<p>
With the introduction of rootless mode into XFree86's mainline CVS
(after 4.1.0 was released), the XonX team once again started to
put out binary test releases, this time under the name XDarwin.
This eventually resulted in the XDarwin released with 4.2.0.
</p>
<p>The <link url="http://www.mrcla.com/XonX/" >XonX
web page</link> indicates that post-4.2.0 testing versions of XDarwin may
someday be released, but none have been as yet.  They would presumably be 
installed on top of XFree86 4.2.0 (or later).
</p>
</section><-->    <section name="macgimp" >
      <title>MacGimp</title>
      <p>
The downloadable installer which was offered by the MacGimp people 
during 2001
did not contain XFree86.
(It would overwrite some XFree86 configuration files, though.)
</p>
      <p>
The CD that <link url="http://www.macgimp.com/" >MacGimp, Inc.</link>
offers for sale reportedly contains XFree86.
It's not quite clear what version it is; it may be a mix of
4.0.3, 4.1.0 and a development snapshot.
The server does rootless mode, using a patch from the time before
4.1.0.
</p>
    </section>
<!--><section name="rootless" >
<title>Roaming Rootless Servers</title>
<p>
There are various rootless server binaries roaming around
the net.  With the release of the official 4.2.0 binaries
this should not be a desirable way to install XFree86.
</p>
</section><-->    <section name="switching-x11" >
      <title>Replacing X11</title>
      <p>
If you have already installed one of the Fink X11 packages but for one reason or another
have decided you need to remove one and replace it with another, the procedure is pretty
straightforward.  You will have to force a removal of the old packages, and then install the
new, to keep your dpkg database consistent.
</p>
      <p>
There are two different ways to do this:
</p>
      <ol>
        <li>
          <p>Use FinkCommander</p>
          <p>
   If you are using <link url="http://finkcommander.sourceforge.net/" >FinkCommander</link>, you
   can force removal through the menu.  For example, if you have
   <filename>xfree86-rootless</filename> installed, but want the threaded version, you
   can select your <filename>xfree86-rootless</filename>,
   <filename>xfree86-rootless-shlibs</filename>, <filename>xfree86-base</filename>, and
   <filename>xfree86-base-shlibs</filename> packages, and then run:
  </p>
          <codeblock>Source -> Force Remove</codeblock>
        </li>
        <li>
          <p>Manually Remove from the Command-Line</p>
          <p>
   To manually, remove them, you use the <filename>dpkg</filename> with the --force-depends
   option, like so:
  </p>
          <codeblock>sudo dpkg -r --force-depends xfree86-rootless\ 
xfree86-rootless-shlibs xfree86-base xfree86-base-shlibs</codeblock>
          <p>
   Note that if you have apps that require threaded XFree86, you may have trouble with your
   dpkg database if you force remove it and install a different XFree86 package or placeholder
   package.
  </p>
        </li>
      </ol>
      <p>If, on the other hand, you have an X11 version that was not installed via Fink, you'll need to remove it via the command line:</p>
      <codeblock>sudo rm -rf /usr/X11R6 /etc/X11</codeblock>
      <p>The above holds true for removing any flavor of X11 that you didn't install through Fink.  You will also need to remove <filename>XDarwin.app</filename> | 
<code>X11.app</code>, depending on what you had installed.  Make sure to check your <filename>.xinitrc</filename> if you are removing Apple's X11 to 
make sure that you aren't trying to run <filename>quartz-wm</filename>.  You can now install whatever new X11 variety you want, manually or via Fink.</p>
    </section>
    <section name="fink-summary" >
      <title>Fink package summary</title>
      <p>
A quick summary of the install options and the Fink packages you
should install:
</p>
      <itemtable labelt="Install Type" labeld="Fink packages" >
        <item>
          <itemt>4.2.x built via Fink</itemt>
          <itemd>
            <p>
              <code>xfree86-base</code> and <code>xfree86-rootless</code> (and their <code>-shlibs</code>)</p>
            <p>or <code>xfree86-base-threaded</code> and <code>xfree86-rootless-threaded</code> (and <code>-shlibs</code>)</p>
          </itemd>
        </item>
        <item>
          <itemt>4.3.x built via Fink</itemt>
          <itemd>
            <p>
              <code>xfree86</code> and <code>xfree86-shlibs</code>
            </p>
          </itemd>
        </item>
        <item>
          <itemt>4.x official binaries</itemt>
          <itemd>
            <p>
              <code>system-xfree86</code> only (+splitoffs)</p>
          </itemd>
        </item>
        <item>
          <itemt>4.x built from source, or from the latest CVS source</itemt>
          <itemd>
            <p>
              <code>system-xfree86</code> only (+splitoffs)</p>
          </itemd>
        </item>
<!--obsolete><item>
<itemt>4.2.x base system built via Fink + binary rootless server</itemt>
<itemd>
<p>
<code>xfree86-base</code> only</p>
</itemd>
</item><-->        <item>
          <itemt>4.2.x from Apple</itemt>
          <itemd>
            <p>
              <code>system-xfree86</code> only (+splitoffs)
</p>
          </itemd>
        </item>
        <item>
          <itemt>4.3.x from Apple</itemt>
          <itemd>
            <p>
              <code>system-xfree86</code> only (+splitoffs)
</p>
          </itemd>
        </item>
      </itemtable>
    </section>
  </chapter>
  <chapter filename="run-xfree86" >
    <title>Starting XFree86</title>
    <shorttitle>Starting XFree86</shorttitle>
    <section name="darwin" >
      <title>Darwin</title>
      <p>
On pure Darwin, XFree86 behaves like on any other Unix.
The usual way to start it is via <code>startx</code> from the console;
that starts both the server and some initial clients like the window
manager and a terminal emulator with a shell.
On pure Darwin it is not necessary to specify any parameters, so you
can just type:
</p>
      <codeblock>startx</codeblock>
      <p>
You can customize what is started through several files in your home
directory.
<filename>.xinitrc</filename> controls what clients get started.
<filename>.xserverrc</filename> controls server options and may even
start a different server.
If you're having trouble (as in, you only get a blank screen or
XFree86 drops you right back to the console), you can start
troubleshooting by moving these files out of the way.
When <code>startx</code> doesn't find these files, it will use safe
defaults that should always work.
</p>
      <p>
Alternatively, you can start the server directly with one of the XDMCP
options, like this:
</p>
      <codeblock>X -query remotehost</codeblock>
      <p>
Details about this can be found in the <code>Xserver</code> manual
page.
</p>
      <p>
Finally, there is the option to set up <code>xdm</code>; read its
manual page for details.
</p>
      <p>
Note: If you're running Mac OS X, you can type <code>>console</code>
at the login window and you'll get a text console that is
equivalent to pure Darwin.
You can use all of the start methods outlined above, with the
exception of <code>xdm</code>.
</p>
    </section>
    <section name="macosx-41" >
      <title>Mac OS X + XFree86 4.x.y</title>
      <p>
There are basically two ways to start XFree86 under Mac OS X.
One is double-clicking the XDarwin.app application in your
Applications folder.  This will let you choose between full 
screen and rootless mode in a dialog at startup, just 
double-click the XDarwin.app application. You can disable 
the dialog and set XDarwin to always use the mode of your 
choice in the Preferences dialog.  
</p>
      <p>
Prior to 4.2.0 it would fire up fullscreen mode automatically, 
and there was no way to get rootless mode by double-clicking 
the application.
</p>
      <p>
The other way to start XFree86 under Mac OS X is via
<code>startx</code> from Terminal.app.
If you start the server this way, you must tell it that it should run
in parallel with Quartz.
You do this by passing the <code>-fullscreen</code> option, like this:
</p>
      <codeblock>startx -- -fullscreen</codeblock>
      <p>
That will start up the server in fullscreen mode, 
plus the clients inyour <filename>.xinitrc</filename>.  
</p>
      <p>
NOTE: prior to 4.2, <code>-quartz</code> was used for fullscreen mode.
</p>
      <p>
If the server you have supports rootless operation, 
you can start it in rootless mode with the 
<code>-rootless</code> option:</p>
      <codeblock>startx -- -rootless</codeblock>
      <p>
The <code>-quartz</code> option no longer selects fullscreen mode,
but rather uses the default mode set in the preferences.
</p>
      <p>As of 4.3, if you use <code>startx</code> without arguments, the startup dialog box will come up.</p>
    </section>
    <section name="xinitrc" >
      <title>The .xinitrc File</title>
      <p>
If a file named <filename>.xinitrc</filename> exists in your home
directory, it will be used to start some initial X clients, e.g. the
window manager and some xterms or a desktop environment like GNOME.
The <filename>.xinitrc</filename> file is a shell script that contains
the commands to do this.
It is <em>not</em> necessary to put the usual <code>#!/bin/sh</code>
in the first line and to set the executable bit on the file;
xinit will still know how to run it through a shell.
</p>
      <p>
When there is no <filename>.xinitrc</filename> file in your home
directory, XFree86 will use its default file,
<filename>/private/etc/X11/xinit/xinitrc</filename>.
You can use the default file as a starting point for your own
.xinitrc:
</p>
      <codeblock>cp /private/etc/X11/xinit/xinitrc ~/.xinitrc</codeblock>
      <p>
If you're using Fink, you should source <filename>init.sh</filename>
right at the beginning to make sure the environment is set up correctly.
</p>
      <p>
You can put fairly arbitrary commands in an <filename>.xinitrc</filename>,
but there are some caveats.
First, the shell that interprets the file will by default wait for
every program to finish before it starts the next one.
If you want several programs to run in parallel, you must tell the
shell to put them &quot;in the background&quot; by adding a <code>&amp;</code> at
the end of the line.
</p>
      <p>
Second, <code>xinit</code> waits for the <filename>.xinitrc</filename>
script to finish and interprets that as &quot;the session has ended, I should
kill the X server now, too&quot;.
This means that the last command of your <filename>.xinitrc</filename>
must not be run in the background and it should be a long-living program.
Customarily, the window manager is used for this purpose.
In fact, most window managers assume that <code>xinit</code> is
waiting for them to finish and use this to make the &quot;Log out&quot; entry in
their menus work.
(Note: To save some memory and CPU cycles, you can put an
<code>exec</code> before the last line like in the examples below.)
</p>
      <p>
A simple example that starts up GNOME:
</p>
      <codeblock>source /sw/bin/init.sh
exec gnome-session</codeblock>
      <p>
A more complex example that turns the X11 bell off, starts some clients
and finally executes the Enlightenment window manager:
</p>
      <codeblock>source /sw/bin/init.sh

xset b off

xclock -geometry -0+0 &amp;
xterm &amp;
xterm &amp;

exec enlightenment</codeblock>
    </section>
  </chapter>
  <chapter filename="xtools" >
    <title>Xtools</title>
    <shorttitle>Xtools</shorttitle>
    <section name="install" >
      <title>Installing Xtools</title>
      <p>
Now that's easy for a change.
Get the installer, double-click it, and follow the instructions.
Be sure to select the startup volume when asked.
</p>
      <p>
If you're using Fink, you should install the
<code>system-xtools</code> package after you've installed Xtools.
That package will not install any files, it will just check that the
libraries etc. are there and act as a placeholder in Fink's dependency
system.
</p>
    </section>
    <section name="run" >
      <title>Running Xtools</title>
      <p>
To run Xtools, double-click Xtools.app in your Applications folder.
Like XFree86, Xtools will run the clients you specify in your
<filename>.xinitrc</filename> file.
Xtools additionally allows you to start clients via the menu.
</p>
    </section>
    <section name="opengl" >
      <title>OpenGL Notes</title>
      <p>
Xtools does hardware-accelerated OpenGL in rootless mode and comes
with the libraries to support it.
While the main libGL library is fine, the libGLU and libglut libraries
are only present as static libraries, which is not sufficient for
full binary compatibility with XFree86.
Also, some headers are missing.
Fink doesn't offer a workaround at this time.
Hopefully this will be fixed in Xtools 1.1 once it is released.
</p>
    </section>
  </chapter>
  <chapter filename="other" >
    <title>Other X11 Possibilities</title>
    <shorttitle>Other Stuff</shorttitle>
    <section name="vnc" >
      <title>VNC</title>
      <p>
VNC is a network-capable graphics display system similar in design to
X11.
However, it works at a lower level, making implementation easier.
With the Xvnc server and a Mac OS X display client, it is possible to
run X11 applications with Mac OS X.
Jeff Whitaker's <link url="http://www.cdc.noaa.gov/~jsw/macosx_xvnc/" >Xvnc page</link> has
more information on that.
</p>
    </section>
    <section name="wiredx" >
      <title>WiredX</title>
      <p>
        <link url="http://www.jcraft.com/wiredx/" >WiredX</link> is an X11
server written in Java.
It also supports rootless mode.
An Installer.app package is available at the web site.
</p>
    </section>
    <section name="exodus" >
      <title>eXodus</title>
      <p>
According to the website, <link url="http://www.powerlan-usa.com/exodus/" >eXodus 8</link> by Powerlan
USA runs natively on Mac OS X.
It is unknown what codebase it uses and whether/how it supports local
clients.
Because of this, there is no special support for eXodus in Fink.
If you have more info, please throw it our way.
</p>
    </section>
  </chapter>
  <chapter filename="trouble" >
    <title>Troubleshooting XFree86</title>
    <shorttitle>Troubleshooting</shorttitle>
    <section name="immedate-quit" >
      <title>When I launch XDarwin, it quits
or crashes almost immediately</title>
      <p>
First of all: Don't Panic!
There are lots of things than can go wrong with XFree86, and a good
number of them can cause startup failures.
Further, it is not unusual that XDarwin crashes when it experiences
startup problems.
This section tries to provide a comprehensive list of problems you may
come across.
But first, you need to gather two important pieces of information:
</p>
      <p>
        <em>XDarwin version.</em>
You can find the XDarwin version in the Finder by clicking
<em>once</em> on the XDarwin icon and then selecting &quot;Show Info&quot;
from the menu.
The version is only incremented when a new binary test release is made
by the XonX project, so &quot;1.0a1&quot; may actually be any version between
1.0a1 and 1.0a2.
</p>
      <p>
        <em>Error messages.</em>
These are essential in pinpointing the particular problem you
experience.
How you get the error messages depends on how you started XDarwin.
If you ran <code>startx</code> from a Terminal window, you'll have the
messages right there in that window.
Remember that you can scroll up.
If you started XDarwin by double-clicking the icon, the messages end
up in the system log, which you can access through the Console
application in the Utilities folder.
Be sure to pick the right set of messages, i.e. the last one.
</p>
      <p>
We'll start with a list of the messages you may see:
</p>
      <codeblock>_XSERVTransmkdir: Owner of /tmp/.X11-unix should be set to root</codeblock>
      <codeblock>_IceTransmkdir: Owner of /tmp/.ICE-unix should be set to root</codeblock>
      <p>
Class: Harmless.
X11 creates hidden directories in /tmp to store the socket &quot;files&quot; for
local connections.
For security reasons, X11 prefers if these directories are owned by
root, but since they are world-writable anyway it will still run
without any problems.
(Note: It's quite hard to have these dirs owned by root, as Mac OS X
wipes out /tmp on reboots and XDarwin doesn't run with root privileges
and doesn't need to.)
</p>
      <codeblock>QuartzAudioInit: AddIOProc returned 1852797029</codeblock>
      <codeblock>-[NSCFArray objectAtIndex:]: index (2) beyond bounds (2)</codeblock>
      <codeblock>kCGErrorIllegalArgument : CGSGetDisplayBounds (display 35434400)</codeblock>
      <codeblock>No core keyboard</codeblock>
      <p>
Class: Bogus.
These are follow-up errors that result when the server tries to reset
itself after a previous error.
During that, another copy of the startup banner is printed, followed
by one or more of the above messages because resetting the server
doesn't really work in the affected versions of XDarwin.
So when you see messages like these, scroll up in the Terminal
resp. Console window and look for another set of banner and messages.
This affects all versions up to and including XDarwin 1.0a3; it was
fixed after 1.0a3 was released.
</p>
      <codeblock>cat: /Users/chrisp/.Xauthority: No such file or directory</codeblock>
      <p>
Class: Mostly harmless.
It is unknown where these messages come from and they seem to have no
impact on operations.
You can get rid of them by running <code>touch .Xauthority</code> in
your home directory.
</p>
      <codeblock>Gdk-WARNING **: locale not supported by C library</codeblock>
      <p>
Class: Harmless.
This just means what it says and won't keep the application from
working.
For more information, <xref section="locale" >see below</xref>.
</p>
      <codeblock>Gdk-WARNING **: locale not supported by Xlib, locale set to C
Gdk-WARNING **: can not set locale modifiers</codeblock>
      <p>
Class: Bad, but not fatal.
These messages may appear in addition to the one above.
This indicates that XFree86's locale data files are not present.
It appears that this happens unreproducably when building XFree86 from
source.
Most applications will still work, GNU Emacs is a noteable exception.
</p>
      <codeblock>Unable to open keymapping file USA.keymapping.
Reverting to kernel keymapping.</codeblock>
      <p>
Class: Often fatal.
This can happen with XDarwin 1.0a1, with the &quot;Load from file&quot;
keymapping option enabled.
That version needs a full path when the file to load is set via the
Preferences dialog, but searches automatically when it is passed on
the command line.
The message will usually be followed by the &quot;assert&quot; message shown
below.
To fix this, follow the directions below.
</p>
      <codeblock>Fatal server error:
assert failed on line 454 of darwinKeyboard.c!</codeblock>
      <codeblock>Fatal server error:
Could not get kernel keymapping! Load keymapping from file instead.</codeblock>
      <p>
Class: Fatal.
Changes Apple made in Mac OS X 10.1 broke the code in XFree86 that
reads the keyboard layout from the operating system kernel;
the message above is the result of that.
You must use the &quot;Load from file&quot; keymapping option on Mac OS X 10.1.
The setting is in the XDarwin Preferences dialog.
Be sure that a file is selected (i.e. use the &quot;Pick file&quot; button) -
simply activating the check box may not be sufficient with some
versions of XDarwin.
If you can't get to the Preferences dialog because XDarwin closes
before you get a chance, run it from Terminal with the command
<code>startx -- -quartz -keymap USA.keymapping</code>.
This usually allows XDarwin to start up, and you can then make the
permanent choice in the Preferences dialog.
</p>
      <codeblock>Fatal server error:
Could not find keymapping file .</codeblock>
      <p>Class: Fatal (as it says).  This error is due to the absence of the keymapping files under Panther.  You need to install <code>xfree86-4.3.99-16</code> or later, since these versions don't need the keymapping files.</p>
      <codeblock>Warning: no access to tty (Inappropriate ioctl for device).
Thus no job control in this shell.</codeblock>
      <p>
Class: Mostly harmless.
XDarwin 1.0a2 and later launch an interactive shell behind the scenes
to run your client startup file (.xinitrc).
This was done so that you don't have to add statements to set up PATH
in that file.
Some shells complain that they're not connected to a real terminal,
but that can be ignored since that shell instance is not used for
anything that requires job control or the like.
</p>
      <codeblock>Fatal server error:
failed to connect as window server!</codeblock>
      <p>
Class: Fatal.
This means that the console-mode server (for pure Darwin) got started
while you were logged into Aqua.
Usually this happens when you installed the official XFree86 binary
distribution and left out the Xquartz.tgz tarball.
It can also happen when the symlinks in /usr/X11R6/bin are messed up
or when you issue the command <code>XDarwin</code> in a Terminal
window to start the server (you should use startx instead in that
case, see <xref chapter="run-xfree86" >Starting XFree86</xref>).
</p>
      <p>
In any case, you can run <code>ls -l /usr/X11R6/bin/X*</code> and
check the output.
You should see four relevant entries:
<code>X</code>, a symlink pointing at <code>XDarwinStartup</code>;
<code>XDarwin</code>, an executable file (this is the console
mode server);
<code>XDarwinQuartz</code>, a symlink pointing at
<filename>/Applications/XDarwin.app/Contents/MacOS/XDarwin</filename>;
and <code>XDarwinStartup</code>, a small executable file.
If any of these are missing or pointing at different files, you need
to fix that.
How you do that depends on the method you used to install XFree86.
See the <xref section="rootless" chapter="inst-xfree86" >Roaming
Rootless Servers</xref> section for more hints.
</p>
      <codeblock>The XKEYBOARD keymap compiler (xkbcomp) reports:
> Error:            Can't find file &quot;unknown&quot; for geometry include
>                   Exiting
>                   Abandoning geometry file &quot;(null)&quot;
Errors from xkbcomp are not fatal to the X server</codeblock>
      <p>
Class: Mostly harmless.
As the message says, it is not fatal.
To my knowledge, XDarwin doesn't use the XKB extension at all.
Probably some client program tries to use it anyway...
</p>
      <codeblock>startx: Command not found.</codeblock>
      <p>
Class: Fatal.
This can happen with XDarwin 1.0a2 and 1.0a3 when your shell
initialization files are not set up to add /usr/X11R6/bin to the PATH
variable.
If you use Fink and haven't changed your default shell, adding the
line <code>source /sw/bin/init.csh</code> to <filename>.cshrc</filename>
in your home directory (as recommended by the Fink instructions) should
be sufficient.
</p>
      <codeblock>_XSERVTransSocketUNIXCreateListener: ...SocketCreateListener() failed
_XSERVTransMakeAllCOTSServerListeners: server already running</codeblock>
      <codeblock>Fatal server error:
Cannot establish any listening sockets - Make sure an X server isn't already
running</codeblock>
      <p>
Class: Fatal.
This can happen when you accidentally run several instances of XDarwin
at once,
or maybe after an unclean shutdown (i.e. crash) of XDarwin.
It might also be a file permission problem with the sockets for local
connections.
You can try to clean that up with <code>rm -rf /tmp/.X11-unix</code>.
Restarting the computer also helps in most cases (Mac OS X
automatically cleans up /tmp when it boots, and the network stack is
reset).
</p>
      <codeblock>Xlib: connection to &quot;:0.0&quot; refused by server
Xlib: Client is not authorized to connect to Server</codeblock>
      <p>
Class: Fatal.
The client programs can't connect to the display server (XDarwin)
because they use bogus authentication data.
This can be caused by some VNC installations,
by running XDarwin through sudo,
and probably some other freak accidents.
The usual fix is to delete the .Xauthority file (which stores the
authentication data) in your home directory and re-create an empty
file:
</p>
      <codeblock>cd
rm .Xauthority
touch .Xauthority</codeblock>
<!--
<codeblock>more error messages still to come...</codeblock>
-->      <p>
Another common cause for XFree86 startup failures is an incorrect
<filename>.xinitrc</filename> file.
What happens is that the <filename>.xinitrc</filename> is run and for some
reason terminates almost immediately.
<code>xinit</code> interprets this as &quot;the user's session has ended&quot;
and kills XDarwin.
See the <xref section="xinitrc" chapter="run-xfree86" >.xinitrc
section</xref> for more details.
Remember to set up the PATH and to have one long-lived program that is
not started in the background.
It is a good idea to add <code>exec xterm</code> as a fallback when
your window manager or similar can't be found.
</p>
<!--
<p>
Some common problems that lead to this:
</p>
<ul>

<li><p>
All apps are started in the background.
Instead the last one must be started if the foreground (no
<code>&amp;</code> at the end of the line), or better with
<code>exec</code>.
</p></li>

<li><p>
The app that should run in the foreground can't be found.
This can happen when you give just the name without the path
(e.g. <code>xterm</code>), but forget to set the shell's search path
(environment variable PATH).
Neither /usr/X11R6/bin nor /sw/bin are in the default path.
If you use Fink, just add an <code>source /sw/bin/init.sh</code> to
the start of the <code>.xinitrc</code>.
To set the path manually, use this piece:
</p>
<codeblock>PATH=$PATH:/usr/X11R6/bin
export PATH</codeblock>
</li>

<li><p>
The app that should run in the foreground doesn't start or quits
immediately for some other reason.
There are many possibilities here, like missing libraries or missing
configuration files.
WindowMaker for instance requires that you run
<code>wmaker.inst</code> once before using it.
A good troubleshooting tactic in this situation is to replace the
forground app with <code>xterm</code> and launch it manually from the
xterm that comes up.
This way you can see diagnostic messages.
</p></li>

</ul>
<p>
Of course, there's always the last reason: a bug in XDarwin.
But most of the time, it really boils down to one of the above, even
when XDarwin crashes after some seconds.
</p>
-->    </section>
    <section name="black" >
      <title>Black icons in the GNOME panel or in the
menu of a GNOME application</title>
      <p>
A common problem is that icons or other images are displayed as black
rectangles or black outlines.
Ultimately, this is caused by limitations in the operating system
kernel.
The problem has been reported to Apple, but so far they seem unwilling
to fix it; see the filed <link url="http://www.opensource.apple.com/bugs/X/Kernel/2691632.html" >Darwin
bug report</link> for details.
</p>
      <p>
The current situation is that the MIT-SHM extension of the X11
protocol is practically unusable on Darwin and Mac OS X.
There are two ways to turn the protocol extension off: in the server
or in the clients.
The XFree86 servers installed by Fink (i.e. the xfree86-server and
xfree86-rootless packages) have it turned off.
The GIMP and the GNOME panel have been innoculated as well.
If you experience black icons in another application, start that
application with the <code>--no-xshm</code> command line option.
</p>
    </section>
    <section name="keyboard" >
      <title>The keyboard doesn't work in XFree86</title>
      <p>
This is a known problem that so far seems to affect only portables
(PowerBook, iBook).
To work around this, the &quot;Load from file&quot; keymapping option was
implemented.
Nowadays it has become the default because the old method (reading the
mapping from the kernel) stopped working with Mac OS X 10.1.
If you haven't enabled the option already, you can do so in the
XDarwin preferences dialog.
Check the &quot;Load from file&quot; checkbox and select the keymapping file to
load.
After restarting XDarwin, your keyboard should mostly work (see
below).
</p>
      <p>
If you're starting XFree86 from the command line, you can pass the
name of the keymapping file to load as an option, as in:
</p>
      <codeblock>startx -- -quartz -keymap USA.keymapping</codeblock>
    </section>
    <section name="delete-key" >
      <title>The Backspace key doesn't work</title>
      <p>
This can happen when you use the &quot;Load keymapping from file&quot; option
described above.
The mapping files describe the backspace key as &quot;Delete&quot;, not as
&quot;Backspace&quot;.
You can correct that by putting the following line in your .xinitrc
file:
</p>
      <codeblock>xmodmap -e &quot;keycode 59 = BackSpace&quot;</codeblock>
      <p>
If I remember correctly, XDarwin 1.0a2 and later have code that
correctly maps the Backspace key automatically.
</p>
    </section>
    <section name="locale" >
      <title>&quot;Warning: locale not supported by C library&quot;</title>
      <p>
These messages are quite common, but harmless.
It just means what it says - internationalization is not supported
through the standard C library, the program will use the default
English messages, date formats, and so on.
There are several ways to deal with this:
</p>
      <ul>
        <li>
          <p>
Just ignore the messages.
</p>
        </li>
        <li>
          <p>
Get rid of the messages by unsetting the environment variable LANG.
Note that this will also turn internationalization off in programs
that actually support it (via gettext/libintl).
Example for .xinitrc:
</p>
          <codeblock>unset LANG</codeblock>
          <p>
Example for .cshrc:
</p>
          <codeblock>unsetenv LANG</codeblock>
        </li>
        <li>
          <p>
(10.1 only) Use the <code>libxpg4</code> Fink package.
It builds a small library that contains working locale functions and
arranges that it is loaded before the system libraries (using the
DYLD_INSERT_LIBRARIES environment variable).
You may have to set the LANG environment variable to a fully qualified
value, e.g. <code>de_DE.ISO_8859-1</code> instead of <code>de</code>
or <code>de_DE</code>.
</p>
        </li>
        <li>
          <p>
Ask Apple to include proper locale support in a future version of Mac
OS X.
</p>
        </li>
      </ul>
    </section>
  </chapter>
  <chapter filename="tips" >
    <title>Usage Tips</title>
    <shorttitle>Tips</shorttitle>
    <section name="terminal-app" >
      <title>Launching X11 apps from Terminal.app</title>
      <p>
To launch X11 applications from a Terminal.app window, you must set
the environment variable &quot;DISPLAY&quot;.
This variable tells the applications where to find the X11 window
server.
In the default setup - XDarwin runs on the same machine, your shell is
tcsh - you can set the variable as follows:
</p>
      <codeblock>setenv DISPLAY :0.0</codeblock>
      <p>
A nice setup is to have XDarwin.app started when you log in (settable
in the Login panel of the System Preferences) and add the following to
your .cshrc:
</p>
      <codeblock>if (! $?DISPLAY) then
  setenv DISPLAY :0.0
endif</codeblock>
      <p>
This sets DISPLAY automatically in every shell.
It doesn't override the current value when DISPLAY is already set,
though.
This way you can still run X11 applications remotely or through ssh
with X11 tunneling.
</p>
    </section>
    <section name="open" >
      <title>Launching Aqua apps from an xterm</title>
      <p>
One way to launch Aqua applications from an xterm (or any other shell,
actually) is the <code>open</code> command.
Some examples:
</p>
      <codeblock>open /Applications/TextEdit.app
open SomeDocument.rtf
open -a /Applications/TextEdit.app index.html</codeblock>
      <p>
The second example opens the document in the application that is
associated with it, the third example explicitly gives an application
to use.
</p>
    </section>
    <section name="copy-n-paste" >
      <title>Copy and Paste</title>
      <p>
Copy and Paste generally works between the Aqua and X11 environments.
There are still some bugs.
Emacs is reported to be picky about the current selection.
Copy and paste from Classic to X11 doesn't work.
</p>
      <p>
Anyway, the trick is to use the respective methods of the environment
you're in.
To transfer text from Aqua to X11, use Cmd-C in Aqua, then bring the
destination window to the front and use the &quot;middle mouse button&quot;, i.e. Option-click
on a single-button mouse (this can be configured 
under XDarwin's Preferences), to paste.
To transfer text from X11 to Aqua, simply select the text with the
mouse in X11, then use Cmd-V in Aqua to paste it.
</p>
      <p>
The X11 system actually has several separate clipboards (called &quot;cut
buffers&quot; in X11 speak), and some applications have weird views which
one should be used.
In particular, pasting into GNU Emacs or XEmacs sometimes doesn't work
because of this.
The program <code>autocutsel</code> can help here; it automatically
synchronizes the two main cut buffers.
To run it, install the autocutsel Fink package and add the following
line to your .xinitrc:
</p>
      <codeblock>autocutsel &amp;</codeblock>
      <p>
(Make sure it's <em>before</em> the line that exec's the window
manager and never returns! Don't just add it at the end, it won't
be executed.)
</p>
      <p>If you are using Apple's X11, then you can use Command-C or Edit->Copy, as 
usual for Mac apps, to copy text to the clipboard.  However, pasting 
from the clipboard to Apple X11 via Command-V doesn't work yet.</p>
    </section>
  </chapter>
</document>
