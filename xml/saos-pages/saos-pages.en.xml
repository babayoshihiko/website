<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document SYSTEM "../finkdoc.dtd">
<document filename="index" lang="en">
  <title>Sao's Fink and X11 Pages</title>
  <shorttitle>Sao's Pages</shorttitle>
  <cvsid>$Id: saos-pages.en.xml,v 1.5 2004/07/23 10:43:25 sao_x Exp $</cvsid>
  <preface>
    <p>Welcome to Sao's Fink and X11 pages. These have been adapted from <link url="http://homepage.mac.com/sao1/fink/">Sao's place</link> with his permission, as a service to the Fink community</p>
    <p>These pages are intended to supplement the other Fink documentation, and are written with the novice user in mind.</p>
  </preface>
  <chapter filename="essential">
    <title>      /
          Essential Reading /</title>
    <shorttitle>      /
          Essential Reading /</shorttitle>
    <preface>
      <p>
                  You heard about Open Source, XFree86, Fink, XDarwin, Apple's X11 and
            you are a Unix beginner. 
                  Now you decided to give it a try and play with all these new things.
                  Many of them you may not understand...and you wish that the information
            available was written simply and clearly.</p>
      <p>
                  What I learned is that it's not an easy subject, and that if you have
            no prior Unix knowledge, it's even worse. 
                  The truth is, even these pages, written with beginners in mind, will
            still require a great effort to gain understanding, as it is not an easy
            process.</p>
      <p/>
    </preface>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">X11</link>
      </p>
      <p>
        <link url="#top2">XFree86</link>
      </p>
      <p>
        <link url="#top3">MacOS
            X</link>
      </p>
      <p>
        <link url="#top4">Darwin</link>
      </p>
      <p>
        <link url="#top5">MacOS
            X and X11</link>
      </p>
      <p>
        <link url="#top6">XDarwin</link>
      </p>
      <p>
        <link url="#top7">Apple's
            X11 1.0 (Panther)</link>
      </p>
      <p>
        <link url="#top8">Installing Apple's X11 and
            Fink in Panther</link>
      </p>
      <p>
        <link url="#top9">Previous Fink installation
            and Apple's X11 1.0 in 10.3</link>
      </p>
      <p>
        <link url="#top10">About Fink</link>
      </p>
      <p>
        <link url="#top11">About
            FinkCommander</link>
      </p>
      <p>
        <link url="#top12">Installing XFree86</link>
      </p>
      <p>
        <link url="#top13">Setting
            your PATH</link>
      </p>
      <p>
        <link url="#top14">Window Manager</link>
      </p>
      <p>
        <link url="#top15">The
            .xinitrc file</link>
      </p>
      <p>
        <link url="#top16">Fink is a volunteer effort</link>
      </p>
      <p>
        <link url="#top17">Configuring
            Fink to use unstable</link>
      </p>
      <p>
        <link url="#top18">Dedication</link>
      </p>
    </section>
    <section>
      <title>X11</title>
      <p>
            X11 is a graphics display system with a network-transparent client-server
            architecture.</p>
      <p>
            It allows applications to draw pixels, lines, text, images, etc. on your
            screen. 
            X11 also comes with additional libraries that let applications easily
            draw user interfaces, i.e. buttons, text fields, and so on. 
            X11 is the de facto standard graphics system in the Unix world.</p>
    </section>
    <section>
      <title>XFree86</title>
      <p>
            XFree86  is an Open-Source implementation of X11. It's available free
            of charge and redistributable.</p>
      <p>
            It runs on UNIX(R) and UNIX-like operating systems such as Linux, all
            of the BSD variants, Sun Solaris x86, Mac OS X (via Darwin), as well
            as other platforms like OS/2 and Cygwin.</p>
      <p>
            XFree86 is:</p>
      <p>
        <em>platform-independent
            network-transparent
            extensible</em>
      </p>
      <p>
            It provides a client/server interface between display hardware (the mouse,
            keyboard, and video displays) and the desktop environment 
            while at the same time providing both the windowing infrastructure and
            a standardized application interface (API).</p>
      <p>
            It supports freedom of the user desktop, meaning that you can customise
            and personalise your desktops 
            with the application of your choice, whether it be KDE, GNOME, Enlightenment,
            Blackbox, AfterStep, fvwm or twm.</p>
    </section>
    <section>
      <title>MacOS
            X</title>
      <p>
            Is a UNIX-based operating system produced by Apple Computer, and offers
            a unique combination of technical elements. 
            The graphics engine in MacOS X is called Quartz and the look and feel
            is called Aqua.</p>
      <p>
            The latest release from Apple, MacOS X 10.3 (Panther), integrates features
            from state-of-the-art FreeBSD 5 into Darwin, 
            the Open Source base of Mac OS X, which means we can use key applications
            on top of a state-of-the art BSD UNIX implementation.</p>
    </section>
    <section>
      <title>Darwin</title>
      <p>
            Darwin is the Open Source release of the Mac OS X operating system. Is
            available free of charge and with full source code. 
            It does not contain Quartz, Aqua, or any other related technology.</p>
    </section>
    <section>
      <title>MacOS
            X and X11 (XFree86) work together</title>
      <p>
            In X11, the top window, called the root window, is the size of the screen
            and contains all other windows and also the desktop background. 
            As a stand alone graphical environment it has full control over the screen.</p>
      <p>
            In MacOS X it is Quartz (the graphics engine) who has full control of
            the screen.</p>
      <p>
        <em>There are 2 ways for making these
            environments work together:</em>
      </p>
      <p>1.Fullscreen (rooted
            mode)</p>
      <p>
            The two environments take turns and each of them take full control of
            the screen. We see only one at a time, but it's very easy to switch between
            them.</p>
      <p>2.Rootless mode</p>
      <p>
            Mixing the two environments. Letting Quartz take care of the desktop
            background, eliminating the X11 top window or root window. 
            That's why this mode is called 'rootless'. This way eliminates the need
            to switch between two screens.</p>
    </section>
    <section>
      <title>XDarwin</title>
      <p>
            XDarwin provides the mechanism for switching which graphics system controls
            the screen. 
            XDarwin is the name of the X server which runs on systems using Darwin
            or Mac OS X.</p>
      <p>
            Double clicking on the XDarwin.app will show you a dialog window where
            you can choose between 'fullscreen' and 'rootless' mode.</p>
      <p> 
            In XDarwin Preferences, you can set XDarwin to always use the mode of
            your choice and disable the startup dialog.</p>
      <p>
            Or to start from the terminal.app you can type either:</p>
      <codeblock>startx -- -fullscreen</codeblock>
      <p>
                  or</p>
      <codeblock>startx -- -rootless</codeblock>
      <p>
            Through rootless mode, it allows Xclients to display windows on the Aqua
            desktop.</p>
      <p>
            In fullscreen mode now we can choose different settings than Aqua for
            depth, size and screen refresh rate. </p>
      <p>
            The latest release added Xinerama support and the keymap setup is improved
            for international keyboards.</p>
    </section>
    <section>
      <title>Apple's
            X11 1.0 (Panther)</title>
      <p>
            Apple released with Panther a custom &quot;X11&quot; implementation based on XFree86-4.3
            which includes Quartz rendering and accelerated OpenGL. 
            Apple's X11 for Mac OS X is compatible, fast and fully integrated with
            Mac OS X. You can activate X11 applications directly from the Dock, double-click
            applications
            directly in the Finder.
            It supports rootless and full screen mode, and includes the quartz-wm,
            libraries, basic utilities such as xterm and supports ssh tunnelling.</p>
      <p>For more info:</p>
      <p>
        <link url="http://www.apple.com/macosx/features/x11/">Apple's
            X11 Page</link>
      </p>
      <p>
        <link url="http://www.lists.apple.com/mailman/listinfo/x11-users">X11
            for Mac OS X discussion list (x11-users)</link>
      </p>
      <p>
        <link url="http://developer.apple.com/qa/qa2001/qa1232.html">The
            F.A.Q. for X11 for Mac OS X</link>
      </p>
      <p>
        <link url="http://www.apple.com/macosx/x11/download/">Get
            X11 for Mac OS X</link>
      </p>
      <p>
        <link url="http://forums.macosxhints.com/showthread.php?s=&amp;threadid=8704">forums.macosxhints.com
            X11 FAQ</link>
      </p>
    </section>
    <section>
      <title>Installing
            Apple's X11 and Fink in Panther</title>
      <p>
            Install first Apple's X11 1.0 from the Panther CD, XCode and the X11SDK.pkg
            from the Xcode Tools CD. You can also download X11 from:</p>
      <p>
        <link url="http://www.apple.com/macosx/features/x11/download/">Apple
            X11 web page.</link>
      </p>
      <p>
            -Download and install </p>
      <p>
        <link url="http://fink.sourceforge.net/download/index.php">Fink
            &quot;Binary&quot; release.</link>
      </p>
      <p> 
            And follow the indications on the Fink download page.</p>
      <p>
            or</p>
      <p>
            -Download and install </p>
      <p>
        <link url="http://fink.sourceforge.net/download/srcdist.php">Fink
            &quot;Source&quot; release.</link>
      </p>
      <p> 
            Installation and usage instructions are inside the distribution tarball.</p>
      <p>
            Since Fink version 0.15.0 or higher, you do not need to install system-xfree86
            anymore. 
            Fink is capable of automatically determining your system-xfree86 version
            if you don't already have any fink x11 packages installed.</p>
    </section>
    <section>
      <title>Previous
            Fink installation and Apple's X11 1.0 in 10.3</title>
      <p>
            If you installed Panther with the 'archive and install' method, and then
            installed Apple's X11 1.0 and the X11 SDK, 
            be sure to install XCode from the XCode disk before upgrading Fink.</p>
      <p>
            Then, running &quot;fink selfupdate&quot; should perform the upgrade for you. 
            The latest version of the fink package manager will automatically detect
            which version of OS X and which version of gcc you have installed, 
            and will adjust itself accordingly.</p>
      <p>
            If you currently have an old system-xfree86 package of any kind installed,
            please run the following commands:</p>
      <codeblock>sudo dpkg -r --force-all system-xfree86 system-xfree86-42 system-xfree86-43;
fink selfupdate; fink index
(The command all in one line)</codeblock>
    </section>
    <section>
      <title>About
            Fink</title>
      <p>
            Fink is free, fast and reliable. It offers the easiest and most painless
            install of Xwindows on macOS X. 
            Fink currently lists in its database 3247 packages in 22 sections you
            could install, including the unstable tree and the latest packages from
            CVS (as 18-01-04). 
            And, thanks to the hard work of the Fink developers, the fink packages
            seem to get updated fairly quickly to follow the updates in the basic
            unix source. 
            If you feel you don't need fink anymore, it's extremely easy to uninstall,
            as it keeps all the things at one place. 
            Fink has support 24/7 through the fink-mailing lists. Give it a try and
            start installing at your heart's content. 
            You can't go wrong with it, and you will learn things.</p>
      <p>
            Fink developers are porting Open Source Unix software so it can run in
            MacOS X. 
            To install the software Fink uses package management tools ported over
            from Linux: </p>
      <p>
        <em>apt-get, dselect,</em>
      </p>
      <p>
            and it's own tool named ...</p>
      <p>
        <em>'fink'</em>
      </p>
      <p>Using
            Fink to install packages</p>
      <p>
            You can choose between two installing models:</p>
      <p>
        <em>1-Pre-compiled binary packages</em>
      </p>
      <p>
        <em>2-The source distribution</em>
      </p>
      <p>1-Pre-compiled
            binary packages</p>
      <p>
            When you install a binary package what you get is a:</p>
      <p>
        <em>ready to run program</em>
      </p>
      <p>
            Saving you the time for compiling.</p>
      <p>
            The Tools used to install pre-compiled binary packages are:</p>
      <codeblock>apt-get</codeblock>
      <p>
            and</p>
      <codeblock>dselect</codeblock>
      <p>
            Apt-get or dselect only know about packages available as precompiled
            binary packages.</p>
      <p>
            The binary distribution of Fink uses the .deb package format. 
            The packages are tailor-made for Mac OS X / Darwin and don't use the
            Debian source package format.</p>
      <p>2-The source distribution</p>
      <p>
            To install packages from source with Fink, you need the Apple Developer
            Tools (Xcode) installed. 
            Install Xcode from the Xcode Tools CD that came with Panther or after
            you register for free, you can get them from the:</p>
      <p>
        <link url="http://connect.apple.com/">Apple
            Developer Connection</link>
      </p>
      <p>
            If you install from source you have the advantage to usually get newer
            software. 
            You get to test the latest packages, and as Fink is a volunteer effort,
            you can then provide feedback through the fink mailing lists and report
            both success and failure to the package maintainer.</p>
      <p>
            When you buy commercial software you don't get to see the source code
            (companies treat it as a trade secret). 
            In Open Source software, the source code is open for anyone to see and
            modify.</p>
      <p>
            With Fink, you can install packages from source, using its own tool named
            'fink'.</p>
      <p>
            So, if you run in terminal:</p>
      <codeblock>fink install 'packagename'</codeblock>
      <p>
            Fink will figure out what dependencies are involved, ask if you would
            like to install them too, then after you say 'Yes' it will download everything.</p>
      <p>
            For each package, it will unpack it, apply any needed patches, auto-configure,
            compile, test, and install into a .deb file which gets installed for
            you by dpkg.</p>
      <p>
            Compared to binary installs it's a slow process -- but it can be much
            more reliable in many cases.</p>
    </section>
    <section>
      <title>About
            FinkCommander</title>
      <p>
            For those who want to stay away from the CLI, there is an excellent piece
            of software called FinkCommander, made by Steven Burr, that provides
            a GUI front end to Fink.</p>
      <p>
        <link url="http://finkcommander.sourceforge.net/">FinkCommander
            web site</link>
      </p>
      <p>
            &quot;FinkCommander is a graphical user interface for the Fink software packaging
            system for Mac OS X. 
            It provides an intuitive front-end to the Fink command-line tools for
            downloading and installing Unix software&quot;.</p>
    </section>
    <section>
      <title>Installing
            XFree86</title>
      <p>
                  XFree86 is a free X11 implementation that supports Darwin and Mac
            OS X. Fink will let you install XFree86 in any way you like. 
                  In Panther you can install it from the official Xfree86 Project, or
            install Apple's X11 implementation, based on Xfree86-4.3, 
                  or use Fink to install it's own Xfree86 packages.</p>
      <p>
        <em>-Fink own XFree86 packages:</em>
      </p>
      <p>
            If you have Panther (10.3) installed, install the 'xfree86' package version
            -4.3.99.15-1 or later (currently in 10.3/unstable). 
            This is a prerelease for XFree86-4.4.</p>
      <p>
            If you are still using Jaguar (10.2), please check the latest Fink versions
            of the 'xfree86-base' and 'xfree86-rootless' packages. 
            They install the XFree86 libraries, utilities, clients and data. 
            This will let you run X11 applications and desktop environments.</p>
      <p>
        <em>-XFree86 Project:</em>
      </p>
      <p>
            open-source implementation of the X Window System. 
            The upcoming 4.4.0 release is expected to be the basis for future releases
            of Apple's X11. 
            XFree86 4.4.0 provides identical performance to Apple's X11 on Panther
            and is fully compatible with quartz-wm.</p>
      <p>
        <link url="ftp://ftp.xfree86.org/pub/XFree86/snapshots/4.3.99.902/binaries/Darwin-ppc-7.x">Prebuilt
            binaries for Panther</link>
      </p>
      <p>
            Download all *.tgz files, Xinstall.sh, and extract. Then run &quot;sudo sh
            Xinstall.sh&quot; from the directory you downloaded to. 
            This will install everything for you.</p>
      <p>
        <em>-The Xonx Project:</em>
      </p>
      <p>
            &quot;The XonX project is used by developers of XFree86 for Darwin and Mac
            OS X to share and distribute code and information. 
            All of the code developed is committed to the XFree86 Project's CVS server&quot;.</p>
      <p>
        <link url="http://sourceforge.net/projects/xonx">A
            GUI installer of XFree86 4.3.0</link>
      </p>
      <p>
            is available ONLY for Mac OS X 10.2.x (Jaguar). 
            The binaries installed are identical to what is available directly from
            the XFree86 Project. 
            However, this release is packaged in a Mac OS X friendly installer.</p>
      <p>
        <em>-Apple's X11 implementation:</em>
      </p>
      <p>
            If you have Panther (10.3) installed, you can install the release version
            of Apple's X11 based on Xfree86-4.3 
            which is available as optional install from the Panther CD. Under fink-0.16.2,
            you will also need to install the &quot;X11SDK&quot; package. 
            Then Fink will create a system-xfree86 virtual package. If you're 'only'
            installing binary packages with fink-0.17.0 or later installed, 
            system-xfree86 no longer requires the &quot;X11SDK&quot;.</p>
    </section>
    <section>
      <title>Setting
            your PATH environment variable</title>
      <p>
            To use the software you installed with Fink, you must set your PATH environment
            variable. 
            You can do this via the command:</p>
      <codeblock>open /sw/bin/pathsetup.command</codeblock>
      <p>
            If that doesn't work, you can configure it manually depending on the
            shell you are using:</p>
      <p>
            -If you use </p>
      <p>bash</p>
      <p> (the default shell in Panther), or other variant
            of the Bourne style shell, 
            like sh or zsh, add the following lines to your .profile or .bash_profile
            in your home directory:</p>
      <codeblock>source /sw/bin/init.sh</codeblock>
      <p>
            If you don't have a .profile file, you can create it by running from
            Terminal.app the following commands:</p>
      <codeblock>cd</codeblock>
      <p> (to go to your
            home directory)</p>
      <codeblock>pico .profile</codeblock>
      <p> (to open the
            text editor Pico, and create a file named .profile)</p>
      <p>
            When the text editor open, type:</p>
      <codeblock>source /sw/bin/init.sh</codeblock>
      <p>
            at the end of the line press Return once.</p>
      <p>
            Then press Control-O, Return, and control-X</p>
      <p>
            to save the file and return to the prompt.</p>
      <p>
            Now you should type rehash or close-open the terminal window.</p>
      <p>
            ------</p>
      <p>
            -If you use </p>
      <p>tcsh</p>
      <p> (the default shell in Jaguar), add the following
            line to the .cshrc file in your home directory:</p>
      <codeblock>source /sw/bin/init.csh</codeblock>
      <p>
            If you don't have a .cshrc file, you can create it by running from Terminal.app
            the following commands:</p>
      <codeblock>cd</codeblock>
      <p> (to go to your
            home directory)</p>
      <codeblock>pico .cshrc</codeblock>
      <p> (to open the
            text editor Pico, and create a file named .cshrc)</p>
      <p>
            When the text editor open, type:</p>
      <codeblock>source /sw/bin/init.csh</codeblock>
      <p>
            at the end of the line press Return once.</p>
      <p>
            Then press Control-O, Return, and control-X</p>
      <p>
            to save the file and return to the prompt.</p>
      <p>
            Now you should type rehash or close-open the terminal window.</p>
      <p>Attention:</p>
      <p>
            If you use tcsh and happen to have a .tcshrc file in your home directory,
            this file will be read instead of your .cshrc file. 
            In this case, you can write 'source /sw/bin/init.csh' in your .tcshrc
            file instead, or add 'source ~/.cshrc' 
            at the end of your .tcshrc file.</p>
      <p>
            The scripts also add /usr/X11R6/bin and /usr/X11R6/man to your path so
            you can use X11 when it is installed.</p>
    </section>
    <section>
      <title>Window
            Manager</title>
      <p>
            To work in X11 we need to install a window manager.</p>
      <p> 
            These are the programs that provide the window frames (title bar, close
            button, etc. also called &quot;decorations&quot;). 
            Most window managers provide additional functionality, like pop up menus
            in the root window, docks or launch buttons and many of them 
            allow you to customize their appearance with themes.</p>
      <p>
            Apple's X11 includes 'quartz-wm' it's own window manager. But, it is
            possible to run another window manager instead of 'quartz-wm' with Apple's
            X11.</p>
      <p>
            Refer to the </p>
      <p>
        <link url="wmanagers.html">Window Mgrs page</link>
      </p>
      <p> to see which window managers
            are available for installation with Fink.</p>
    </section>
    <section>
      <title>The
            .xinitrc file</title>
      <p>
            The .xinitrc file is a shell script that runs when you start the X11
            system (or when it automatically starts for you).</p>
      <p>
        <em>This file contains the commands to
            define which applications are started when your X11 system boots up.</em>
      </p>
      <p>
            By default, when no ~/.xinitrc file is found, the Apple's X11.app for
            example, starts the X server, launch the quartz-wm and open one naked
            unconfigured xterm window. 
            But if you have a ~/.xinitrc file, Apple's X11.app start the X server
            and the applications you specified in your ~/.xinitrc file, and then
            stay in the background, 
            giving you a better control of the hundreds of possible startup parameters.</p>
      <p>
            The ~/.xinitrc file contains, for example, the commands to start the
            window manager, some xterms or a desktop environment (like GNOME or KDE),
            along with various command line options to control their behavior or
            appearance, such as setting sizes, background colors, fonts, etc.</p>
      <p>
            If you want to run a bunch of apps at launch, add them to your .xinitrc
            file and add 'exec quartz-wm' if you want them to run with Apple's window
            manager. 
            If you want Apple's X11 to run with another window manager, add 'exec
            wmanagername' to your .xinitrc file.</p>
      <p>
            What is typically done is to start applications in the background and
            then finally start the window manager in the foreground. 
            In this way, when exit from the window manager, the .xinitrc script exits
            and the X11 system goes away.</p>
      <p>
            When the .xinitrc script exits, the X11 system will close down and allow
            you to logout.</p>
      <p>
            You will find XFree86 xinitrc default file in:</p>
      <codeblock>/private/etc/X11/xinit/xinitrc</codeblock>
      <p>
            To use it as a starting point for your own .xinitrc file, copy the file
            to your home directory:</p>
      <codeblock>cp /private/etc/X11/xinit/xinitrc ~/.xinitrc</codeblock>
      <p>
            Then, you can edit it with your own choices.</p>
      <p>
        <em>Some simple .xinitrc examples:</em>
      </p>
      <codeblock>To start 'autocutsel' and Windowmaker-wm:</codeblock>
      <codeblock>source /sw/bin/init.sh
autocutsel &amp;
exec wmaker</codeblock>
      <codeblock>To start an xterm and Apple's quartz-wm:</codeblock>
      <codeblock>source /sw/bin/init.sh
xterm -geometry 75x34+687+40 &amp;
exec quartz-wm</codeblock>
      <codeblock>To start Gnome:</codeblock>
      <codeblock>source /sw/bin/init.sh
exec gnome-session</codeblock>
      <codeblock>To start KDE and the KDE window manager:</codeblock>
      <codeblock>source /sw/bin/init.sh
export KDEWM=kwin
/sw/bin/startkde &gt;/tmp/kde.log 2&gt;&amp;1</codeblock>
      <codeblock>To start blackbox-wm and other apps. at launch:</codeblock>
      <codeblock>source /sw/bin/init.sh
quartz-wm --only-proxy &amp;
xterm -geometry 75x34+687+40 &amp;
multi-gnome-terminal --geometry 75x34+687+40 &amp;
wmCalClock &amp;
wmMoonClock &amp;
wmSpaceWeather &amp;
gkrellm -w &amp;
exec blackbox</codeblock>
      <p>
                If you start quartz-wm with the option </p>
      <codeblock>--only-proxy</codeblock>
      <p> like in the above ~/.xinitrc file, Apple's
            X11 will let you use another window manager, 
                but the 'cut and paste' is handled by quartz-wm.</p>
    </section>
    <section>
      <title>Fink
            is a volunteer effort</title>
      <p>
            There are packages in the fink stable and unstable sections. 
            The former is called &quot;unstable&quot; because these packages are not well-tested.</p>
      <p>
            As I mentioned before, apt-get or dselect only know about packages available
            as precompiled binary packages. 
            Many packages are not available in precompiled form for a variety of
            reasons, 
            one of them being that a package must be in the &quot;stable&quot; section of the
            latest point release to be considered.</p>
      <p>
            One of the ways we all can help is by testing the packages from unstable.
            If nobody tested them, 
            it will take longer for them to be upgraded to the stable section.</p>
      <p>In order to 'test' a package you need:</p>
      <p>
        <em>The
            Developer Tools installed 
            To compile it from source using 'fink install packagename' 
            The latest descriptions from CVS 
            To configure Fink to use unstable</em>
      </p>
      <p>
            Right now there are about 1412 packages (18-01-04) that need testing
            and feedback.</p>
      <p>
        <link url="http://fink.sourceforge.net/pdb/testing.php">List
            of Packages that need testing</link>
      </p>
    </section>
    <section>
      <title>To
            configure Fink to use unstable</title>
      <p>
            If you only want one or two specific packages:</p>
      <p>
            You need to switch over to CVS updating, because rsync only updates the
            trees that are active in your fink.conf. 
            If not present, add 'local/main' to the Trees: line in /sw/etc/fink.conf,
            then run 'fink selfupdate' to download the package description files.</p>
      <p>
            And copy the .info files and their associated .patch files from:</p>
      <codeblock>/sw/fink/dists/unstable/main/finkinfo</codeblock>
      <p> 
            to</p>
      <codeblock>/sw/fink/dists/local/main/finkinfo</codeblock>
      <p>
            Your package may depend on other packages which are also only in 'unstable'
            and you will have to move their .info and .patch files as well. 
            After you move all of the files, then, run 'fink index'.</p>
      <p>If you want Fink to use
            all of unstable:</p>
      <p>
            edit</p>
      <codeblock>/sw/etc/fink.conf</codeblock>
      <p>
            and add:</p>
      <p>
        <em>unstable/main unstable/crypto</em>
      </p>
      <p>
            to the beginning of the Trees: line.</p>
      <p>
            And then run the command:</p>
      <codeblock>fink index</codeblock>
      <p>
            I chose to configure fink to use all of unstable.</p>
      <p>
            The Trees:line in my fink.conf file looks like this:</p>
      <codeblock>Trees: local/main unstable/main unstable/crypto stable/main stable/crypto local/bootstrap</codeblock>
    </section>
    <section>
      <title>Dedication</title>
      <p>
                 It all started with MacOS X Public Beta. Suddenly, X became part of
            my daily vocabulary. MacOS X opened the world of Unix, and as an old
            Macintosh user who knew nothing about it, 
                 I started a journey of discovery, searching for tutorials throughout
            the Web.</p>
      <p>
                 Then, I found the &quot;MacOS X Hints&quot; Web site. 
                 The work done there by Rob Griffiths inspired and encouraged me. 
                 Through his excellent &quot;XFree86 Installation Guide&quot; I was introduced
            to the concept of &quot;open source&quot; and &quot;Fink&quot;. 
                 In the end, I got so much from Rob's work and ideas that I felt I had
            to give something back -- thus, the making of this site.</p>
      <p>
            Talking about inspiration, I came to realize how grateful I am to a bunch
            of people...&quot;the Fink developers&quot;. 
            In this time and age, where greed rules, I'm amazed at the great work
            they do. 
            They work for free, dedicating their time and effort to the open source
            community. 
            Time after time, I have gone to them with problems, and they have always
            patiently helped me find solutions. 
            I have now installed more than 1,000 packages, something I could never
            have done without Fink. So, my gratitude and thanks go to...</p>
      <p>               ...the Fink developers and Rob Griffiths.</p>
    </section>
  </chapter>
  <chapter filename="finkandpanther">
    <title>      /
          Fink and Panther /</title>
    <shorttitle>      /
          Fink and Panther /</shorttitle>
    <preface>
      <p/>
    </preface>
    <section>
      <title>
            - Fink and Panther FAQ - </title>
    </section>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">fink
            selfupdate-rsync</link>
      </p>
      <p>
        <link url="#top2">How do I get Fink to realize
            I'm running Panther?</link>
      </p>
      <p>
        <link url="#top3">Fink xfree86 4.3.0-14 and
            Panther</link>
      </p>
      <p>
        <link url="#top4">Upgrading your previous
            Fink installation</link>
      </p>
      <p>
        <link url="#top5">Which packages have been
            updated to work with 10.3?</link>
      </p>
      <p>
        <link url="#top6">Short 'fink list' on Panther
            w/ Fink 0.6.0</link>
      </p>
      <p>
        <link url="#top7">&quot;no such file or directory&quot;
            errors</link>
      </p>
      <p>
        <link url="#top8">Which trees are updated
            by the rsync update method?</link>
      </p>
      <p>
        <link url="#top9">Fink keep asking to install
            xfree86?</link>
      </p>
      <p>
        <link url="#top10">On Panther but fink.conf
            says &quot;&quot;Distribution: 10.2&quot;</link>
      </p>
      <p>
        <link url="#top11">To remove Fink xfree86
            and install Apple's X11</link>
      </p>
      <p>
        <link url="#top12">system-xfree86-</link>
      </p>
      <p>
        <link url="#top13">&quot;The
            State of Fink&quot;</link>
      </p>
      <p>
        <link url="#top14">gcc2 [virtual package representing
            the gcc2 compiler]</link>
      </p>
      <p>
        <link url="#top15">Install dlcompat-shlibs
            if you use the bindist</link>
      </p>
      <p>
        <link url="#top16">Problem with the qt3 package
            in the 10.3 bindist</link>
      </p>
      <p>
        <link url="#top17">How can I grab the source
            to a package?</link>
      </p>
      <p>
        <link url="#top18">Tried to install fink-0.5.3-full
            on Panther</link>
      </p>
      <p>
        <link url="#top19">Using Fink to install KDE
            on Panther</link>
      </p>
      <p>
        <link url="#top20">Installing Fink Binary
            packages in Panther</link>
      </p>
      <p>
        <link url="#top21">Updating Fink emacs21-xaw3d
            in Panther</link>
      </p>
      <p>
        <link url="#top22">Panther default open source
            packages and Fink</link>
      </p>
      <p>
        <link url="#top23">bus error after fileutils
            update</link>
      </p>
      <p>
        <link url="#top24">compiling qt3-3.2.2-1 fails</link>
      </p>
      <p>
        <link url="#top25">a
            root directory /sw exists</link>
      </p>
      <p>
        <link url="#top26">The &quot;trailing slash&quot; or
            &quot;mv&quot; bug</link>
      </p>
      <p>
        <link url="#top27">/sw/bin/pathsetup.command;
            exit</link>
      </p>
      <p>
        <link url="#top28">/sw/fink/10.2 - /sw/fink/10.2-gcc3.3</link>
      </p>
    </section>
    <section>
      <title>fink
            selfupdate-rsync</title>
      <p>Switching
            to the Rsync Upgrade Method</p>
      <p>
            Since version 0.14.0 , the fink package manager offers  a new update
            method, upgrading via rsync, as an alternative to the CVS upgrade method.</p>
      <p>
            After you installed the latest fink package manager, running the command:</p>
      <codeblock>'fink selfupdate-rsync'</codeblock>
      <p>
            will switch you to the new method.</p>
      <p>
            Once you have switched, you can do subsequent updates with the simple
            command:</p>
      <codeblock>'fink selfupdate'</codeblock>
      <p>
            `fink selfupdate' is the only documented method of updating package descriptions.</p>
      <p>
            It is not advised to switch frequently between update methods; you should
            pick one method and stick to it. You can switch between rsync and cvs
            update methods, but it is not recommended, as it's not sure whether the
            anonymous 'cvs update method' will remain an option for fink users. It
            is possible that the ability for users to do 'anonymous cvs selfupdate's'
            will be removed from fink as soon as Fink gets more 'rsync' mirrors.</p>
      <p>
            To change the selfupdate method edit the:</p>
      <codeblock>&quot;SelfUpdateMethod&quot;</codeblock>
      <p> field</p>
      <p>
            in the /sw/etc/fink.conf file.</p>
      <p>
            SelfUpdateMethod can be set to one of &quot;cvs&quot; &quot; rsync &quot; or &quot;point&quot; . Changes
            to this field are recognized the next time fink selfupdate is run, and
            the method listed in the configuration file will be used.  For more info
            check 'man fink.conf'.</p>
      <codeblock>-Firewall problem</codeblock>
      <p> - Are you behind
            a firewall?</p>
      <p> 
            Does it allow rsync connections to pass through? </p>
      <p>
            rsync uses port 873. You may also use a web proxy, if it allows CONNECT
            on port 873. See the rsync man page, and look for RSYNC_PROXY.</p>
      <p>
            -The new rsync method only updates the trees which are mentioned in your
            fink.conf file, so a user who does a selfupdate with only 'stable' enabled
            will not get new unstable package descriptions.</p>
      <p>
            -All CVS directories under /sw/fink will be removed when you run the
            rsync update method.</p>
    </section>
    <section>
      <title>How
            do I get Fink to realize I'm running Panther?</title>
      <p>
            Run:</p>
      <codeblock>sudo /sw/lib/fink/postinstall.pl</codeblock>
    </section>
    <section>
      <title>Fink
            xfree86 4.3.0-14 and Panther</title>
      <p>
                  4.3.0 is broken is broken on Panther. It is suggested to use Apple's
            X11 instead, 
                  or you can install fink's package xfree86 4.3.99. It should work fine
            on Panther.</p>
    </section>
    <section>
      <title>Upgrading
            your previous Fink installation</title>
      <p>
                 If you installed Panther with the 'archive and install' method, and
            then installed Apple's X11 1.0 and the X11 SDK, 
                 be sure to install XCode from the XCode disk before upgrading Fink.</p>
      <p>
            Then, running:</p>
      <codeblock>fink selfupdate</codeblock>
      <p>
            should perform the upgrade for you. The latest version of the fink package
            manager will automatically detect 
            which version of OS X and which version of gcc you have installed, and
            will adjust itself accordingly.</p>
    </section>
    <section>
      <title>Which
            packages have been updated to work with 10.3?</title>
      <p>
                  Run </p>
      <codeblock>'fink list'</codeblock>
      <p> on 10.3</p>
    </section>
    <section>
      <title>Short
            'fink list' on Panther w/ Fink 0.6.0</title>
      <p>
                  You need to do a &quot;fink selfupdate&quot; and choose a method other than
            the point release (preferably rsync) and get the latest package descriptions.
                  (you may need to run &quot;fink index&quot; afterwards)</p>
    </section>
    <section>
      <title>&quot;no
            such file or directory&quot; errors</title>
      <p>
                  The &quot;no such file or directory&quot; errors typically mean that something
            failed to build earlier on. 
                  Check further back in your output for a different error.</p>
    </section>
    <section>
      <title>Which
            trees are updated by the rsync update method?</title>
      <p>
                  The rsync update method only updates those trees which are enabled
            in fink.conf, 
                  add unstable/main and unstable/crypto to your Trees: line in fink.conf
            and fink selfupdate will update them.</p>
    </section>
    <section>
      <title>Fink
            keep asking to install xfree86?</title>
      <p>
                  If after installing Apple's X11, Fink keep asking to install xfree86,
            you need to:</p>
      <p>
                  Install the X11 SDK, which is on the Xcode CD (double click the X11SDK.pkg),
            and is not installed by default.</p>
      <p>
                  If you have Apple's X11 installed, you should never answer &quot;y&quot; when
            fink propose to install xfree86-* packages. 
                  If you do answer 'y' it could happen that you will end up with a bunch
            of half-installed packages that may be hard to get rid of.</p>
      <p>
            Also note that you do not need to install system-xfree86 anymore, fink
            is capable of figuring out your X11 version automatically 
            in cases where you would have installed system-xfree86 previously.</p>
      <p>
            If you still have an old system-xfree86 package installed, run the following
            commands:</p>
      <codeblock>sudo dpkg -r --force-all system-xfree86 system-xfree86-42 system-xfree86-43; \
fink selfupdate; fink index</codeblock>
    </section>
    <section>
      <title>On
            Panther but fink.conf says &quot;&quot;Distribution: 10.2&quot;</title>
      <p>
                  Standard upgrade to Panther; Apple's X11, Xcode and X11 SDK installed.
                  However, in fink.conf still have one line saying &quot;Distribution: 10.2&quot;.
            Should it not be 10.3?</p>
      <p>
            If you run </p>
      <codeblock>'fink reinstall fink'</codeblock>
      <p>
            this should get corrected to 10.3.</p>
    </section>
    <section>
      <title>To
            remove Fink xfree86 and install Apple's X11</title>
      <codeblock>sudo dpkg -r --force-depends xfree86-rootless xfree86-rootless-shlibs
xfree86-base xfree86-base-shlibs
(the above command all in one line)
sudo rm -rf /usr/X11R6 /etc/X11 /Applications/XDarwin.app</codeblock>
      <p>
                  Then install Apple's X11 1.0 from the Panther CD including Xcode and
            the X11 SDK from the XCode CD.</p>
      <p>
            You don't need to install system-xfree86 anymore. It's automatically
            generated if fink detects a valid x11 install.</p>
    </section>
    <section>
      <title>system-xfree86-</title>
      <p>
                  With recent versions of fink (the program), you don't need any system-xfree86-*
            packages. 
                  Force-remove any system-xfree86 packages you have installed.  
                  If you have no system-xfree86 installed, fink automatically provides
            a system-xfree86 package that knows exactly what your X11 is capable
            of.</p>
      <p>
            To check, run:</p>
      <codeblock>'fink-virtual-pkgs'</codeblock>
      <p>
            In the resulting list, you should see the lines:</p>
      <codeblock>Package: system-xfree86
Status: install ok installed
Version: 2:4.3-1
description: [placeholder for user installed x11]
provides: x11, x11-shlibs, libgl, libgl-shlibs, xft2, xft1-shlibs, 
xft2-shlibs, rman, fontconfig1, fontconfig1-shlibs</codeblock>
      <p>
            If you don't see this information:</p>
      <p>
            - you either have an incomplete installation of X11 (missing something
            from the SDK, for example).</p>
      <p>
            - or did not remove the &quot;real&quot; system-xfree86 packages. Only when they
            are gone can the virtual package show up.</p>
    </section>
    <section>
      <title>&quot;The
            State of Fink&quot;</title>
      <p>
                  This is important information for all fink-users, please read carefully
            and follow what's necessary to do for your system.</p>
      <p>
            The following was posted by Benjamin Reed (Fink Project Leader) at the
            fink-users list, on Oct 24th:</p>
      <p>
        <link url="http://article.gmane.org/gmane.os.apple.fink.general/10138">The
            State of Fink</link>
      </p>
      <p>
            &quot;In some parts of the world, Panther is already out, so I wanted to give
            an update on where things are. A more formal announcement will come
            when we're ready for a &quot;real&quot; release.</p>
      <p>How This Will Work</p>
      <p>
            First of all, unlike the transition from 10.1 -&gt; 10.2, we will continue
            to support the previous Mac OS X release. It may not be updated as
            quickly as the 10.3 tree, but we now at least have the resources in
            place to make it reasonable to support both. It would be nice to have
            volunteers from the community to help &quot;backport&quot; 10.3 changes, but that
            is something that will probably have to be worked out later. If you're
            interested, drop a line to fink-core@lists.sourceforge.net.</p>
      <p>The Transition to GCC 3.3</p>
      <p>
            HOWEVER, to ease keeping things in sync between 10.2 and 10.3, our
            continued support for 10.2 will *only* be if you are using the gcc 3.3
            update, since the differences between gcc3.1 and 3.3 are reasonably
            large as far as how porting happens.</p>
      <p>
            If you've been following the fink-devel list, you know that for the past
            few months we've been working on a tree dubbed &quot;10.2-gcc3.3&quot;, which
            currently contains most of the packages in the 10.2 tree, updated to
            work with the new compiler. Even now more packages are getting moved
            over each day, and tools have now been written to make it easier to
            track changes between the different development trees.</p>
      <p>
            The 10.2-gcc3.3 tree is perfectly usable right now, although a little
            incomplete in unstable. David R. Morrison is working incredibly hard
            to
            finish putting together the first binary distribution for 10.2-gcc3.3,
            and it is expected to be coming any day now.</p>
      <p>The Transition to Panther</p>
      <p>
            The initial target for Panther users will be for you to use the
            10.2-gcc3.3 binary distribution. This tree is binary-compatible with
            Panther and should provide a smooth upgrade path to the &quot;real&quot; 10.3 tree.</p>
      <p>
            The 10.3 tree is currently based on a subset of 10.2-gcc3.3, and is,
            like it's predecessor, continuously getting updated and is getting
            closer to parity with the other trees as time goes on. There's still
            plenty of work to do, but almost all of stable is there, and ready, and
            developers are diligently getting packages moved over to the unstable
            tree.</p>
      <p>What You Can Do</p>
      <p>
            Please help us test the 10.2-gcc3.3 and 10.3 trees.</p>
      <p>
            10.2:</p>
      <p>
            If you're running 10.2, install the December developer tools if you
            haven't already, and then install the August updater. You can get them
            both at the Apple Developer Connection </p>
      <p>
        <link url="http://developer.apple.com/">http://developer.apple.com/</link>
      </p>
      <p>
            It does require registration, but is free.</p>
      <p>
            10.3:</p>
      <p>
            If you're already running 10.3, be warned that if you installed fink's
            X11 package (instead of a system-xfree86 package), you may need to
            force-remove them, and then re-install Apple's X11 (make sure you also
            install the X11 SDK from the developer tools!)</p>
      <p>Everyone:</p>
      <p>
            Download the 0.15.1 beta of fink here:</p>
      <p>
        <link url="http://prdownloads.sourceforge.net/fink/fink-0.15.1-beta.tar.gz?download">Download
            0.15.1 beta of fink</link>
      </p>
      <p>
            ...and follow the instructions for the rsync upgrade (which are good
            general instructions for upgrading your fink package manager to the beta):</p>
      <p>
        <link url="http://fink.sourceforge.net/download/rsync-upgrade.php">http://fink.sourceforge.net/download/rsync-upgrade.php</link>
      </p>
      <p>
            The beta will set you up for 10.2-gcc3.3 or 10.3, depending on what OS
            version you are running.</p>
      <p>
            *Please* keep in mind that you shouldn't use apt-get or dselect to
            install things until we have a binary distribution (or if you do, make
            sure you do &quot;fink update-all&quot; afterwards so that any 10.2-gcc3.3 fixes
            or upgrades get built and installed). Once the 10.2-gcc3.3 bindist is
            ready, we will make an announcement and it will be safe to use binary
            tools again.</p>
      <p>
            Also keep in mind that for now, 10.2-gcc3.3 and 10.3 are still
            considered &quot;beta&quot;. Expect the occasional problem. Generally, things
            are working pretty well, though.</p>
      <p>
            We'll let you know as soon as something official is available&quot;.</p>
    </section>
    <section>
      <title>gcc2
            [virtual package representing the gcc2 compiler]</title>
      <p>
                  In Panther:</p>
      <p>
            Fink automatically creates it internally, if you installed the optional
            gcc 2.95 along with gcc 3.1 and 3.3 when you installed Xcode. 
            You don't need to remove it. It's just a convenient placeholder to make
            sure packages depend on it properly, now that gcc2 is optional in panther.
            It's one of the new &quot;virtual&quot; packages fink is capable of providing automatically
            based on what is on your system.</p>
    </section>
    <section>
      <title>Install
            dlcompat-shlibs if you use the bindist</title>
      <p>
                  If you are using the 0.6.1 binary distribution on Panther, install
            the dlcompat-shlibs package:</p>
      <codeblock>sudo apt-get install dlcompat-shlibs</codeblock>
      <p>
            At the moment, the dlcompat package will fail to trigger the installation
            of dlcompat-shlibs as a dependancy.</p>
    </section>
    <section>
      <title>Problem
            with the qt3 package in the 10.3 bindist</title>
      <p>
                  The qt3 packages in the 10.3 bindist will have to be replaced.</p>
      <p>
            Posted by Benjamin Reed at the fink-devel lists:</p>
      <p>
            &quot;The problem is that XFree86 was disabling a flag that provides backwards-compatible
            symbols for freetype, so a libfreetype from XFree86 4.2 
            (including Apple's X11) has some symbols that a libfreetype from XFree86
            4.3 doesn't.</p>
      <p>
            I've notified the XFree86 team about this and it's already fixed in CVS,
            a future XFree86 4.3.1 release or the upcoming 4.4 release will both
            solve the problem.</p>
      <p>
            In the meantime, qt3 needs to be rebuilt&quot;.</p>
    </section>
    <section>
      <title>How
            can I grab the source to a package?</title>
      <codeblock>'fink fetch some_package'</codeblock>
      <p>
            The source should wind up in /sw/src</p>
      <p>
            The patches live in your /sw/fink/dists/ directory.</p>
    </section>
    <section>
      <title>Tried
            to install fink-0.5.3-full on Panther</title>
      <p>
                  You need to bootstrap *from* fink-0.6.0-full, not 0.5.3.</p>
    </section>
    <section>
      <title>Using
            Fink to install KDE on Panther</title>
      <p>
            Install Apple's X11 1.0 from the Panther CD, Xcode and the X11 SDK from
            the Xcode CD.</p>
      <p> 
            Install Fink from:</p>
      <p>
        <link url="http://fink.sourceforge.net/download/index.php">Fink
            Binary Installer 0.6.1</link>
      </p>
      <p>
            or</p>
      <p>
        <link url="http://fink.sourceforge.net/download/srcdist.php">Fink
            Source Release 0.6.1</link>
      </p>
      <p> 
            Then, to install all of the official KDE packages with Fink, install:</p>
      <p>
            'bundle-kde' or 'bundle-kde-ssl'</p>
      <p>
            To install binaries, you can use apt-get:</p>
      <codeblock>sudo apt-get update</codeblock>
      <codeblock>sudo apt-get install bundle-kde</codeblock>
      <p>
            From source:</p>
      <codeblock>fink selfupdate</codeblock>
      <codeblock>fink install bundle-kde</codeblock>
      <p>
            If you are using Apple's X11 but want to use the KDE window manager,
            create a file called &quot;.xinitrc&quot; in your home directory, 
            with the following lines:</p>
      <codeblock>source /sw/bin/init.sh
export KDEWM=kwin
/sw/bin/startkde &gt;/tmp/kde.log 2&gt;&amp;1</codeblock>
      <p>1-If you plan on running in
            rootless mode, you will likely want to disable desktop icons, or else
            the root window desktop will 
            cover up your Aqua destkop.  You can do this by starting the KDE control
            center, expanding the &quot;Desktop&quot; list, click &quot;Behavior&quot;, 
            and uncheck the &quot;Enable icons on desktop&quot; checkbox.</p>
      <p>2-If you have problems to access
            the KDE control center in Apple's X11, choose minimize from the Apple's
            X11 Window menu after KDE has launched, 
            the KDE desktop shrinks to the Dock and and you will be able to access
            KDE windows and menus with the mouse or keyboard.</p>
      <p>3-If you try to run KDE apps
            after you upgraded to Panther and Fink 0.6.1 and get the following error
            messages:</p>
      <codeblock>/sw/lib/libqt-mt.3.dylib undefined reference to
_FT_Access_Frame expected to be defined in
/usr/X11R6/lib/libfreetype.6.dylib</codeblock>
      <p>
            Your best bet will be to recompile qt3. Run:</p>
      <codeblock>fink rebuild qt3</codeblock>
      <p>
            It takes about 3 hours, you will need the Xcode tools installed, including
            the X11 SDK.</p>
    </section>
    <section>
      <title>Installing
            Fink Binary packages in Panther</title>
      <p>
            1- Install Apple's X11 from the X11.pkg on Panther CD 3.</p>
      <p> 
            2- Install Xcode and the &quot;X11 SDK&quot; from the Xcode CD.</p>
      <p>
            2- Install Fink:</p>
      <p>
            Download the installer disk image from:</p>
      <p>
        <link url="http://fink.sourceforge.net/download/index.php">Fink
            0.6.1 Binary Installer - 18 MB</link>
      </p>
      <p>
            For installing binary packages in Panther, you can use:</p>
      <p>
            the command </p>
      <codeblock>apt-get</codeblock>
      <p>
            or </p>
      <codeblock>FinkCommander</codeblock>
      <p>Important
            before you start installing packages:</p>
      <p>
            Check that the file /sw/etc/apt/sources.list has 10.3 in the deb lines:</p>
      <codeblock># Official binary distribution: download location for
# packages from the latest release
deb http://us.dl.sourceforge.net/fink/direct_download 10.3/release main crypto
# Official binary distribution: download location for
# updated packages built between releases
deb http://us.dl.sourceforge.net/fink/direct_download 10.3/current main crypto</codeblock>
      <p>
            Then run:</p>
      <codeblock>fink scanpackages</codeblock>
      <p> (only needed
            the first time you do this)</p>
      <p> 
            ---------------------------</p>
      <p>- For the binary packages to become
            available in FinkCommander:</p>
      <p>
            Run </p>
      <codeblock>&quot;Update&quot;</codeblock>
      <p> followed by </p>
      <codeblock>&quot;Dist-Upgrade&quot;</codeblock>
      <p> (both
            in the Binary menu)</p>
      <p>
            Or Run:</p>
      <codeblock>Binary:Update descriptions</codeblock>
      <p>
            and then:</p>
      <codeblock>File:Update Table</codeblock>
      <p>
            ---------------------------</p>
      <p>-Using apt-get to install binary packages:</p>
      <p>
            The most frequently used apt-get commands are 'update' and 'install'
            .</p>
      <p>
            To retrieve and scan the Packages.gz files, so that information about
            new and updated packages is available, run:</p>
      <codeblock>sudo apt-get update</codeblock>
      <p>
            To 'download and install' the especified deb package, run:</p>
      <codeblock>sudo apt-get install packagename</codeblock>
      <codeblock>apt-get commands:update - Retrieve new lists of packagesupgrade - Perform an upgradeinstall - Install new packages (pkg is libc6 not libc6.deb)remove - Remove packagessource- Download source archivesbuild-dep - Configure build-dependencies for source packagesdist-upgrade - Distribution upgrade, see apt-get(8)dselect-upgrade- Follow dselect selectionsclean - Erase downloaded archive filesautoclean- Erase old downloaded archive filescheck - Verify that there are no broken dependencies</codeblock>
      <p>
            Running apt-get with the -s option (No-act. Perform ordering simulation) will
            give you a list of all the packages that will be installed.</p>
      <codeblock>apt-get -s install packagename</codeblock>
      <p>
            For more info on using apt-get run:</p>
      <codeblock>apt-get --help</codeblock>
      <p>
            ----------------------------</p>
      <p>Summary</p>
      <p>
            Check that the file /sw/etc/apt/sources.list has 10.3 in the deb lines.</p>
      <codeblock>fink scanpackages</codeblock>
      <p> (only
            needed the first time you do this)</p>
      <codeblock>sudo apt-get update</codeblock>
      <codeblock>sudo apt-get install packagename</codeblock>
    </section>
    <section>
      <title>Updating
            Fink emacs21-xaw3d in Panther</title>
      <p>
            I had installed emacs21-xaw3d before the update to Panther. 
            Then, in Panther when I wanted to 'update build' emacs21-xaw3d I got
            the following error:</p>
      <codeblock>./emacs -q -batch -f list-load-path-shadows
Fatal error (10).^Cmake[1]: *** Deleting file `emacs'
make[1]: *** [emacs] Interrupt
make: *** [src] Interrupt
### execution of  failed, exit code 2
Failed: compiling emacs21-xaw3d-21.3-21 failed.</codeblock>
      <p>
            Then, I changed and built fink emacs21 package and it compiled without
            any issues. 
            I had already xaw3d built and was &quot;seen and built in&quot;, 
            and as far as I can tell the end result is the same as emacs21-xaw3d
            and it works quite well till now.</p>
    </section>
    <section>
      <title>Panther
            default open source packages and Fink</title>
      <p>
                  Here is a list of a number of packages that are provided by Fink and
            are 
                  already included with the default install of 10.3 (Some were in Jaguar
            as well):</p>
      <codeblock>AutoConf
AutoMake
M4
Bash
Tcsh
Zsh
Emacs21
VIM
Gzip
libiconv
Ncurses
Tar
libxml2
openssl
postfix
Perl
python23
tcl (but not tk?)
X11 and freetype2</codeblock>
      <p>
            Apple has added a number of new open source pacakges with each major
            release of OS X. 
            But, keep in mind that sometimes the system versions lack important pieces.
            Like python on &quot;Jaguar&quot;, which was missing the headers, so you couldn't
            build anything against it.</p>
      <p>
            From what I know, fink's philosophy till now, has been to keep providing
            a fink version of the package, 
            even after Apple is providing their own. Maybe they don't trust Apple
            to be consistent in what they provide, 
            like for example, when they used to provide wget, which fink relied on,
            and then at a certain point they switched to curl.</p>
      <p>
            Many users will already have the &quot;fink&quot; version of the library linked
            in to their packages, 
            and upgrading becomes pretty tricky if they were to try to revert to
            Apple's version.</p>
      <p>
            Generally, I tend to follow Fink on this, as Apple is not always good
            about 
            keeping packages &quot;current&quot;, and fink does that more frequently.</p>
    </section>
    <section>
      <title>bus
            error after fileutils update</title>
      <p>
                  There is a bug, apparently in 'gettext' when you run:</p>
      <p>
                   'fink rebuild fileutils ; fink install fileutils'.</p>
      <p>
            After that, running the simple command &quot;ls&quot; results in a bus error.</p>
      <p>
            To fix it, run first:</p>
      <codeblock>dpkg -r --force-depends fileutils</codeblock>
      <p>
            so that the rebuild doesn't get killed by crashing mv or cp commands.</p>
      <p>
            An then:</p>
      <codeblock>fink rebuild gettext</codeblock>
      <p>
            Or</p>
      <codeblock>sudo dpkg --remove fileutils</codeblock>
      <codeblock>fink reinstall gettext</codeblock>
      <codeblock>fink reinstall fileutils</codeblock>
    </section>
    <section>
      <title>compiling qt3-3.2.2-1 fails</title>
      <codeblock>ld: Undefined symbols: qInitImages_designercore()
/usr/bin/libtool: internal link edit command failed
......
......
Failed: compiling qt3-3.2.2-1 failed</codeblock>
      <p>
            Remove the qt3 packages before you rebuild qt3. You may need to use force:</p>
      <codeblock>sudo dpkg -r --force-depends qt3 qt3-dev qt3-shlibs</codeblock>
      <p>
            Then:</p>
      <codeblock>fink install qt3</codeblock>
    </section>
    <section>
      <title>a
            root directory /sw exists</title>
      <p>
                  &quot;trying to install fink 0.6.1 after deleting all other fink files
            on os x 10.2.8.  message &quot;a root directory /sw exists.  
                  please see the read me file for update instructions, or for information
            on installing fink on a separate volume&quot;.</p>
      <p>
            You need to remove /sw if you are reinstalling Fink:</p>
      <codeblock>sudo rm -rf /sw</codeblock>
    </section>
    <section>
      <title>The
            &quot;trailing slash&quot; or &quot;mv&quot; bug</title>
      <codeblock>/sw/src/root-aalib-bin-1.4rc5-22/sw/()
mv: rename /sw/src/root-aalib-1.4rc5-22/sw/bin/ to
/sw/src/root-aalib-bin-1.4rc5-22/sw/bin/: No such file or directory
### execution of mv failed, exit code 1
Failed: installing aalib-bin-1.4rc5-22 failed</codeblock>
      <p>
            In Panther in some cases the mv command appears to not be able to handle
            trailing slashes. This is caused by the Stuffit Pro kext.</p>
      <p>Solution:</p>
      <p>
            Go to your Stuffit Pro Preferences in the &quot;System Preferences&quot; and desactivate
            &quot;ArchiveViaRealName&quot;.</p>
    </section>
    <section>
      <title>/sw/bin/pathsetup.command; exit</title>
      <p>
                  If you get the following message in your Terminal.app:</p>
      <codeblock>/sw/bin/pathsetup.command; exit
Welcome to Darwin!
[macme01:~] pro&#37; /sw/bin/pathsetup.command; exit
Your environment seems to be correctly
set up for Fink already.
(You can close this window now)
logout</codeblock>
      <p>
            Your terminal preferences contain the instruction to run pathsetup. You
            probably pressed the &quot;Use Settings as Default&quot; 
            in the Terminal when fink had opened the window automatically.</p>
      <p>
            To fix it, open the file com.apple.Terminal.plist in:</p>
      <p>
            ~/Library/Preferences</p>
      <p>
            and remove the entry for ExecutionString which probably reads
            like:</p>
      <p>&lt;key&gt;ExecutionString&lt;/key&gt;</p>
      <p>&lt;string&gt;/sw/bin/pathsetup.command&lt;/string&gt;</p>
      <p>
            to this:</p>
      <p>&lt;key&gt;ExecutionString &lt;/key&gt;</p>
      <p>&lt;string&gt;&lt;/string&gt;</p>
    </section>
    <section>
      <title>/sw/fink/10.2
            - /sw/fink/10.2-gcc3.3</title>
      <p>
                  If you're running 10.3, you can remove both directories to reclaim
            some space. 
                  If you are doing selfupdate-cvs, they will come back, however. Selfupdate-rsync
            leaves them alone.</p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="finkandpanther2">
    <title>      /
          Fink and Panther 2 /</title>
    <shorttitle>      /
          Fink and Panther 2 /</shorttitle>
    <preface>
      <p/>
    </preface>
    <section>
      <title>
            - Fink and Panther FAQ-2 - </title>
    </section>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">Problems
            with Dl_info and OpenOffice</link>
      </p>
      <p>
        <link url="#top2">compiling gstreamer-0.6.4-4
            failed</link>
      </p>
      <p>
        <link url="#top3">compiling librep-0.16.2-11
            failed</link>
      </p>
      <p>
        <link url="#top4">compiling librep-0.14-18
            failed</link>
      </p>
      <p>
        <link url="#top5">compiling pango1-xft2-1.2.5-2
            failed</link>
      </p>
      <p>
        <link url="#top6">compiling librsvg2-2.4.0-3
            failed</link>
      </p>
      <p>
        <link url="#top7">compiling vte-0.11.10-3
            failed</link>
      </p>
      <p>
        <link url="#top8">compiling id3lib3.7-3.7.13-4
            failed</link>
      </p>
      <p>
        <link url="#top9">compiling gnome-panel-2.4.2-6
            failed</link>
      </p>
      <p>
        <link url="#top10">compiling uri-pm581-1.28-12
            failed</link>
      </p>
      <p>
        <link url="#top11">atk1 BuildDepend WARNINGS</link>
      </p>
    </section>
    <section>
      <title>Problems
            with Dl_info and OpenOffice</title>
      <p>
            All of these problems with Dl_info are from people who have installed
            OpenOffice. OpenOffice's installer ships, or at least used to ship: </p>
      <codeblock>/usr/local/include/dlfcn.h</codeblock>
      <p> 
            and</p>
      <codeblock>/usr/local/lib/libdl.dylib</codeblock>
      <p>
            Problem being that the version of dlcompat that they are shipping is
            old/different, and does not include support for dladdr.
            It is the fault of openoffice for shipping a header that they do not
            even need to ship. 
            Application installers really should not install headers.</p>
      <p>
            You can trash /usr/local/include/dlfcn.h and have no problems. You should
            probably leave the lib there, 
            it is unlikely to be binary compatible with the libdl in libSystem.</p>
      <p>Check the next 3 examples:</p>
      <p>
            compiling gstreamer-0.6.4-4 failed</p>
      <p>
            compiling librep-0.16.2-11 failed</p>
      <p>
            compiling librep-0.14-18 failed</p>
    </section>
    <section>
      <title>compiling
            gstreamer-0.6.4-4 failed</title>
      <codeblock>gstinfo.c:509: error: `Dl_info' undeclared (first use in this function)
gstinfo.c:509: error: (Each undeclared identifier is reported only once
gstinfo.c:509: error: for each function it appears in.
gstinfo.c:509: error: parse error before &quot;dlinfo&quot;
gstinfo.c:515: warning: implicit declaration of function `dladdr'
gstinfo.c:515: error: `dlinfo' undeclared (first use in this function)
make[4]: *** [libgstreamer_0.6_la-gstinfo.lo] Error 1
make[3]: *** [all-recursive] Error 1
make[2]: *** [all] Error 2
make[1]: *** [all-recursive] Error 1
make: *** [all] Error 2
### execution of make failed, exit code 2
Failed: compiling gstreamer-0.6.4-4 failed</codeblock>
      <p>
            Try fixing this by moving</p>
      <codeblock>/usr/local/include/dlfcn.h</codeblock>
      <p>
            out of the way. Please, read &quot;Problems with Dl_info and OpenOffice&quot;</p>
    </section>
    <section>
      <title>compiling
            librep-0.16.2-11 failed</title>
      <codeblock>unix_dl.c: In function `rep_open_dl_library':
unix_dl.c:328: warning: assignment discards qualifiers from pointer 
target type
unix_dl.c: In function `rep_find_c_symbol':
unix_dl.c:466: error: `Dl_info' undeclared (first use in this function)
unix_dl.c:466: error: (Each undeclared identifier is reported only
once
unix_dl.c:466: error: for each function it appears in.)
unix_dl.c:466: error: parse error before &quot;info&quot;
unix_dl.c:467: error: `info' undeclared (first use in this function)
make[1]: *** [unix_dl.lo] Error 1
make: *** [all] Error 1
### execution of  failed, exit code 2
Failed: compiling librep-0.16.2-11 failed</codeblock>
      <p>
            Check if you have a:</p>
      <codeblock>/usr/local/include/dlfcn.h</codeblock>
      <p> 
            and</p>
      <codeblock>/usr/local/lib/libdl.dylib</codeblock>
      <p>
            If this is the case with you, you need to remove these files. Please,
            read &quot;Problems with Dl_info and OpenOffice&quot;</p>
    </section>
    <section>
      <title>compiling
            librep-0.14-18 failed</title>
      <codeblock>unix_dl.c: In function `rep_find_c_symbol':
unix_dl.c:466: error: `Dl_info' undeclared (first use in this function)
unix_dl.c:466: error: (Each undeclared identifier is reported only once
unix_dl.c:466: error: for each function it appears in.)
unix_dl.c:466: error: parse error before &quot;info&quot;
unix_dl.c:467: error: `info' undeclared (first use in this function)
make[1]: *** [unix_dl.lo] Error 1
make: *** [all] Error 1
### execution of  failed, exit code 2
Failed: compiling librep-0.14-18 failed</codeblock>
      <p>
                You have an old:</p>
      <codeblock>/usr/local/include/dlfcn.h</codeblock>
      <p>
                  that is incompatible with Panther. Move it out of the way. Please,
            read &quot;Problems with Dl_info and OpenOffice&quot;</p>
    </section>
    <section>
      <title>compiling
            pango1-xft2-1.2.5-2 failed</title>
      <codeblock>ld: warning prebinding disabled because of undefined symbols
ld: Undefined symbols:
_FT_Access_Frame
_FT_Forget_Frame
_FT_Get_Short
_FT_Seek_Stream
_FT_Get_Long
make[3]: *** [ottest] Error 1
make[2]: *** [all-recursive] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all-recursive-am] Error 2
### execution of LD_TWOLEVEL_NAMESPACE=1 failed, exit code 2
Failed: compiling pango1-xft2-1.2.5-2 failed</codeblock>
      <p>
                If you are using Apple's X11 when you get this error, it is recommended
            to &quot;reinstall&quot; the X11SDK.pkg.</p>
      <p>
            The symbol FT_Access_Frame, should not be defined anywhere on your system
            when you are running Panther and have Apple's X11 installed. 
            It used to be defined in earlier versions of X11. This symbol can *only*
            show up as undefined when it is picked up from some header file during
            compilation. 
            So it must be somewhere in a text file on your hard disk, and it is not
            in the sources of pango1-xft2 which you are trying to compile.</p>
      <p>
            To find out where this comes from, you can run the following command:</p>
      <codeblock>grep FT_Access_Frame -r /sw/lib/lib*</codeblock>
      <p>
            This will give you some lines like:</p>
      <codeblock>Binary file /sw/lib/libsomething.dylib matches</codeblock>
      <p>
            Then check which package this comes from with:</p>
      <codeblock>dpkg -S libsomething.dylib</codeblock>
      <p>
            This should show you some package that was installed from the binary
            distribution and which you now have to recompile. 
            Most likely it is the freetype2-shlibs package. If this is the case,
            do:</p>
      <codeblock>sudo dpkg --purge --force-depends
freetype2 freetype2-shlibs
fink rebuild freetype2
fink install freetype2</codeblock>
      <p>
But there might be other packages affected.</p>
      <p>
            Or try the following commands:</p>
      <codeblock>grep FT_Access_Frame -r /usr/X11R6/include
grep FT_Access_Frame -r /usr/local/
grep FT_Access_Frame -r /sw/include</codeblock>
      <p>
            In one case, the problem was tracked down to an older (Jaguar) version
            of the file:</p>
      <codeblock>/usr/X11R6/include/freetype2/freetype/internal/ftstream.h</codeblock>
      <p>
            being left over from an earlier version of X11. Whatever file it is,
            that would be the file that you need to remove or replace by a newer
            version.</p>
    </section>
    <section>
      <title>compiling
            librsvg2-2.4.0-3 failed</title>
      <codeblock>/sw/include/pango-1.0/pango/pangoft2.h:52: error: parse error before '*' token
/sw/include/pango-1.0/pango/pangoft2.h:57: error: parse error before '*' token
/sw/include/pango-1.0/pango/pangoft2.h:61: error: parse error before '*' token
/sw/include/pango-1.0/pango/pangoft2.h:86: error: parse error before
&quot;pango_ft2_font_get_face&quot;
/sw/include/pango-1.0/pango/pangoft2.h:86: warning: data definition has 
no type or storage class
make[2]: *** [rsvg-gz.lo] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all-recursive-am] Error 2
### execution of make failed, exit code 2
Failed: compiling librsvg2-2.4.0-3 failed</codeblock>
      <p>
            The workaround is to remove the freetype and freetype-hinting packages
            (at most one of these two is installed, 
            but &quot;fink remove freetype freetype-hinting&quot; will remove whatever is installed).
            They are build only packages anyway and can always be safely removed.</p>
      <codeblock>fink remove freetype freetype-hinting</codeblock>
      <p>
            ----</p>
      <codeblock>ld: Undefined symbols:
_rsvg_set_default_dpi
make[2]: *** [rsvg] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all-recursive-am] Error 2
### execution of make failed, exit code 2
Failed: compiling librsvg2-2.4.0-3 failed</codeblock>
      <p>
                  At the moment, you have to &quot;fink remove librsvg2&quot; first before compiling
            librsvg2.</p>
      <codeblock>fink remove librsvg2</codeblock>
      <codeblock>fink install librsvg2</codeblock>
    </section>
    <section>
      <title>compiling
            vte-0.11.10-3 failed</title>
      <codeblock>In file included from vteft2.c:32:
vteglyph.h:64: error: parse error before &quot;FT_Library&quot;
vteglyph.h:64: warning: no semicolon at end of struct or union
vteft2.c: In function `_vte_ft2_get_text_width':
vteft2.c:236: error: dereferencing pointer to incomplete type
vteft2.c: In function `_vte_ft2_get_text_height':
vteft2.c:244: error: dereferencing pointer to incomplete type
vteft2.c: In function `_vte_ft2_get_text_ascent':
vteft2.c:252: error: dereferencing pointer to incomplete type
vteft2.c: In function `_vte_ft2_draw_text':
vteft2.c:294: error: dereferencing pointer to incomplete type
vteft2.c:295: error: dereferencing pointer to incomplete type
make[2]: *** [vteft2.lo] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all] Error 2
### execution of make failed, exit code 2
Failed: compiling vte-0.11.10-3 failed</codeblock>
      <p>
              Try if removing the freetype and freetype-hinting packages helps.</p>
    </section>
    <section>
      <title>compiling
            id3lib3.7-3.7.13-4 failed</title>
      <codeblock>ld: Undefined symbols:
ParseNumber(unsigned char const*, unsigned long)
ID3_Tag::operator[](unsigned long) const
ID3_Error::GetErrorDesc() const
ID3_Error::GetErrorFile() const
ID3_Error::GetErrorLine() const
ID3_Error::GetErrorType() const
ID3_Field::GetNumTextItems() const
ID3_Field::Size() const
make[2]: *** [id3info] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all-recursive-am] Error 2
### execution of make failed, exit code 2
Failed: compiling id3lib3.7-3.7.13-4 failed</codeblock>
      <p>
                If you have id3lib4-dev installed, remove it to build id3lib3.7.</p>
    </section>
    <section>
      <title>compiling
            gnome-panel-2.4.2-6 failed</title>
      <codeblock>checking for intltool &gt;= 0.21... 0.29 found
checking for perl... /usr/bin/perl
configure: error: XML::Parser perl module is required for intltool
### execution of ./configure failed, exit code 1
Failed: compiling gnome-panel-2.4.2-6 failed</codeblock>
      <p>
                This is already fixed in cvs, it was a missing dep on xml-parser-pm.</p>
      <p>
                Make sure that you have the correct &quot;flavor&quot; of xml-parser-pm installed
            corresponding to the version of perl you are using. 
                For most 10.3 users, this would be xml-parser-pm581 while for most 10.2
            users it would be xml-parser-pm560.</p>
    </section>
    <section>
      <title>compiling
            uri-pm581-1.28-12 failed</title>
      <codeblock>make: *** [test_dynamic] Error 45
### execution of make failed, exit code 2
Failed: compiling uri-pm581-1.28-12 failed</codeblock>
      <p>
                As a workaround you can do:</p>
      <codeblock>sudo apt-get update</codeblock>
      <codeblock>sudo apt-get install xml-parser-pm581</codeblock>
    </section>
    <section>
      <title>atk1
            BuildDepend WARNINGS</title>
      <codeblock>WARNING: The package gnome-terminal Depends on atk1,     
but atk1 only allows things to BuildDepend on it.
many similar warnings...</codeblock>
      <p>
                Many people have reported these warnings.</p>
      <p>
            The atk1 package in 10.3/unstable does not have the BuildDependsOnly
            tag that causes such warnings. 
            The solution of this mystery is that the version of atk1 in stable, which
            is older than the one in unstable, 
            is 1.4.1-2, whereas unstable has 1.4.1-1.</p>
      <p>
            It seems that at one of the cvs &quot;updates&quot; in unstable, the revision went
            from 2 to 1 instead of from 2 to 3.</p>
      <p>
            This is already fixed.</p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="finkcommander">
    <title>      /
FinkCommander
          /</title>
    <shorttitle>      /
FinkCommander
          /</shorttitle>
    <preface>
      <p>
            For more information, visit the:</p>
      <p>
        <link url="http://finkcommander.sourceforge.net/">FinkCommander
            Web site</link>
      </p>
      <p/>
    </preface>
    <section>
      <title>Latest version:</title>
      <p>
            The current version of FinkCommander is 0.5.3.</p>
      <p>
            This is primarily a bug fix release. </p>
      <p>
            Version 0.5.3 is included in the current Fink binary distribution.</p>
      <p>
                  For those who want to stay away from the CLI, there is an excellent
            piece of software called &quot;FinkCommander&quot;, 
                  made by Steven Burr, that provides a GUI front end to fink.</p>
      <p>
            &quot;FinkCommander is a graphical user interface for the Fink software packaging
            system for Mac OS X. 
            It provides an intuitive front-end to the Fink command-line tools for
            downloading and installing Unix software&quot;.</p>
      <p>
            If you are a beginner or use Fink regularly, FinkCommander will, without
            a doubt, make your life a lot easier.</p>
      <p>
            It displays at once, all available packages and their current status
            in your Fink installation. 
            Including the installed version, current binary version, current stable
            version, and lists the current unstable version, if enabled in the list
            view.</p>
      <p>
            It also shows the package description and to which category it belongs
            according to Fink's archive. 
            Another column shows you the status of the package, weather the version
            you have installed is current, outdated, or archived.</p>
      <p>
            You can run a fink or apt-get command by selecting a package or packages
            in the table (if the command is package specific) 
            and then choosing the appropriate command by menu, toolbar item or key
            combination. 
            In the buttom half of FinkCommander's window you will see the output
            message of the command you executed.</p>
      <p>
            In the FinkCommander Preferences panel you can configure Fink by changing
            the fink.conf file, and also set up Fink to use unstable packages or
            the packages from CVS, and in addition to source, 
            FinkCommander makes it clear when a binary package is available. 
            Often you might want to install a binary package first, in order to test
            the app, before installing the source version.</p>
      <p>
            FinkCommander provides an easy way to send </p>
      <codeblock>'feedback'</codeblock>
      <p> about the Fink packages you are using,
            straight to the Fink Developers. 
            It has separate positive and negative feedback commands in the Tools
            menu and the toolbar.</p>
      <p>
            If you find something not working in FinkCommander and you would like
            to file a bug report, 
            the Help menu includes an item that will take you straight to FinkCommander's
            bug reports page on SourceForge. 
            Be sure to include all details you can provide about the sequence of
            events that lead to the problem.</p>
      <p>Tip:</p>
      <p>
            Whenever you read that a new version of FinkCommander is available, if
            you kept the info file up-to date, you can then change the version number,
            and the next time you run 'fink update-all' it will give you the new
            version. Much simpler than finding the download site, download it, unpack
            it, and move it by hand.</p>
      <codeblock>Features:</codeblock>
      <p>
            Since version 0.5.0 it includes a package browser, 
            which provides a Finder-like interface for viewing the files installed
            on your system by a particular Fink package.</p>
      <p>
            &quot;The browser includes most of the functionality of a Finder window, including
            drag and drop and double clicking to open. 
            You can open a new browser for an installed package via the Tools menu,
            the contextual menu for the package table or a toolbar item&quot;.</p>
      <p>
            &quot;FinkCommander now provides easy access to a package's .info and .patch files, which are used by Fink to build and install
            packages from source. 
            You can open these files with commands in the File menu, by double clicking
            a package name or by dragging selected packages from the table to an
            icon. 
            You can also copy the files by dragging them to a Finder window or the
            Desktop&quot;.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/fcommander.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://sourceforge.net/project/showfiles.php?group_id=48896">Download
            FinkCommander</link>
      </p>
      <p>
        <link url="http://sourceforge.net/mailarchive/forum.php?forum_id=9724">FinkCommander-users
            mailing list</link>
      </p>
    </section>
    <section>
      <title>Troubleshooting:</title>
      <p>
            If you find FinkCommander is not working as it should, the first thing
            you should try is &quot;fink list&quot; 
            at the command line to make sure there's nothing wrong with your Fink
            installation.</p>
      <p>
            Check your environment settings in your shell startup script(s) against
            the settings in Preferences:Environment.  
            If you find any differences that might affect fink, change FC's to match
            your script's.</p>
      <p>
            Delete your FC preferences:</p>
      <codeblock>~/Library/Preferences/com.sburrious.finkcommander.plist</codeblock>
      <p>
            Then run:</p>
      <codeblock>fink selfupdate-cvs</codeblock>
      <p>
            and</p>
      <codeblock>fink index</codeblock>
      <p>
            re run finkcommander</p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="install">
    <title>      /
          What to install? /</title>
    <shorttitle>      /
          What to install? /</shorttitle>
    <preface>
      <p>
                  This page only shows some of the packages that can be installed with
            Fink, but it will probably give a beginner an idea of what is available.
                  Fink currently lists in its database (as 1-29-03) 2114 packages you
            could install, including the unstable tree and the latest packages from
            CVS.
          </p>
      <p/>
    </preface>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">Screenshots</link>
      </p>
      <p>
        <link url="#top2">The
            Gimp</link>
      </p>
      <p>
        <link url="#top3">Abiword</link>
      </p>
      <p>
        <link url="#top4">Gnumeric</link>
      </p>
      <p>
        <link url="#top5">Siag</link>
      </p>
      <p>
        <link url="#top6">Lyx</link>
      </p>
      <p>
        <link url="#top7">Xmms</link>
      </p>
      <p>
        <link url="#top8">Xmms-gdancer</link>
      </p>
      <p>
        <link url="#top9">Xemacs</link>
      </p>
      <p>
        <link url="#top10">Pymol</link>
      </p>
      <p>
        <link url="#top11">Maxima</link>
      </p>
      <p>
        <link url="#top12">StarPlot</link>
      </p>
      <p>
        <link url="#top13">Rasmol</link>
      </p>
      <p>
        <link url="#top14">Ghemical</link>
      </p>
      <p>
        <link url="#top15">Geomview</link>
      </p>
      <p>
        <link url="#top16">GPeriodic</link>
      </p>
      <p>
        <link url="#top17">Grace</link>
      </p>
      <p>
        <link url="#top18">Scigraphica</link>
      </p>
      <p>
        <link url="#top19">Xephem</link>
      </p>
      <p>
        <link url="#top20">Oregano</link>
      </p>
      <p>
        <link url="#top21">KDE</link>
      </p>
      <p>
        <link url="#top22">GNOME</link>
      </p>
      <p>
        <link url="#top23">Vim61</link>
      </p>
      <p>
        <link url="#top24">Ncurses</link>
      </p>
      <p>
        <link url="#top25">LAME</link>
      </p>
      <p>
        <link url="#top26">Xchat</link>
      </p>
      <p>
        <link url="#top27">Fileutils</link>
      </p>
      <p>
        <link url="#top28">Autocutsel</link>
      </p>
      <p>
        <link url="#top29">Ispell</link>
      </p>
      <p>
        <link url="#top30">Screen</link>
      </p>
      <p>
        <link url="#top31">Rsync</link>
      </p>
      <p>
        <link url="#top32">Macosx-file-pm</link>
      </p>
      <p>
        <link url="#top33">Deborphan</link>
      </p>
      <p>
        <link url="#top34">Fix-fink</link>
      </p>
      <p>
        <link url="#top35">Pine</link>
      </p>
      <p>
        <link url="#top36">Openssh</link>
      </p>
      <p>
        <link url="#top37">Mysql</link>
      </p>
      <p>
        <link url="#top38">Postgresql</link>
      </p>
      <p>
        <link url="#top39">Mozilla</link>
      </p>
      <p>
        <link url="#top40">Lynx</link>
      </p>
      <p>
        <link url="#top41">ImageMagick</link>
      </p>
    </section>
    <section>
      <title>Screenshots</title>
      <p>
        <link url="http://homepage.mac.com/sao1/PhotoAlbum7.html">XDarwin</link>
      </p>
      <p>
        <link url="http://homepage.mac.com/sao1/PhotoAlbum9.html">Apple's
            X11</link>
      </p>
    </section>
    <section>
      <title>The
            Gimp</title>
      <p>
                  The GIMP is a great image editing and painting program that competes
            with any commercial application available, 
                  yet is developed and distributed as open-source software. 
                  You can use it as a simple paint program, an expert quality photo
            retouching program, an online batch processing system, 
                  a mass production image renderer, an image format converter, for image
            composition and image authoring, etc.</p>
      <p>
            The GIMP interface is user friendly, with many easy, time-saving features
            such as keyboard shortcuts, tear-off menus,  and drag-and-drop colors.
            It is easily expandable and can be used with plug-ins and extensions
            to do just about anything. 
            In addition, from the most simple operation to the most complex, everything
            can be scripted through the advanced scripting interface.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/gimp.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.gimp.org/">Information</link>
      </p>
      <p>
        <link url="http://www.gimp.org/docs.html">Documentation</link>
      </p>
      <p>Fink
            Package gimp:</p>
      <p>
        <em>Maintainer
            -- Alexander Strange</em>
      </p>
    </section>
    <section>
      <title>Abiword</title>
      <p>
                  AbiWord is an open source word processing program similar to Microsoft  Word. 
                  This free word processor is able to read and write most documents
            in Word's *.doc file format.</p>
      <p>
                  It is suitable for typing papers, letters, reports, memos, and so
            forth. 
                  It comes with a number of useful features: support for plug-ins and
            scripts; a spell checker, 2- and 3-column text formatting, and image
            importing.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/abiword.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.abisource.com/">Information</link>
      </p>
      <p>
        <link url="http://www.abisource.com/help/en-US/">Abiword
            Help</link>
      </p>
      <p>Fink
            Package abiword:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Gnumeric</title>
      <p>
                  The Gnumeric spreadsheet is part of the GNOME desktop environment:
            a project to create a free, user-friendly desktop environment. 
                  Gnumeric will import your existing Excel, 1-2-3, Applix, Sylk, XBase
            and Oleo files.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/gnumeric.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.gnome.org/projects/gnumeric/">Information</link>
      </p>
      <p>
        <link url="http://www.gnome.org/projects/gnumeric/doc/index.html">User
            Manual</link>
      </p>
      <p>
        <link url="http://www.gnome.org/projects/gnumeric/faq.shtml">FAQ</link>
      </p>
      <p>Fink
            Package gnumeric:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>Siag</title>
      <p>
                  Siag Office is a tightly integrated, free office package. 
                  It consists of the spreadsheet Siag, the word processor PW, the animation
            program Egon, the text editor XedPlus, 
                  the file manager Xfiler and the previewer Gvu.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/siag.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://siag.nu/">Information</link>
      </p>
      <p>Fink
            Package siag:</p>
      <p>
        <em>Maintainer --
            Martin Costabel</em>
      </p>
    </section>
    <section>
      <title>LyX</title>
      <p>
                  LyX is the first WYSIWYM document processor. Is an advanced open source
            document processor running on many Unix platforms 
                  (including MacOS X), OS/2, and under Windows/Cygwin.</p>
      <p>
                  Note that all these ports use the same xforms interface and need an
            X server. Unlike standard word processors, 
                  LyX encourages an approach to writing based on the structure of your
            documents, not their appearance.
                  LyX lets you concentrate on writing, leaving details of visual layout
            to the software.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/lyx.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.lyx.org/">Information</link>
      </p>
      <p>
        <link url="http://www.lyx.org/about/">Documentation</link>
      </p>
      <p>Fink
            Package lyx:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Xmms</title>
      <p>
                  XMMS is a great MP3 player.</p>
      <p>
            It can play MP3s, convert MP3s to WAV files suitable for using to make
            an audio CD and be used as an audio CD player. 
            But, MP3s are what this program was designed for. And it does it very
            well. If you're into MP3s you should try it out.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/xmms.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.xmms.org/">Information</link>
      </p>
      <p>
        <link url="http://www.xmms.org/documentation.html">Documentation</link>
      </p>
      <p>
        <link url="http://www.xmms.org/skins.php">Download
            Skins</link>
      </p>
      <p>Fink
            Package xmms:</p>
      <p>
        <em>Maintainer --
            Masanori Sekino</em>
      </p>
    </section>
    <section>
      <title>Xmms-gdancer</title>
      <p>
                  There is a 'visualization plug-in' for xmms that you can install with
            fink, named &quot;xmms-gdancer&quot;, 
                  I enjoy it quite a lot (The package xmms-gdancer 0.4.5-2 was ported
            by Ben Hines). 
                  I have fun seeing all these characters dancing to the salsa rythm
            I listened, 
                  as GDancer is a plugin to animate characters to the beat of the music.</p>
      <p>
                  The default character is Space Ghost, but you can use and make your
            own characters through themes. 
                  I particularly enjoy seeing Laetitia Casta, alien, 
                  Dancing Calvin from Calvin and Hobbes and Fred Flintstone all together
            shaking to the beat of a merengue.</p>
      <p>
        <link url="http://figz.com/gdancer/">Information</link>
      </p>
      <p>
        <link url="http://figz.com/gdancer/themes.php?...198ef2c3de85feb">Download
            Themes</link>
      </p>
      <p>Fink
            Package xmms-gdancer:</p>
      <p>
        <em>Maintainer --
            Ben Hines</em>
      </p>
    </section>
    <section>
      <title>Xemacs</title>
      <p>
                  XEmacs is a highly customizable open source text editor and application
            development system. 
                  Its emphasis is on modern graphical user interface support and an
            open software development mode.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/xemacs.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.xemacs.org">Information</link>
      </p>
      <p>
        <link url="http://www.xemacs.org/Documentation/index.html">Documentation</link>
      </p>
      <p>
        <link url="http://www.xemacs.org/Links/customization.html">Customization</link>
      </p>
      <p>Fink
            Package xemacs:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Pymol</title>
      <p>
                  DeLano, W.L. The PyMOL Molecular Graphics System (2002) DeLano Scientific,
            San Carlos, CA, USA.</p>
      <p>
            PyMOL is a molecular graphics system with an embedded Python interpreter
            designed for real-time visualization 
            and rapid generation of high-quality molecular graphics images and animations.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/pymol.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://pymol.sourceforge.net">Information</link>
      </p>
      <p>Fink
            Package pymol:</p>
      <p>
        <em>Maintainer --
            Matt Stephenson</em>
      </p>
    </section>
    <section>
      <title>Maxima</title>
      <p>
                  Symbol manipulation program.</p>
      <p>
            Maxima is a descendant of the symbol manipulation program Macsyma, which
            had its roots in the late 1960s at MIT. 
            Its abilities include basic algebraic manipulation, symbolic integration,
            2D and 3D plotting, and an ODE solver.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/maxima.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://maxima.sourceforge.net">Information</link>
      </p>
      <p>Fink
            Package maxima:</p>
      <p>
        <em>Maintainer --
            William McCallum</em>
      </p>
    </section>
    <section>
      <title>StarPlot</title>
      <p>
                  Viewer for 3-D perspective star charts.</p>
      <p>
            Starplot is a program which can be used to view star charts in a three-dimensional
            perspective, using a GTK+ interface.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/starplot.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.princeton.edu/~kmccarty/starplot.html">Information</link>
      </p>
      <p>Fink
            Package starplot:</p>
      <p>
        <em>Maintainer --
            Jeremy Higgs</em>
      </p>
    </section>
    <section>
      <title>RasMol</title>
      <p>
                  RasMol is a molecular graphics program intended for the visualisation
            of proteins, nucleic acids and small molecules. 
                  The program is aimed at display, teaching and generation of publication
            quality images.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/rasmol.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.OpenRasMol.org/">Information</link>
      </p>
      <p>Fink
            Package rasmol:</p>
      <p>
        <em>Maintainer --
            Andrew Rohl</em>
      </p>
    </section>
    <section>
      <title>Ghemical</title>
      <p>
                  Molecular modelling environment for GNOME.</p>
      <p>
            Ghemical is written in C++. It has a graphical user interface (in fact,
            a couple of them), 
            and it supports both quantum-mechanics (semi-empirical and ab initio)
            models and molecular mechanics models 
            (there is an experimental Tripos 5.2-like force field for organic molecules).</p>
      <p>
            Also a tool for reduced protein models is included. 
            Geometry optimization, molecular dynamics and a large set of visualization
            tools are currently available.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/ghemical.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.bioinformatics.org/ghemical">Information</link>
      </p>
      <p>Fink
            Package ghemical:</p>
      <p>
        <em>Maintainer --
            Matt Stephenson</em>
      </p>
    </section>
    <section>
      <title>Geomview</title>
      <p>
                  Geomview is an interactive 3D viewing program for Unix. 
                  It lets you view and manipulate 3D objects: you use the mouse to rotate,
            translate, zoom in and out, etc. 
                  It can be used as a standalone viewer for static objects or as a display
            engine for other programs which produce dynamically changing geometry.</p>
      <p>
                  It can display objects described in a variety of file formats. It
            comes with a wide selection of example objects, 
                  and you can create your own objects too.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/geomview.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.geomview.org">Information</link>
      </p>
      <p>Fink
            Package geomview:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>GPeriodic</title>
      <p>
                  Gperiodic displays a periodic table of the elements, allowing you
            to browse through the elements, and view detailed information about each
            element.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/gperiodic.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://gperiodic.seul.org">Information</link>
      </p>
      <p>Fink
            Package GPeriodic:</p>
      <p>
        <em>Maintainer --
            Matt Stephenson</em>
      </p>
    </section>
    <section>
      <title>Grace</title>
      <p>
                  Grace is a Motif/Lesstif application for two-dimensional data visualization.</p>
      <p> 
                  Grace can transform the data using free equations, FFT, cross- and
            auto-correlation, differences, integrals, histograms, and much more.
                  The generated figures are of high quality. Grace is a very convenient
            tool for data inspection, data transformation, and for making figures
            for publications.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/grace.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://plasma-gate.weizmann.ac.il/Grace/">Information</link>
      </p>
      <p>Fink
            Package grace:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Scigraphica</title>
      <p>
                  SciGraphica is a scientific application for data analysis and technical
            graphics. It pretends to be a clone of the popular commercial (and expensive)
            application &quot;Microcal Origin&quot;.</p>
      <p> 
                  It fully supplies plotting features for 2D, 3D and polar charts. The
            aim is to obtain a fully-featured, cross-plattform, user-friendly, self-growing
            scientific application. 
                  It is free and open-source, released under the GPL license.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/scigraphica.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://scigraphica.sourceforge.net">Information</link>
      </p>
      <p>Fink
            Package scigraphica:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Xephem</title>
      <p>
                  Astronomical Software Ephemeris</p>
      <p>
            The brainchild of programmer Elwood Downey, XEphem is a star-charting,
            sky-simulating, ephemeris-generating celestial virtuoso that can do just
            about everything ...</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/xephem.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.clearskyinstitute.com/xephem/">Information</link>
      </p>
      <p>Fink
            Package xephem:</p>
      <p>
        <em>Maintainer --
            Peter O'Gorman</em>
      </p>
    </section>
    <section>
      <title>Oregano</title>
      <p>
                  Oregano is an application for schematic capture and simulation of
            electrical circuits. 
                  For the actual simulation, Oregano acts as a front-end for SPICE,
            which is more or less the industry standard for circuit simulation.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/oregano.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://oregano.codefactory.se/">Information</link>
      </p>
      <p>Fink
            Package oregano:</p>
      <p>
        <em>Maintainer --
            Finlay Dobbie</em>
      </p>
    </section>
    <section>
      <title>KDE</title>
      <p>
        <em>KDE
            - a full-blown Integrated Desktop Environment</em>
      </p>
      <p>
            KDE provides a complete desktop environment, including a web browser,
            a file manager, a window manager, a help system, a configuration system,
            uncountable tools and utilities, and an ever increasing number of applications,
            including but not limited to mail and news clients, drawing programs,
            a PostScript  and a DVI viewer and so forth.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/kde.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.kde.org/">Information</link>
      </p>
      <p>
        <link url="http://www.kde.org/faq.html">FAQ</link>
      </p>
      <p>
        <link url="http://www.art.gnome.org">Themes</link>
      </p>
      <p>
        <link url="http://fink.sourceforge.net/pdb/section.php/kde">Fink
            KDE List of Packages</link>
      </p>
    </section>
    <section>
      <title>GNOME</title>
      <p>
                  The GNOME project was the first to provide a fully free desktop environment
            for Unix-like systems. 
                  From the start, the main objective of GNOME has been to provide a
            user friendly suite of applications and an easy-to-use desktop.</p>
      <p> 
                  The GNOME project acts as an umbrella, the major components of GNOME
            are:</p>
      <p>
            The GNOME desktop: an easy to use windows-based environment for users.
            The GNOME development platform: a rich collection of tools, libraries,
            and components to develop powerful applications on Unix. 
            The GNOME Office: A set of office productivity applications.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/gnome.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.gnome.org/">Information</link>
      </p>
      <p>
        <link url="http://www.gnome.org/faqs/users-faq/">FAQ</link>
      </p>
      <p>
        <link url="http://sunshineinabag.co.uk/">Themes</link>
      </p>
      <p>
        <link url="http://fink.sourceforge.net/pdb/section.php/gnome">Fink
            Gnome List of Packages</link>
      </p>
    </section>
    <section>
      <title>Vim61</title>
      <p>
                  Vim is a highly configurable text editor built to enable efficient
            text editing. 
                  It is an improved version of the vi editor distributed with most UNIX
            systems.</p>
      <p>  
                  Many new features have been added: multi-level undo, syntax highlighting,
            command line history, on-line help, filename completion, block operations,
            etc.  
                  There is also a Graphical User Interface (GUI) available. This editor
            is very useful for editing programs and other plain ASCII files.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/vim.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://vim.sourceforge.net/">Information</link>
      </p>
      <p>
        <link url="http://vimdoc.sourceforge.net/">Documentation</link>
      </p>
      <p>Fink
            Package vim61:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Ncurses</title>
      <p>
                  Ncurses (new curses) is a freely distributable &quot;clone&quot; of System V
            Release 4.0 (SVr4) curses. 
                  The Curses library forms a wrapper over working with raw terminal
            codes, and provides highly flexible and efficient API (Application Programming
            Interface).</p>
      <p> 
                  It provides functions to move the cursor, create windows, produce
            colors, play with the mouse etc. 
                  The Application programs need not worry about the underlying terminal
            capabilities.</p>
      <p>
        <link url="http://www.gnu.org/software/ncurses/">Information</link>
      </p>
      <p>
        <link url="http://dickey.his.com/ncurses/ncurses.faq.html#what_is_it">Documentation</link>
      </p>
      <p>Fink
            Package ncurses:</p>
      <p>
        <em>Maintainer --
            Max Horn</em>
      </p>
    </section>
    <section>
      <title>LAME</title>
      <p>
                  LAME is an educational tool to be used for learning about MP3 encoding.
                  The goal of the LAME project is to use the open source model to improve
            the psycho acoustics, noise shaping and speed of MP3.</p>
      <p> 
                  LAME is not for everyone - it is distributed as source code only and
            requires the ability to use a C compiler. 
                  However, many popular ripping and encoding programs include the LAME
            encoding engine.</p>
      <p>
        <link url="http://www.mp3dev.org/mp3/">Information</link>
      </p>
      <p>
        <link url="http://www.mp3dev.org/mp3/doc/html/index.html">Documentation</link>
      </p>
      <p>Fink
            Package LAME:</p>
      <p>
        <em>Maintainer --
            Sylvain Cuaz</em>
      </p>
    </section>
    <section>
      <title>Xchat</title>
      <p>
                  Xchat is an IRC client for UNIX operating systems.</p>
      <p> 
                  I.R.C. is Internet Relay Chat. Xchat runs on most BSD and POSIX compliant
            operating systems. Xchat is a graphical IRC client. 
                  It runs under the X Window System and uses the GTK+ toolkit. Optionally
            it can be compiled to use Gnome.</p>
      <p>
        <link url="http://www.xchat.org/">Information</link>
      </p>
      <p>
        <link url="http://www.xchat.org/docs.html">Documentation</link>
      </p>
      <p>Fink
            Package xchat:</p>
      <p>
        <em>Maintainer --
            Max Horn</em>
      </p>
    </section>
    <section>
      <title>Fileutils</title>
      <p>
                  The GNU File Utilities are the basic file-manipulation utilities of
            the GNU operating system.</p>
      <p>
                  The tools supplied with this package are:</p>
      <p>         
                        *       chgrp - Changes file group ownership.</p>
      <p> 
                        *       chown - Changes file ownership. </p>
      <p>
                        *       chmod - Changes file permissions. </p>
      <p>
                        *       cp - Copies files. </p>
      <p>
                        *       dd - Copies and converts a file. </p>
      <p>
                        *       df - Shows disk free space on filesystems.</p>
      <p> 
                        *       dir - Gives a brief directory listing. </p>
      <p>
                        *       dircolors - Setup program for the color output of GNU ls.</p>
      <p> 
                        *       du - Shows disk usage on filesystems. </p>
      <p>
                        *       install - Copies file and sets its permissions. </p>
      <p>
                        *       ln - Creates file links. </p>
      <p>
                        *       ls - Lists directory contents. </p>
      <p>
                        *       mkdir - Creates directories. </p>
      <p>
                        *       mkfifo - Creates FIFOs (named pipes). </p>
      <p>
                        *       mknod - Creates special files. </p>
      <p>
                        *       mv - Moves files. </p>
      <p>
                        *       rm - Removes (deletes) files. </p>
      <p>
                        *       rmdir - Removes empty directories. </p>
      <p>
                        *       shred - Destroy data in files. </p>
      <p>
                        *       sync - Synchronizes filesystem buffers and disk. </p>
      <p>
                        *       touch - Changes file timestamps. </p>
      <p>
                        *       vdir - Long directory listing.</p>
      <p>
        <link url="http://www.gnu.org/software/fileutils/fileutils.html">Information</link>
      </p>
      <p>
        <link url="http://www.gnu.org/manual/fileutils/index.html">Documentation</link>
      </p>
      <p>Fink
            Package fileutils:</p>
      <p>
        <em>Maintainer --
            Max Horn</em>
      </p>
    </section>
    <section>
      <title>Autocutsel</title>
      <p>
                  Merges two X11 cut buffers. Gives a working cut and paste between
            Aqua and those X apps that only check one cut buffer.</p>
      <p>Usage Notes:</p>
      <p>
            just put 'autocutsel &amp;' in your ~/.xinitrc file.</p>
      <p>
            Make sure it's before the line that exec's the window manager and never
            returns! Don't just add it at the end, it won't be executed.</p>
      <p>
        <link url="http://www.lepton.fr/tools/autocutsel/">Information</link>
      </p>
      <p>Fink
            Package autocutsel:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Ispell</title>
      <p>
                  ispell is a fast screen-oriented spelling checker that shows you your
            errors in the context of the original file, 
                  and suggests possible corrections when it can figure them out. Compared
            to UNIX spell, it is faster and much easier to use. 
                  ispell can also handle languages other than English.</p>
      <p>
        <link url="http://fmg-www.cs.ucla.edu/fmg-members/geoff/ispell.htm">Information</link>
      </p>
      <p>Fink
            Package ispell:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Screen</title>
      <p>
                  Screen is a full-screen window manager that multiplexes a physical
            terminal between several processes, typically interactive shells. 
                  Each virtual terminal provides the functions of the DEC VT100 terminal
            and, in addition, several control functions from the ANSI X3.64 
                  (ISO 6429) and ISO 2022 standards (e.g., insert/delete line and support
            for multiple character sets).</p>
      <p> 
                  There is a scrollback history buffer for each virtual terminal and
            a copy-and-paste mechanism that allows the user to move text regions
            between windows. 
                  When screen is called, it creates a single window with a shell in
            it (or the specified command) and then gets out of your way so that you
            can use the program as you normally would.</p>
      <p> 
                  Then, at any time, you can create new (full-screen) windows with other
            programs in them (including more shells), kill the current window, view
            a list of the active windows, 
                  turn output logging on and off, copy text between windows, view the
            scrollback history, switch between windows, etc. 
                  All windows run their programs completely independent of each other.
                  Programs continue to run when their window is currently not visible
            and even when the whole screen session is detached from the users terminal.</p>
      <p>
        <link url="http://www.gnu.org/software/screen/screen.html">Information</link>
      </p>
      <p>
        <link url="http://groups.yahoo.com/group/gnu-screen">Discussion
            Forum</link>
      </p>
      <p>Fink
            Package screen:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Rsync</title>
      <p>
                   rsync is a file transfer program for Unix systems. rsync uses the
            &quot;rsync algorithm&quot; which provides a very fast method for bringing remote
            files into sync. 
                   It does this by sending just the differences in the files across
            the link, without requiring that both sets of files are present at one
            of the ends of the link beforehand.</p>
      <p> 
            Some features of rsync include:</p>
      <p>
                        *       can update whole directory trees and filesystems</p>
      <p> 
                        *       optionally preserves symbolic links, hard links, file ownership,
            permissions, devices and times</p>
      <p> 
                        *       requires no special privilages to install </p>
      <p>
                        *       internal pipelining reduces latency for multiple files </p>
      <p>
                        *       can use rsh, ssh or direct sockets as the transport </p>
      <p>
                        *       supports anonymous rsync which is ideal for mirroring </p>
      <p>
        <link url="http://www.rsync.org/">Information</link>
      </p>
      <p>Fink
            Package rsync:</p>
      <p>
        <em>Maintainer --
            Bill Bumgarner</em>
      </p>
    </section>
    <section>
      <title>Macosx-file-pm</title>
      <p>
                  Is a collection of modules that allows you to do what binaries in
            /Developer/Tools allows you to do directly via perl. 
                  You can implement your own CpMac, MvMac, GetFileInfo and SetFile without
            calling these binaries.</p>
      <p> 
            Scripts:</p>
      <p>                        
            pcpmac      - CpMac reimplemented</p>
      <p>
            pmvmac     - MvMac reimplemented</p>
      <p>
            pgetfinfo    - GetFileInfo reimplemented</p>
      <p>
            psetfinfo    - SetFile reimplemented</p>
      <p>
            psync         - update copy utility</p>
      <codeblock>About Psync</codeblock>
      <p>
            Psync does an update copy.  It compares source directory and target directory
            at first, then erases items that are nonexistent on source 
            directory if specified and finally copies everything on source directory.
            Items with the same modification date and (data fork) size remain untouched,
            saving time on operation.</p>
      <p>
            I love this script, thanks to psync I saved myself a lot of headaches
            in many occasions, I use it regularly like this:</p>
      <codeblock>sudo psync -d /Users/pm /Volumes/backupdisk/backup</codeblock>
      <p>
            To produce a copy of my home directory (and all subdirectories) inside
            the backup directory on &quot;backupdisk&quot;. 
            And, the next time you use it with the same command, it will sync the
            backup with the active copy, 
            deleting files on the backup that have been deleted on the main copy
            (if you don't want this to happen just take out the &quot;-d&quot; flag), and only
            copying files that have changed.</p>
      <p>
            According to the man pages, it is also possible to backup everything
            in the startup volume, all you have to say is:</p>
      <codeblock>sudo psync -d / /Volumes/I backup</codeblock>
      <p>
            And the resulting backup volume is fully-bootable copy thereof.  Note
            `sudo' or root privilege is necessary to restore file ownership.</p>
      <p>
        <link url="http://search.cpan.org/search?dist=MacOSX-File">Information</link>
      </p>
      <p>
        <link url="http://fink.sourceforge.net/pdb/package.php/macosx-file-pm">sourceforge.net</link>
      </p>
      <p>Fink
            Package macosx-file-pm:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Deborphan</title>
      <p>
                  deborphan finds packages that have no packages depending on them.
                  The default operation is to search only within the libs and oldlibs
            sections, to hunt down unused libraries.</p>
      <p>
        <link url="http://www.tribe.eu.org/deborphan/">Information</link>
      </p>
      <p>Fink
            Package deborphan:</p>
      <p>
        <em>Maintainer --
            Masanori Sekino</em>
      </p>
    </section>
    <section>
      <title>Fix-fink</title>
      <p>
                  This utility will examine your fink installation to determine if any
            of your dynamic libraries have been linked to an outdated version (version
            50.0.0) of libSystem.B.dylib.</p>
      <p>  
                  Having links to that version has caused a number of problems among
            fink users, particularly with certain gnome-related packages and with
            gnumeric.
            Once you have performed a CVS update and have made the fix-fink-1.0-1.info
            file available to your fink search tree, 
            &quot;fink install fix-fink&quot; will install the utility, and &quot;fix-fink&quot; will
            run it.&quot;</p>
      <p>
        <link url="http://fink.sourceforge.net/">Information</link>
      </p>
      <p>Fink
            Package fix-fink:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>Pine</title>
      <p>
                  Pine - a Program for Internet News &amp; Email - is a tool for reading, sending, and managing electronic messages.
                  Pine was developed by Computing &amp; Communications at the University of Washington.</p>
      <p> 
                  Though originally designed for inexperienced email users, Pine has
            evolved to support many advanced features, and an ever-growing 
                  number of configuration and personal-preference options.</p>
      <p>
        <link url="http://www.washington.edu/pine/">Information</link>
      </p>
      <p>
        <link url="http://www.washington.edu/pine/getpine/non-UW.html#Documentation">Documentation</link>
      </p>
      <p>Fink
            Package pine:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Openssh</title>
      <p>
                  OpenSSH is a FREE version of the SSH protocol suite of network connectivity
            tools that increasing numbers of people on the Internet are coming to
            rely on. 
                  Many users of telnet, rlogin, ftp, and other such programs might not
            realize that their password is transmitted across the Internet unencrypted,
            but it is.</p>
      <p> 
                  OpenSSH encrypts all traffic (including passwords) to effectively
            eliminate eavesdropping, connection hijacking, and other network-level
            attacks. 
                  Additionally, OpenSSH provides a myriad of secure tunneling capabilities,
            as well as a variety of authentication methods.</p>
      <p>
        <link url="http://www.openssh.com/">Information</link>
      </p>
      <p>
        <link url="http://www.openssh.com/manual.html">Documentation</link>
      </p>
      <p>Fink
            Package openssh:</p>
      <p>
        <em>Maintainer --
            Max Horn</em>
      </p>
    </section>
    <section>
      <title>Mysql</title>
      <p>
                  The MySQL database server embodies an ingenious software architecture
            that maximises speed and customisability. 
                  Extensive reuse of pieces of code within the software and an ambition
            to produce minimalistic but functionally rich features have resulted
            in a 
                  database management system unmatched in speed, compactness, stability
            and ease of deployment.</p>
      <p> 
                  The unique separation of the core server from the table handler makes
            it possible to run MySQL under strict transaction control or with 
                  ultrafast transactionless disk access, whichever is most appropriate
            for the situation.</p>
      <p>
        <link url="http://www.mysql.com/">Information</link>
      </p>
      <p>
        <link url="http://www.mysql.com/documentation/index.html">Documentation</link>
      </p>
      <p>Fink
            Package mysql:</p>
      <p>
        <em>Maintainer --
            None</em>
      </p>
    </section>
    <section>
      <title>Postgresql</title>
      <p>
                  PostgreSQL, the world's most advanced Open Source Object-based Relational
            Database Management System (ORBMS), 
                  now offers companies the security of a Replication Server, providing
            data backup, disaster recovery, 
                  and business continuity solutions previously limited to more costly
            commercial RDBMS packages.</p>
      <p> 
                  Replication is an important requirement for commercial applications,
            and an essential set of utilities for supporting the expanding market
            of PostgreSQL servers worldwide.</p>
      <p>
        <link url="http://www.pgsql.com/">Information</link>
      </p>
      <p>
        <link url="http://www.ca.postgresql.org/users-lounge/">Documentation</link>
      </p>
      <p>Fink
            Package postgresql:</p>
      <p>
        <em>Maintainer --
            Benjamin Reed</em>
      </p>
    </section>
    <section>
      <title>Mozilla</title>
      <p>
                  Mozilla is an open-source web browser and toolkit, designed for standards
            compliance, performance and portability. 
                  A full-fledged browser suite based on the latest Internet standards
            as well as a cross-platform toolkit, 
                  Mozilla 1.0 is targeted at the developer community and enables the
            creation of Internet-based applications.</p>
      <p> 
                  It was developed in an open source environment and built by harnessing
            the creative powers of thousands of programmers on the Internet, incorporating
            their best enhancements.</p>
      <p>
            By offering a set of components that can be used in a wide range of applications,
            are all open source, 
            free of charge and have been tested through their use in Mozilla 1.0's end-user applications, Mozilla 1.0 enables developers to build applications
            for a cross-platform, network-centric world.</p>
      <p>
        <link url="http://www.mozilla.org/">Information</link>
      </p>
      <p>
        <link url="http://www.mozilla.org/start/1.0/guide/">Documentation</link>
      </p>
      <p>Fink
            Package mozilla:</p>
      <p>
        <em>Maintainer --
            Masanori Sekino</em>
      </p>
    </section>
    <section>
      <title>Lynx</title>
      <p>
                  Lynx is a fully-featured World Wide Web (WWW) client for users running
            cursor-addressable, character-cell display devices 
                  (e.g., vt100 terminals, vt100 emulators running on PCs or Macs, or
            any other character-cell display).</p>
      <p> 
                  It will display Hypertext Markup Language(HTML) documents containing
            links to files on the local system, 
                  as well as files on remote systems running http, gopher, ftp, wais,
            nntp, finger, or cso/ph/qi servers, and services accessible via logins
            to telnet, tn3270 or rlogin accounts.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/lynx.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://lynx.isc.org/">Information</link>
      </p>
      <p>
        <link url="http://lynx.isc.org/lynx2.8.4/lynx2-8-4/lynx_help/Lynx_users_guide.html">Documentation</link>
      </p>
      <p>Fink
            Package lynx:</p>
      <p>
        <em>Maintainer --
            Alexander Strange</em>
      </p>
    </section>
    <section>
      <title>ImageMagick</title>
      <p>
                  ImageMagickTM is a rich collection of tools and libraries to read,
            write, and manipulate an image in many image formats (over 68 major formats).       
                  This includes the most popular formats such as TIFF, JPEG, PNG, PDF,
            PhotoCD, and GIF. The ImageMagick programs or tools are: display, animate,
                  combine, convert, import, identify, mogrify, montage, xtp.</p>
      <p>
            You can resize, rotate, sharpen, color reduce, or add special effects
            to an image and then save your work in the same or a different image
            format. 
            You can create images dynamically, making it suitable for Web applications.
            Image processing operations are available from the command line, as well
            as through C, C++, Perl, or Java programming interfaces.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/imagemagick.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.imagemagick.org/">Information</link>
      </p>
      <p>
        <link url="http://www.imagemagick.org/www/tools.html">ImageMagick
            Tools</link>
      </p>
      <p>
        <link url="http://www.imagemagick.org/www/Magick.html">FAQ</link>
      </p>
      <p>Fink
            Package ImageMagick:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="utils">
    <title>      /
          Utilities /</title>
    <shorttitle>      /
          Utilities /</shorttitle>
    <preface>
      <p>
                  The following are some of the Unix utilities you can install with
            Fink.</p>
      <p/>
    </preface>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">align</link>
      </p>
      <p>
        <link url="#top2">bsdmktemp</link>
      </p>
      <p>
        <link url="#top3">di</link>
      </p>
      <p>
        <link url="#top4">Diffutils</link>
      </p>
      <p>
        <link url="#top5">fhist</link>
      </p>
      <p>
        <link url="#top6">num-utils</link>
      </p>
      <p>
        <link url="#top7">fileutils</link>
      </p>
      <p>
        <link url="#top8">Findutils</link>
      </p>
      <p>
        <link url="#top9">gawk</link>
      </p>
      <p>
        <link url="#top10">pstree</link>
      </p>
      <p>
        <link url="#top11">tree</link>
      </p>
      <p>
        <link url="#top12">xtail</link>
      </p>
    </section>
    <section>
      <title>align</title>
      <codeblock>Text filter that vertically aligns columns</codeblock>
      <p>

            Align is a general-purpose text filter tool that helps vertically align columns
            in string-separated tables of input text. With whitespace-separated columns,
            you can often use it without arguments and it'll guess the right thing
            to do.  Otherwise, you can specify arguments to direct how the columns
            are separated on input and rejoined in the aligned output.</p>
      <p>
            Width, also included
            in this package is another general-purpose text filter tool that helps
            you work with the printing width or length of lines of input text.</p>
      <p>
            Running </p>
      <codeblock>align -h</codeblock>
      <p> and </p>
      <codeblock>width -h</codeblock>
      <p> will provide
            complete usage summaries.</p>
      <p>
        <link url="http://www.cs.indiana.edu/~kinzler/align">Information</link>
      </p>
    </section>
    <section>
      <title>bsdmktemp</title>
      <codeblock>Utility for safely making temporary files and directories.</codeblock>
      <p>
            Mktemp is a simple utility designed to make temporary file handling in
            shells scripts be safe and simple. 
            Traditionally, many shell scripts take the name of the program with the
            PID as a suffix and use that as a temporary filename. 
            This kind of naming scheme is predictable and the race condition it creates
            is easy for an attacker to win. 
            A safer, though still inferior approach is to make a temporary directory
            using the same naming scheme. 
            While this does allow one to guarantee that a temporary file will not
            be subverted, it still allows a simple denial of service attack. 
            For these reasons it is suggested that mktemp be used instead. 
            The mktemp utility takes the given filename template and overwrites a
            portion of it to create a unique filename.</p>
      <p>
        <link url="http://www.courtesan.com/mktemp/">Information</link>
      </p>
    </section>
    <section>
      <title>di</title>
      <p>
            di is a disk information utility.</p>
      <p>
            It displays everything (and more) that your 'df' command does. It features
            the ability to display your disk usage in whatever format you desire,
            prefer or are used to. 
            It is designed to be portable across many platforms.</p>
    </section>
    <section>
      <title>Diffutils</title>
      <codeblock>diff - cmp- diff3 - patch - sdiff</codeblock>
      <p>
            Computer users often find occasion to ask how two files differ. Perhaps
            one file is a newer version of the other file. 
            Or maybe the two files started out as identical copies but were changed
            by different people.</p>
      <codeblock>diff command</codeblock>
      <p>
            You can use the diff command to show differences between two files, or
            each corresponding file in two directories. 
            diff outputs differences between files line by line in any of several
            formats, selectable by command line options. 
            This set of differences is often called a 'diff' or 'patch'. 
            For files that are identical, diff normally produces no output; for binary
            (non-text) files, diff normally reports only that they are different.</p>
      <codeblock>cmp command</codeblock>
      <p>
            You can use the cmp command to show the offsets and line numbers where
            two files differ. cmp can also show all the characters that differ between
            the two files, side by side.</p>
      <codeblock>diff3 command</codeblock>
      <p>
            You can use the diff3 command to show differences among three files.
            When two people have made independent changes to a common original, diff3
            can report the differences between the original and the two changed versions,
            and can produce a merged file that contains both persons' changes together
            with warnings about conflicts.</p>
      <codeblock>patch command</codeblock>
      <p>
            patch takes comparison output produced by diff and applies the differences
            to a copy of the original file, producing a patched version. 
            With patch, you can distribute just the changes to a set of files instead
            of distributing the entire file set; 
            your correspondents can apply patch to update their copy of the files
            with your changes.</p>
      <codeblock>sdiff command</codeblock>
      <p>
            With sdiff, you can merge two files interactively based on a side-by-side
            -y format comparison.</p>
      <p>
        <link url="http://www.gnu.org/software/diffutils/diffutils.html">Information</link>
      </p>
      <p>
        <link url="http://www.gnu.org/manual/diffutils/index.html">Manual</link>
      </p>
    </section>
    <section>
      <title>fhist</title>
      <codeblock>Minimal file history tool</codeblock>
      <p>
            The FHist package contains 3 utilities, a file history tool 'fhist',
            a file comparison tool 'fcomp', and a file merging tool 'fmerge'. 
            All three are bundled together, because they all use the same minimal-difference
            algorithm.</p>
      <codeblock>fhist</codeblock>
      <p>
            Keeps track of versions of a file. It works correctly when given binary
            files as input. 
            The  fhist  program  is used to keep track of the successive versions
            of a file.  
            Using this program, you can remember all of your changes to a file, and
            get back any  one of the old versions.</p>
      <codeblock>fcomp</codeblock>
      <p>
            Compares two versions of a file, usually line-for-line textual comparison.
            It is capable of comparing two binary files byte-for-byte. 
            The fcomp program is used to compare text files, similar to the diff(1)
            program. Its advantage is that it always produces minimal differences,
            and so will never mis-sync when comparing  files. Its disadvantage is
            that it runs slower due to the extra work required to produce optimal
            differences. 
            However, for files differing by less than a few thousand lines, its performance
            is adequate.</p>
      <codeblock>fmerge</codeblock>
      <p>
            Merges together edits from two descendants of a file. The fmerge program
            is used to compare the changes between two different descendants of a
            base file, 
            and creates an output file which contains both sets of changes. 
            This is useful when two users both take the same version of a file and
            make independent edits to it, and then later want to create a file which
            contains both sets of edits.</p>
      <p>
        <link url="http://www.pcug.org.au/~millerp/fhist.html">Information</link>
      </p>
    </section>
    <section>
      <title>num-utils</title>
      <p>
            The 'num-utils' are a set of programs for dealing with numbers from the
            Unix command line. 
            Much like the other Unix command line utilities like grep, awk, sort,
            cut, etc. these utilities work on data from both standard in and data
            from files. 
            The utility set currently includes the following programs:</p>
      <p>average:</p>
      <p>
            A program for calculating the average of numbers. It will determine the
            average from all numbers on input.</p>
      <p>bound:</p>
      <p>
            Finds the boundary numbers (min and max) of input.</p>
      <p>numgrep:</p>
      <p>
            Like normal grep, but for sets of numbers.searches for different occurances
            of numbers through the use of numeric expressions.</p>
      <p>numprocess:</p>
      <p>
            Do mathmatical operations on numbers.</p>
      <p>numsum:</p>
      <p>
            Add up all the numbers.</p>
      <p>random:</p>
      <p>
            Generate a random number from a given expression.</p>
      <p>range:</p>
      <p>
            Generate a set of numbers in a range expression.</p>
      <p>round:</p>
      <p>
            Round each number according to it's value.</p>
      <p>
        <link url="http://suso.suso.org/programs/num-utils/">Information</link>
      </p>
    </section>
    <section>
      <title>fileutils</title>
      <codeblock>Common shell commands like ls, touch, chmod</codeblock>
      <p>
            The GNU file utilities have significant advantages over their standard
            UNIX counterparts, such as greater speed, additional options, and fewer
            arbitrary limits.</p>
      <p>
            The tools supplied with this package are:</p>
      <p>               
                        *       chgrp - Changes file group ownership.</p>
      <p> 
                        *       chown - Changes file ownership. </p>
      <p>
                        *       chmod - Changes file permissions. </p>
      <p>
                        *       cp - Copies files. </p>
      <p>
                        *       dd - Copies and converts a file. </p>
      <p>
                        *       df - Shows disk free space on filesystems.</p>
      <p> 
                        *       dir - Gives a brief directory listing. </p>
      <p>
                        *       dircolors - Setup program for the color output of GNU ls.</p>
      <p> 
                        *       du - Shows disk usage on filesystems. </p>
      <p>
                        *       install - Copies file and sets its permissions. </p>
      <p>
                        *       ln - Creates file links. </p>
      <p>
                        *       ls - Lists directory contents. </p>
      <p>
                        *       mkdir - Creates directories. </p>
      <p>
                        *       mkfifo - Creates FIFOs (named pipes). </p>
      <p>
                        *       mknod - Creates special files. </p>
      <p>
                        *       mv - Moves files. </p>
      <p>
                        *       rm - Removes (deletes) files. </p>
      <p>
                        *       rmdir - Removes empty directories. </p>
      <p>
                        *       shred - Destroy data in files. </p>
      <p>
                        *       sync - Synchronizes filesystem buffers and disk. </p>
      <p>
                        *       touch - Changes file timestamps. </p>
      <p>
                        *       vdir - Long directory listing.</p>
      <p>
        <link url="http://www.gnu.org/software/fileutils/fileutils.html">Information</link>
      </p>
    </section>
    <section>
      <title>Findutils</title>
      <p>Tools
            for searching for files</p>
      <codeblock>find - locate- xargs</codeblock>
      <p>1. 'find' is a program which searches a directory tree to find a file or group
            of files. It walks the directory tree and reports all occurences of a
            file matching the user's specifications. 
            find has several enhancements over the standard find command found on
            most systems. 
            Among other things, it has the option to measure times from the beginning
            of today rather than from 24 hours ago, and it has user-settable maximum
            search depth.</p>
      <p>2. 'locate' scans one or more databases of filenames and displays any matches.</p>
      <p>
            (similar to the &quot;fast find&quot; on many systems).</p>
      <p>3. 'xargs' builds and executes command lines by gathering together arguments it
            reads on the standard input. 
            Most often, these arguments are lists of file names generated by 'find'.
            Its -0 option works with GNU find to avoid problems with the standard
            xargs.</p>
      <p>
        <link url="http://www.gnu.org/software/findutils/findutils.html">Information</link>
      </p>
    </section>
    <section>
      <title>gawk</title>
      <codeblock>The Awk processing language, GNU edition</codeblock>
      <p>
            gawk is a version of awk from the Free Software Foundation. It has many
            more features than the original awk. 
            If you are like many computer users, you would frequently like to make
            changes in various text files wherever certain patterns appear, 
            or extract data from parts of certain lines while discarding the rest.
            The `awk' utility interprets a special-purpose programming language that
            makes it possible to handle simple data-reformatting jobs with just a
            few lines of code.</p>
      <codeblock>Using awk allows you to:</codeblock>
      <p>
            Manage small, personal databases </p>
      <p>
            Generate reports </p>
      <p>
            Validate data </p>
      <p>
            Produce indexes and perform other document preparation tasks</p>
      <p> 
            Experiment with algorithms that you can adapt later to other computer
            languages</p>
      <codeblock>In addition, gawk provides facilities that make it easy to:</codeblock>
      <p>
            Extract bits and pieces of data for processing</p>
      <p>
            Sort data </p>
      <p>
            Perform simple network communications</p>
      <p>
        <link url="http://www.gnu.org/software/gawk/">Information</link>
      </p>
    </section>
    <section>
      <title>pstree</title>
      <p>
            Is a small program that shows the process-listing as a tree (as the name
            implies...). 
            It has several options to make selection criteria and to change the output
            style.</p>
      <p>
        <link url="http://www.thp.uni-duisburg.de/ftpdoc.html">Information</link>
      </p>
    </section>
    <section>
      <title>tree</title>
      <p>
            Tree is a recursive directory listing program that produces a depth indented
            listing of files, 
            which is colorized ala dircolors if the LS_COLORS environment variable
            is set and output is to tty. 
            With no arguments, tree lists the files in the current  directory. When
            directory  arguments  are  given, 
            tree lists all the files and/or directories found in the given directories
            each in turn. 
            Upon completion of listing all files/directories found, tree returns
            the total number of files and/or directories listed.</p>
      <p>
            By default, when a symbolic link is encountered, the path that the symbolic
            link refers to is printed after the name of the link in the format:</p>
      <codeblock>name -&gt; real-path</codeblock>
      <p>
            If the '-l' option is given and the symbolic link refers to an actual
            directory, then tree will follow the path of the symbolic link as if
            it were a real directory.</p>
      <p>
        <link url="http://mama.indstate.edu/users/ice/tree/">Information</link>
      </p>
    </section>
    <section>
      <title>xtail</title>
      <codeblock>Watches the growth of files</codeblock>
      <p>
            Xtail monitors one or more files, and displays all data written to a
            file since command invocation. It is very useful for monitoring multiple
            logfiles simultaneously.</p>
      <p>
            If an entry given on the command line is a directory, all files in that
            directory will be monitored, including  those  created after the xtail
            invocation. 
            If an entry given on the command line doesn't exist, xtail will watch
            for it  and  monitor it once created.  
            When switching files in the display, a banner showing the pathname of
            the file is printed.</p>
      <p>
            Even though in the README file of xtail it says that it is similar in
            functionality to running a &quot;tail -f filename&quot; command, it is actually
            quite different. 
            Whereas tail will only monitor any changes appended to the end of a file,
            xtail actually monitors the entire file. When xtail is invoked with the
            following command:</p>
      <codeblock>&#37; xtail /var/log/messages</codeblock>
      <p>
            It will monitor the /var/log/messages file for any changes, this includes
            both new data and deletions. 
            Xtail continuously searches through the list of files looking for any
            changes and reporting this information to standard output. 
            Xtail uses two different parameters within its C looping function to
            determine if a file that it is monitoring has changed:</p>
      <codeblock>The size of the file
The mtime of the file</codeblock>
      <p>
        <link url="http://www.unicom.com/sw/xtail/">Information</link>
      </p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="how">
    <title>      /
          How To...? /</title>
    <shorttitle>      /
          How To...? /</shorttitle>
    <preface>
      <p>
                  This section is made mostly of answers given by the Fink developers
            to common problems at the fink-users mailing list.</p>
      <p/>
    </preface>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">What's
            installed?</link>
      </p>
      <p>
        <link url="#top2">Checking your PATH</link>
      </p>
      <p>
        <link url="#top3">Starting
            XFree86</link>
      </p>
      <p>
        <link url="#top4">Checking what you installed
            with fink</link>
      </p>
      <p>
        <link url="#top5">Checking one package</link>
      </p>
      <p>
        <link url="#top6">When
            you install a package, save a log</link>
      </p>
      <p>
        <link url="#top7">CVS by default</link>
      </p>
      <p>
        <link url="#top8">Fink
            verbose output</link>
      </p>
      <p>
        <link url="#top9">Launch X app. from your
            Terminal.app</link>
      </p>
      <p>
        <link url="#top10">Launch Aqua app from xterm
            or terminal</link>
      </p>
      <p>
        <link url="#top11">ls color</link>
      </p>
      <p>
        <link url="#top12">Installing
            from source (How long should it take?)</link>
      </p>
      <p>
        <link url="#top13">To move the /sw tree to
            a different location</link>
      </p>
      <p>
        <link url="#top14">Proxy and airport</link>
      </p>
      <p>
        <link url="#top15">curl:
            Server does not grok PORT</link>
      </p>
      <p>
        <link url="#top16">Cut and Paste from X11
            to Aqua</link>
      </p>
      <p>
        <link url="#top17">Removing fink, XFree86
            + XDarwin.app</link>
      </p>
      <p>
        <link url="#top18">Checking libraries</link>
      </p>
      <p>
        <link url="#top19">How
            to purge the /sw/src/ directory</link>
      </p>
      <p>
        <link url="#top20">If you are really short
            of espace in your HD</link>
      </p>
      <p>
        <link url="#top21">Lonely 'little white square'</link>
      </p>
      <p>
        <link url="#top22">To
            search for symbols</link>
      </p>
      <p>
        <link url="#top23">Broken sudoers</link>
      </p>
      <p>
        <link url="#top24">'New
            Users' and the 'passwd' package</link>
      </p>
      <p>
        <link url="#top25">dselect wont start</link>
      </p>
      <p>
        <link url="#top26">Useful
            Commands</link>
      </p>
      <p>
        <link url="#top27">How to pause a Fink installation</link>
      </p>
      <p>
        <link url="#top28">To
            copy the /sw directory to a network computer</link>
      </p>
      <p>
        <link url="#top29">'fink list' truncates package
            names</link>
      </p>
      <p>
        <link url="#top30">Curl fails to download
            a package</link>
      </p>
      <p>
        <link url="#top31">To pipe the whole X session
            to a log file</link>
      </p>
      <p>
        <link url="#top32">error: &quot;dyld: xinit can't
            open library&quot;</link>
      </p>
    </section>
    <section>
      <title>What's
            installed?</title>
      <p>
                  What OS version? 'sw_vers'</p>
      <p>
            What version of make? 'make -v'</p>
      <p>
            What Fink version? 'fink -V'</p>
      <p>
            What version of the dev tools? 'gcc -v'</p>
    </section>
    <section>
      <title>Checking
            your PATH</title>
      <p>
            If you wrote &quot;source /sw/bin/init.csh&quot; somewhere in your .login or .cshrc
            file, that should have added both /sw/bin and
            /sw/sbin to your path automatically, as well as setting environment variables
            that various Fink programs need.</p>
    </section>
    <section>
      <title>Starting
            XFree86</title>
      <p>
                  There are basically two ways to start XFree86 under Mac OS X:</p>
      <p>
        <em>1-XDarwin.app</em>
      </p>
      <p>
            Double-clicking the XDarwin.app in your Applications folder.</p>
      <p> 
            Then, a dialog will appear where you can choose between full screen and
            rootless mode. 
            In XDarwin Preferences, you can set XDarwin to always use the mode of
            your choice and disable the startup dialog.</p>
      <p>
        <em>2-Terminal.app</em>
      </p>
      <p>
            From the terminal.app you can type either:</p>
      <codeblock>startx -- -fullscreen</codeblock>
      <p>
                  or</p>
      <codeblock>startx -- -rootless</codeblock>
    </section>
    <section>
      <title>Checking
            what you installed with fink</title>
      <codeblock>fink list --help</codeblock>
      <p>
                  to get all the list options</p>
      <codeblock>fink list</codeblock>
      <p>   -will list all
            packages</p>
      <p>
            The first column always displays:</p>
      <codeblock>not installed i latest version is installed
(i)  installed, but a new version is available</codeblock>
      <codeblock>fink list -i</codeblock>
      <p>
            -will list all installed packages</p>
      <p>
            You can also run:</p>
      <codeblock>fink list | grep -e '^ i'</codeblock>
      <p>
            Or you can check by archive section, for example:</p>
      <codeblock>fink list -i --section=graphics</codeblock>
      <p>
            will give you a list of all graphics packages installed.</p>
      <p>List of Packages by archive
            section:</p>
      <p>'base':
            Core packages</p>
      <p>'crypto':
            Cryptographic software (subject to national regulations)</p>
      <p>'database':
            SQL database software</p>
      <p>'devel':
            Software for software development</p>
      <p>'editors':
            Text editors</p>
      <p> 'games':
            Games and other fun stuff</p>
      <p>'gnome':
            The GNOME desktop environment (version 1.4)</p>
      <p>'graphics':
            Graphics applications and libraries</p>
      <p>'kde':
            K Desktop Environment (version 3.0)</p>
      <p>'languages':
            Programming languages (compilers, interpreters)</p>
      <p>'libs':
            General purpose libraries</p>
      <p>'libs/perlmods':
            Perl libraries</p>
      <p>'net':
            Network-related applications and libraries</p>
      <p>'sci':
            Scientific applications</p>
      <p>'shells':
            Shells a.k.a. command line interpreters</p>
      <p>'sound':
            Audio software</p>
      <p>'text':
            Text-processing software</p>
      <p>'utils':
            Utilities that don't fit elsewhere</p>
      <p>'web':
            Web-related software</p>
      <p>'x11':
            General X11 packages - toolkits and utilities</p>
      <p>'x11-system':
            X Window System core packages</p>
      <p>'x11-wm':
            Window managers for the X Window System</p>
    </section>
    <section>
      <title>Checking
            one package</title>
      <p>
                  To check about only one package, run:</p>
      <codeblock>fink list 'packagename'</codeblock>
      <p>
                  To get a description on that package, you can run:</p>
      <codeblock>fink info 'packagename'</codeblock>
      <p>
                  or</p>
      <codeblock>fink describe 'packagename'</codeblock>
    </section>
    <section>
      <title>When
            you install a package, save a log</title>
      <p>
                  When you install a package save a log of the build.</p>
      <p> 
            You can do that like this:</p>
      <codeblock>fink install packagename | tee ~/Desktop/packagename.log</codeblock>
      <p>
            Afterwards, if things are going wrong, you can look through the log and
            see what happened.</p>
    </section>
    <section>
      <title>CVS
            by default</title>
      <p>
                 If you have an appropriate version of the Developers Tools (December
            2002 for OS 10.2) installed, that will give you cvs by default.</p>
      <p>
            Even though fink will let you install a CVS package from the binary distribution,
            you won't be able to run 'fink selfupdate' without the Dev Tools.</p>
    </section>
    <section>
      <title>Fink
            verbose output</title>
      <p>
                 The nice thing about Fink is that for example, you can just type:</p>
      <codeblock>fink install gtk+</codeblock>
      <p>
            and it will figure out what dependencies are involved, ask if you would
            like to install them too, then after you say 'Yes' it'll download everything.
            For each package, it will unpack it, apply any needed patches, auto-configure,
            compile, test, 
            and install into a .deb file which gets installed for you by dpkg.</p>
      <p>
            If you go into /sw/etc/fink.conf and turn on</p>
      <p>verbose output,</p>
      <p>
            you can watch each of these steps and get a clear idea of what Fink is
            doing, 
            so that you understand it better and can do it yourself if necessary.</p>
      <p>
            The plus side is that you learn a lot and can keep up to date with all
            of this software. 
            The down side is that, compared to binary installs, 
            it's a slow process -- but it can be much more reliable in many cases.</p>
    </section>
    <section>
      <title>Launch
            X app. from your Terminal.app</title>
      <p>
                 To enable entering XWindows commands in the Terminal.app &quot;when XWindows
            is running&quot; write at the beginning of your ~/.cshrc file:</p>
      <codeblock>setenv DISPLAY :0.0</codeblock>
      <p>
            So, if you type 'gimp' in Terminal.app the corresponding X11 binary will
            open in XWindows. </p>
      <p>
            You could set the XDarwin.app to start up when you login in the Login
            Panel of the System Preferences and then add to your ~/.cshrc file:</p>
      <codeblock>if (! $?DISPLAY) then
setenv DISPLAY :0.0
endif</codeblock>
      <p>
            This will set DISPLAY automatically in every shell. 
            It doesn't override the current value when DISPLAY is already set, though.
            his way you can still run X11 applications remotely or through ssh with
            X11 tunneling.</p>
    </section>
    <section>
      <title>Launch
            Aqua app from an xterm or terminal.app</title>
      <p>
                 Use &quot;open&quot;, as in:</p>
      <codeblock>[1]
&#37; open SomeDocument.rtf
&#37; open ~/Sites/index.html
[2]
&#37; open /Applications/TextEdit.app
&#37; open /Applications/Internet\ Explorer.app
[3]
&#37; open -a /Applications/Internet\ Explorer.app ~/Sites/index.html
&#37; open -a /Applications/TextEdit.app index.html</codeblock>
      <p>
        <em>[1]</em>
      </p>
      <p>
            opens the document, using the application handler assigned to
            that document type by the system.</p>
      <p>
        <em>[2]</em>
      </p>
      <p>
            opens an application.</p>
      <p>
        <em>[3]</em>
      </p>
      <p>
            opens a document, but forcing it to be opened in the application given
            with the -a switch instead of whatever the default handler might be.</p>
    </section>
    <section>
      <title>ls
            color</title>
      <p>
                 Install the fileutils package. Then you can do:</p>
      <codeblock>ls --color=auto</codeblock>
      <p>
                   to get colored ls output.</p>
      <p>
                 You can write in your ~/.cshrc file some aliases like this:</p>
      <codeblock>alias l 'ls -Ahl --color=always'
alias lh 'ls -Al --color=always'
alias ls 'ls -A --color=always'</codeblock>
    </section>
    <section>
      <title>Installing
            from source: (How long should it take?)</title>
      <p>
        <em>Question</em>
      </p>
      <p>
                  &quot;I ran the fink install like suggested, but I've been waiting for
            a freaking long time for it to compile (like 5+ hours). Should it take
            this long?&quot;</p>
      <p>
        <em>Answer</em>
      </p>
      <p>
            It's normal. Depending on what kind of computer you're running (an old
            iMac, or the latest G4, etc) and what you're installing, 
            this can be done in a matter of minutes or it can take well over a day.
            Depends on the number &amp; the kinds of packages: generally, mozilla, nautilus, evolution, kde
            and gnome all take a long time, while others are very fast.</p>
      <p>
            Installing binaries is faster, but if you install from source you have
            the advantage to usually get newer software, 
            and if you can leave it working overnight, then it shouldn't bother you
            so much.</p>
    </section>
    <section>
      <title>To
            move the /sw tree to a different location</title>
      <codeblock>cd /</codeblock>
      <codeblock>tar -zcvf /Volumes/b2/fink.tgz sw</codeblock>
      <codeblock>cd /Volumes/foo</codeblock>
      <codeblock>tar -zxvf fink.tgz</codeblock>
      <p>
            then symlink /Volumes/foo/sw to /sw:</p>
      <codeblock>ln -s /Volumes/foo/sw /sw</codeblock>
      <p>
            You can also have the &quot;sw&quot; directory moved to another partition, and
            share it between two systems, via symlinks works fine.</p>
      <p>
            Make sure you do the &quot;move&quot; correct, that is, either with &quot;sudo mv&quot; (you
            must be root to move this, hence the sudo), 
            or with dito - don't use &quot;cp -r&quot; as it will &quot;flatten&quot; symlinks.</p>
    </section>
    <section>
      <title>Proxy
            and airport</title>
      <p>
                 Set the proxies to </p>
      <codeblock>none</codeblock>
      <p> and specify </p>
      <codeblock>passive ftp</codeblock>
      <p> in the
            fink.conf file.</p>
    </section>
    <section>
      <title>curl:
            Server does not grok PORT</title>
      <p>
        <em>Problem:</em>
      </p>
      <p>
                 curl: (30) Server does not grok PORT, try without it!</p>
      <p>
            ### curl failed, exit code 30</p>
      <p>
            Downloading the file &quot;bzip2-1.0.2.tar.gz&quot; failed.</p>
      <p>
        <em>Answer:</em>
      </p>
      <p>
            This error frequently shows up when you don't have passive FTP enabled.
            Rerun 'fink configure' and enable passive FTP (answer y when prompted)
            or
            edit /sw/etc/fink.conf and add this line:</p>
      <codeblock>ProxyPassiveFTP: true</codeblock>
    </section>
    <section>
      <title>Cut
            and Paste from X11 to Aqua</title>
      <p>
                 Copy and Paste generally works between the Aqua and X11 environments.</p>
      <p>To transfer text from Aqua
            to X11:</p>
      <p>
                  use Cmd-C in Aqua</p>
      <p> 
                 then bring the destination window to the front</p>
      <p>
                  and use the middle mouse button to paste.</p>
      <p>To
            transfer text from X11 to Aqua:</p>
      <p>
                  simply select the text with the mouse in X11</p>
      <p>
                  then use Cmd-V in Aqua to paste it.</p>
      <p>If
            you're running XDarwin and blackbox in rootless mode:</p>
      <p>
            just selecting text in an x client (certainly in an
            xterm or eterm) puts the text in the Cut buffer. 
            Then you can paste the text into another X client by using:</p>
      <p>command-click</p>
      <p>
            and you can paste the text into an aqua window by using:</p>
      <p>command-v</p>
      <p>
            (or the paste command in the aqua edit menu).</p>
      <p>
            This also works if you </p>
      <codeblock>cut in fullscreen mode</codeblock>
      <p>
            then switch to the aqua desktop, and then paste into BBEdit or similar.</p>
      <p>
            And it works the other way around: </p>
      <codeblock>you can cut in aqua</codeblock>
      <p>
            switch to XDarwin</p>
      <p>
            and paste in an x client using command-click.</p>
      <p>
            Install the program autocutsel; it automatically synchronizes the two
            main cut buffers. To run it, add the following line to your .xinitrc:</p>
      <codeblock>autocutsel &amp;</codeblock>
      <p>
            Make sure it's before the line that exec's the window manager and never
            returns! Don't just add it at the end, it won't be executed. </p>
    </section>
    <section>
      <title>Removing
            Fink, XFree86 + XDarwin.app</title>
      <p>
                 First, if you have installed  the package passwd or g77 then run:</p>
      <codeblock>sudo dpkg --force-depends --remove passwd g77</codeblock>
      <p>
            Then do the following:</p>
      <p>
            Almost all files installed by Fink are in /sw (or wherever you chose
            to install it). Thus in order to get rid of Fink, you enter this command:</p>
      <codeblock>sudo rm -rf /sw</codeblock>
      <p>
            And all your installation will be gone. Then you can reinstall, by hand
            or using Fink again, if you wish.</p>
      <p>
            If you also want to remove XFree86, additionally enter this: </p>
      <codeblock>sudo rm -rf /usr/X11R6 /etc/X11 /Applications/XDarwin.app</codeblock>
      <p>
            This will delete your XFree86 installation as well as the XDarwin application.</p>
      <p>
            You will want to remove the line</p>
      <codeblock>source /sw/bin/init.csh</codeblock>
      <p>
            that you added to your .cshrc file.</p>
      <p> 
            To do this, type &quot;pico ~/.cshrc&quot;. Navigate to the &quot;source /sw/bin/init.csh&quot;
            line and type control-K to remove it. </p>
      <p>
            Then type control-O, return, control-X to exit.</p>
      <p>
            Also check your dotfiles, just open them up &amp; edit accordingly.</p>
    </section>
    <section>
      <title>Checking
            libraries</title>
      <codeblock>dpkg -L gdk-pixbuf-shlibs | grep xlib</codeblock>
      <p>
            /sw/lib/libgdk_pixbuf_xlib.2.0.0.dylib</p>
      <p>
            /sw/lib/libgdk_pixbuf_xlib.2.dylib</p>
    </section>
    <section>
      <title>How
            to purge the /sw/src/ directory</title>
      <p>
            You can remove stuff from /sw/src, especially any subdirectories of it.
            The easiest way to do this is to use emacs in dired mode. You can use
            OSX's /usr/bin/emacs:</p>
      <codeblock>sudo /usr/bin/emacs /sw/src</codeblock>
      <p>
            It goes into dired mode automatically. 
            You go down the list of files and directories, you flag the files you
            want to get rid of by hitting &quot;d&quot; and the directories hitting &quot;m&quot;. 
            After the selection, you hit &quot;x&quot; to delete the files and &quot;!&quot; then &quot;rm
            -rf&quot; to delete the directories.</p>
    </section>
    <section>
      <title>If
            you are really short of espace in your HD</title>
      <p>
            You could delete everything from /sw/src.</p>
      <p>
            If you really need to wipe *all* source files, you can just do:</p>
      <codeblock>sudo rm -rf /sw/src/*</codeblock>
      <p>
            But, you should keep in mind that if you do that, you will have to redownload
            all sources if you ever need to rebuild the package in question.</p>
      <p>
            Also, the first time you run fink selfupdate-cvs</p>
      <p>
            a 'fink.old' directory</p>
      <p>
            is created just in case something goes wrong during the update.</p>
      <p> 
            You can safely </p>
      <codeblock>delete the whole 'fink.old' directory</codeblock>
      <p>
            once you've verified that fink works after the selfupdate-cvs.</p>
      <p>
            Also check:</p>
      <p>
            /sw/fink/dists/unstable/main/binary-darwin-powerpc/base</p>
      <p>
            you might have:</p>
      <codeblock>apt-dev_0.5.4-7_darwin-powerpc.deb
apt-dev_0.5.4-8_darwin-powerpc.deb
................
fink_0.11.1-10_darwin-powerpc.deb
fink_0.11.1-1_darwin-powerpc.deb
fink_0.11.2-1_darwin-powerpc.deb
................
ncurses_5.2-8_darwin-powerpc.deb
ncurses_5.2-9_darwin-powerpc.deb</codeblock>
      <p>
            You should be safe to remove the older of the duplicates. 
            However, fink isn't doing this automatically, for various reasons, one
            being that you might want to go back to an older version of a given package.</p>
      <p>
            If you only use apt-get to obtain your .deb files (i.e. the binary distro)
            and want to delete the old deb files via Fink:</p>
      <codeblock>sudo apt-get autoclean</codeblock>
      <p>
            With fink package manager version 0.10.0, we have the command:</p>
      <codeblock>fink cleanup</codeblock>
      <p>
            to do the cleaning job. It cleans up the old .deb files. </p>
    </section>
    <section>
      <title>Lonely
            'little white square'</title>
      <p>
        <em>Question:</em>
      </p>
      <p>
                 Does anyone else have a little white square in the bottom right of
            their screen when they have XDarwin at the forefront?</p>
      <p>
        <em>Answer:</em>
      </p>
      <p>
            It is autocutsel that produces the little square. I have no idea why.
            But it disappeares if you kill autocutsel, 
            and it will came back as soon as you restart it.</p>
    </section>
    <section>
      <title>To
            search for symbols</title>
      <p>
                 To search for symbols use nm :</p>
      <codeblock>nm /sw/lib/libgdk-1.2.0.dylib | grep Grab</codeblock>
      <p>      U _XGrabKeyboard</p>
      <p>      U _XGrabPointer</p>
      <p>      U _XGrabServer</p>
      <p>      U _XGrabServer</p>
      <p>
            &quot;U&quot; from nm, means &quot;undefined&quot;.</p>
    </section>
    <section>
      <title>Broken
            sudoers</title>
      <p>
        <em>Problem:</em>
      </p>
      <p>
            localhost:~] momo&#37; sudo apt-get update</p>
      <p>
            sudo: /etc/sudoers is mode 0775, should be 0440</p>
      <p>
            [localhost:~] momo&#37; can not write to queue directory</p>
      <p>
            /var/spool/clientmqueue/ (RunAsGid=25, required=80): Permission denied</p>
      <p>
        <em>Answer:</em>
      </p>
      <p>
            Reboot holding down </p>
      <codeblock>cmd-S</codeblock>
      <p>.</p>
      <p>
            When you get to a prompt, do :</p>
      <codeblock>fsck -y
mount -uw /
chmod 0440 /etc/sudoers
exit</codeblock>
    </section>
    <section>
      <title>'New
            Users' and the 'passwd' package</title>
      <p>
                 &quot;If you install a package which has a dependency on the 'passwd' package,
                 then you will be installing 'passwd' which is a sort of general purpose
            package that sets up a couple of extra users on 
                 your system in the event that you someday decide to install packages
            that require these extra users.  
                 This installation is actually a security &quot;feature&quot;. All unix processes
            have to run as one user or another. 
                 System processes generally run as the user root, but for a process
            such as MySQL to run as root would be a big security breach, 
                 so it creates a user with no privledges to run under. 
                 This user also becomes the owner of any files that the process needs
            to have write access to, adding another layer of security. 
                 In theory you could have a single generic user account that all of
            these processes run under (some Linux systems use 'nobody') 
                 but this could get messy so it customary to have different accounts
            such as mail, news, apache, mysql, etc.&quot;</p>
      <p>
            When you install 'passwd' this will come up: </p>
      <p>
            Existing entries with these names or numbers will be overwritten or otherwise
            affected by this. 
            On the other hand, some Fink packages will not work unless these entries
            are in the NetInfo database. 
            You can make adjustments to the files /sw/etc/passwd-fink and /sw/etc/group-fink
            now (from another window), then say yes here. 
            Or you can say no here and add the users and groups manually (e.g. on
            your central NetInfo server). 
            If you don't know what all of this is about, just say yes. 
            Do you want to continue? [Y/n]</p>
      <p>
            So then, I you accept the installation of the new users, existing entries
            with these names or numbers will be overwritten or otherwise affected
            by this. 
            But, it also says you can make adjustments before installation in /sw/etc/passwd-fink
            or in the /sw/etc/group-fink. 
            You can edit those files to suit your needs. 
            If you decide not to install the new users, and the need arise later
            for one of them, you can install it manually.</p>
    </section>
    <section>
      <title>dselect
            wont start</title>
      <p>
        <em>Question:</em>
      </p>
      <p>
                 &quot;After upgrading fink with &quot;sudo fink selfupdate&quot;, dselect wont start
            with the message&quot;:</p>
      <p>
            &#37; dselect</p>
      <p>
            Error opening terminal: vt100.</p>
      <p>
        <em>Answer:</em>
      </p>
      <p>
            I read that someone with the same problem was advised to try solve it
            by 'rebuilding ncurses'.</p>
    </section>
    <section>
      <title>Useful
            Commands</title>
      <p>To clean
            your cvs:</p>
      <codeblock>cd /sw/fink</codeblock>
      <p>
            and then run:</p>
      <codeblock>sudo find . -name 'CVS' -type d -exec rm -rf {} \;</codeblock>
      <p>
            When you run now 'fink selfupdate-cvs' it will prompt you for your settings
            again.</p>
      <p>To find package
            dependencies:</p>
      <codeblock>find /sw/fink/dists/ -name \*.info | xargs grep Depends | grep packagename | more</codeblock>
      <p>If you do decide
            to wipe Fink and reinstall it:</p>
      <p>
            The following command will create a list of all your installed packages
            in a file named &quot;installed&quot; in your home directory.</p>
      <codeblock>dpkg --get-selections |egrep &quot;\binstall&quot; | awk '{print $1}' | xargs &gt; ~/installed</codeblock>
      <p>
            Then, after you reinstalled Fink, you can just do:</p>
      <codeblock>fink install &lt; ~/installed</codeblock>
      <p>To
            find out which packages depend on 'daemonic' run:</p>
      <codeblock>grep Depends -r /sw/fink/dists/ | grep daemonic</codeblock>
      <p>
            or more to the point:</p>
      <codeblock>fink list -i |awk '{print $2}' |grep -v about |xargs dpkg -s |grep daemonic</codeblock>
      <p>Gives you the
            X11 version without running the X server:</p>
      <p>
            (Thanks to Martin Costabel)</p>
      <codeblock>grep &quot;Version.*XFree86&quot; /usr/X11R6/man/man7/X.7 | cut -d &quot; &quot; -f 5</codeblock>
      <p>Using the sh
            -c command to get system info:</p>
      <p>
            (check man sh)</p>
      <codeblock>sh -c &quot;. /sw/bin/init.sh; /usr/bin/env&quot;</codeblock>
      <p>A utility for
            displaying information about an X server:</p>
      <p>
            (check man xdpyinfo)</p>
      <codeblock>&#37; xdpyinfo</codeblock>
    </section>
    <section>
      <title>How
            to pause a Fink installation</title>
      <p>
                  When you install a large package it can take up to several hours to
            compile it. 
                  If you want to do some other work in the meantime, the compilation
            in the background sometimes slows down the work which can be annoying.
                  Is it possible to pause a compilation for a while and then after the
            other work is done to resume it. If you started the installation manually
            in Terminal.app, you can just press:</p>
      <codeblock>Ctrl+Z</codeblock>
      <p>
            while you're in the Terminal.app window that &quot;contains&quot; the compilation
            process. The process will be stopped and put to sleep in the background.
            You can then go and do the other work, 
            and when you're ready to continue just return to the Terminal.app window
            where you stopped the process and type:</p>
      <codeblock>'fg'</codeblock>
      <p> (without quotes).
            fg = foreground</p>
      <p>
            If you are not sure whether you have stopped jobs in a given Terminal.app
            window, just type:</p>
      <codeblock>'jobs'</codeblock>
      <p>
            and you will get a list of jobs that you have put in the background.
            If there are several of them they will be marked with a number. Type
            for instance:</p>
      <codeblock>'fg 2'</codeblock>
      <p> to continue with
            job 2.</p>
      <p>
            You could also say:</p>
      <codeblock>'bg 2'</codeblock>
      <p> to continue job
            2 in the background.</p>
      <p>
            You are then free to type other commands on the shell prompt while the
            job runs in the background. Note that the background job will still send
            all output to the screen as if it were in the foreground. 
            This can interfere with the output of another command that you have started
            in the meantime, or even with the command that you're typing right now.
            The interference is actually harmless - it will not affect how another
            command is executed, nor will the output mix with anything that you type.
            If you're not sure about this, just fool around with harmless commands
            such as &quot;find&quot; that generate lots of output.</p>
      <p>
            If you find yourself in a situation where a &quot;runaway&quot; background job
            is wildly polluting your window with output and it seems you're helpless,
            just try the following:</p>
      <p>
            - blindly type </p>
      <codeblock>'fg x'</codeblock>
      <p> (where x is the number of the runaway
            job)</p>
      <p>
            - now you have the job in the foreground and you can just type:</p>
      <codeblock>Ctrl+Z</codeblock>
      <p> to put it to
            sleep, or </p>
      <codeblock>Ctrl+C</codeblock>
      <p> to abort it.</p>
      <p>
            If you'd like to start a job in the background from the first moment,
            just type your command as normal and then append an &amp; (ampersand) to the very end of the command.</p>
      <p>
            If you started the installation with FinkCommander:</p>
      <p>
            Just find the pid of the fink process by:</p>
      <codeblock>'ps aux | grep fink'</codeblock>
      <p> or something, 
            then </p>
      <codeblock>'kill -STOP thePid'</codeblock>
      <p> 
            which is similar to Ctrl+Z.</p>
      <p>
            And when you want to continue it:</p>
      <codeblock>'kill -CONT thePid'</codeblock>
      <p>
            which is similar to 'fg'.</p>
    </section>
    <section>
      <title>To
            copy the /sw directory to a network computer</title>
      <p>
                  If you want to copy the /sw directory to a networked computer from
            the command line, you could do it with rsync over ssh:</p>
      <codeblock>sudo rsync -az -e ssh /sw othermachine:/</codeblock>
      <p>There are some caveats:</p>
      <p>
            Some packages need to run postinstall scripts. Some are installing stuff
            outside /sw (the xfree packages, of course; also g77; 
            and anything that uses daemonic, most notably openssh). And if your /sw
            is not /sw but for example a symlink, the real path may be hardcoded
            somewhere if you are not careful.</p>
      <p> 
            So you may expect some more or less subtle breakage. Nothing that can't
            be repaired, usually by a &quot;fink reinstall&quot; or else &quot;fink rebuild&quot;, but
            be warned.</p>
    </section>
    <section>
      <title>'fink
            list' truncates package names</title>
      <p>
                  If when you run &quot;fink list&quot; it truncates package names you can use
            fink list --width option.</p>
      <p>
                  You can run:</p>
      <codeblock>fink list --width 120 xfree</codeblock>
      <p>
            or</p>
      <codeblock>fink list -w120 xfree</codeblock>
    </section>
    <section>
      <title>curl fails to download a package</title>
      <p>
        <em>Problem:</em>
      </p>
      <codeblock>curl:
(28) Connection aborted
### execution of curl failed, exit code 28</codeblock>
      <p>
Downloading the file &quot;blabla-0.6.1.tar.gz&quot; failed</p>
      <p>
            If curl can't get the file, the problem is almost always with the resource
            being unavailable (dead or changed link, server down, etc)</p>
      <p>Try first:</p>
      <p> 1)
            See what URL curl is using to get the file.</p>
      <p>2) Use a web browser (or ftp
            client) at that URL to download the file.</p>
      <p>3) Move ('sudo mv') the downloaded
            file to /sw/src.</p>
      <p>4) 'fink install' the package.</p>
      <p>If
            still fails:</p>
      <p>
            Do a 'google' search to find the file elsewhere (exactly the same name),
            then download it with your browser and put it in your source directory,
            either /sw/src or the alternative directory you specified during fink's
            configure phase:</p>
      <p>1) Google search
            for file.</p>
      <p>2) Download file with your browser.</p>
      <p>3)
            Move ('sudo mv') the downloaded file to /sw/src.</p>
      <p>4) 'fink install' the package.</p>
      <p>Or:</p>
      <codeblock>cd /sw/src
sudo wget http://alternate.source.for/package.tgz
sudo fink install package</codeblock>
      <p>
            If you would like to add an extra source or specify another source for
            the download of a fink package, 
            the .info file for the package has a 'Source:' line in it.</p>
      <p>
            For example, in the qt package case:</p>
      <p>
            Source: </p>
      <codeblock>ftp://ftp.trolltech.com/qt/source/qt-x11-free-&#37;v.tar.bz2</codeblock>
      <p>
            You can modify that line to make it work as you want.</p>
    </section>
    <section>
      <title>To
            pipe the whole X session to a log file</title>
      <p>
                  To pipe the whole X session to a log file for later autopsies, do
            a:</p>
      <codeblock>startx |&amp; tee ~/startx.log</codeblock>
      <p>
            then log in &amp; immediately try to get back out.</p>
      <p>
            If you can get to that log file (remotely, or from another machine, or
            even from an xterm while X is running) 
            you might be able to see something that explains where the problem is
            coming from.</p>
    </section>
    <section>
      <title>error:
            &quot;dyld: xinit can't open library&quot;</title>
      <p>
                  If you get one of the following errors when you try to start XFree86:</p>
      <p>dyld: xinit can't open library: /usr/X11R6/lib/libXmuu.1.dylib</p>
      <p>
            or</p>
      <p>dyld: xinit can't open library:  /usr/X11R6/lib/libXext.6.dylib</p>
      <p>
            you are missing a file that is supposed to be installed by the</p>
      <p>
            xfree86-rootless-(threaded)-shlibs package</p>
      <p>
            You should reinstall it.</p>
      <p>
            From source:</p>
      <codeblock>fink reinstall xfree86-rootless-shlibs</codeblock>
      <p>
            or</p>
      <codeblock>fink reinstall xfree86-rootless-threaded-shlibs</codeblock>
      <p>
            (if you are using the threaded XFree86 packages)</p>
      <p>
            From binaries:</p>
      <codeblock>sudo apt-get install --reinstall xfree86-rootless-shlibs</codeblock>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="wmanagers">
    <title>      /
          Window Managers /</title>
    <shorttitle>      /
          Window Managers /</shorttitle>
    <preface>
      <p>
                  In X11, the window frames (title bar, close button, also called &quot;decorations&quot;)
            are provided by a separate program, called the window manager. 
                  Most window managers provide additional functionality, like pop up
            menus in the root window, docks or launch buttons 
                  and some of them allow you to customize their appearance with themes.
            Visit their home pages to get a glimpse of how they look and study how
            the configuration files work. 
            The following is a list of window managers that have been ported by Fink.</p>
      <p/>
    </preface>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">Windowmaker</link>
      </p>
      <p>
        <link url="#top2">Enlightenment</link>
      </p>
      <p>
        <link url="#top3">Icewm</link>
      </p>
      <p>
        <link url="#top4">Afterstep</link>
      </p>
      <p>
        <link url="#top5">Blackbox</link>
      </p>
      <p>
        <link url="#top6">TWM</link>
      </p>
      <p>
        <link url="#top7">Sawfish</link>
      </p>
      <p>
        <link url="#top8">Fvwm</link>
      </p>
      <p>
        <link url="#top9">Ion</link>
      </p>
      <p>
        <link url="#top10">Pwm</link>
      </p>
      <p>
        <link url="#top11">Ratpoison</link>
      </p>
      <p>
        <link url="#top12">Xfce</link>
      </p>
      <p>
        <link url="#top13">metacity</link>
      </p>
      <p>
        <link url="#top14">oroborus</link>
      </p>
      <p>
        <link url="#top15">oroborus2</link>
      </p>
      <p>
        <link url="#top16">fluxbox</link>
      </p>
      <p>
        <link url="#top17">Themes
            for window managers</link>
      </p>
    </section>
    <section>
      <title>Windowmaker</title>
      <p>
                  Window Maker is an X11 window manager originally designed to provide
            integration support for the GNUstep Desktop Environment. 
                  In every way possible, it reproduces the elegant look and feel of
            the NEXTSTEP[tm] user interface. It is fast, feature rich, easy to configure,
            and easy to use. 
                  It is also free software, with contributions being made by programmers
            from around the world.</p>
      <p>
            Window Maker includes compatibility options which allow it to work with
            other popular desktop environments, namely GNOME and KDE, 
            and comes with a powerful GUI configuration editor, called WPrefs, which
            removes the need to edit text-based config files by hand.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/wmaker.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://windowmaker.org/">Web
            site</link>
      </p>
      <p>
        <link url="http://www.windowmaker.org/documentation-userguide.html">User
            Guide</link>
      </p>
      <p>Fink
            Package windowmaker:</p>
      <p>
        <em>Maintainer --
            Max Horn</em>
      </p>
    </section>
    <section>
      <title>Enlightenment</title>
      <p>
                  Enlightenment is a completely themeable, highly configurable Window
            Manager for the X Window System, traditionally used in Unix environments.</p>
      <p>
            Its design goal is to be as configurable as possible - in look AND in
            feel. Enlightenment's current design aim is to become a desktop shell.
            That means it will manage your application windows, being able to launch
            applications, and also manage your files.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/enlightenment.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.enlightenment.org/pages/main.html">Web
            site</link>
      </p>
      <p>
        <link url="http://www.enlightenment.org/pages/faq.html">FAQ</link>
      </p>
      <p>
        <link url="http://www.enlightenment.org/pages/docs.html">Documentation</link>
      </p>
      <p>Fink
            Package enlightenment:</p>
      <p>
        <em>Maintainer --
            N/A</em>
      </p>
    </section>
    <section>
      <title>Icewm</title>
      <p>
                  It it has been coded from scratch in C++ for performance and size
            and attempts to achieve the following goals:</p>
      <p>
            Feel good and fast to use, be simple and don't get in the way.</p>
      <p> 
            Default configuration should be fully usable without tweaking.</p>
      <p> 
            Mouse is optional.</p>
      <p> 
            Combine the best features of other wmanagers and GUIs.</p>
      <p> 
            Themes can customize the look, user can customize the feel.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/icewm.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://icewm.sourceforge.net/">Web
            site</link>
      </p>
      <p>
        <link url="http://icewmfaq.cjb.net/">FAQ</link>
      </p>
      <p>Fink
            Package icewm:</p>
      <p>
        <em>Maintainer --
            Jeffrey Whitaker</em>
      </p>
    </section>
    <section>
      <title>Afterstep</title>
      <p>
                  Originally based on the look and feel of the NeXTStep interface, it
            has evolved into its own creature, with interest expressed by GNUstep,
            to make AfterStep the window manager of choice for X11.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/after.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.afterstep.org/">Web
            site</link>
      </p>
      <p>
        <link url="http://www.afterstep.org/FAQ/">FAQ</link>
      </p>
      <p>
        <link url="http://www.malfunction.de/afterstep/ashow/overview.html">Overview</link>
      </p>
      <p>Fink
            Package afterstep:</p>
      <p>
        <em>Maintainer --
            Finlay Dobbie</em>
      </p>
    </section>
    <section>
      <title>Blackbox</title>
      <p>
                  Blackbox is that fast, light window manager you have been looking
            for without all those annoying library dependancies.
                   It's designed to be fairly small and minimal, making it particularly
            suited to less powerful computers.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/bb.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://blackboxwm.sourceforge.net/">Web
            site</link>
      </p>
      <p>
        <link url="http://bbtools.windsofstorm.net/">bbtools</link>
      </p>
      <p>Fink
            Package blackbox:</p>
      <p>
        <em>Maintainer --
            Finlay Dobbie</em>
      </p>
    </section>
    <section>
      <title>TWM</title>
      <p>
                  Twm (Tab Window Manager, or sometimes Tom's Window Manager, after
            the principle author Tom LaStrange) provides titlebars, 
                  shaped windows, several forms of icon management, user-defined macro
            functions, click-to-type and pointer-driven keyboard focus, 
                  and user-specified key and pointer button bindings.</p>
      <p>
            It has however been left behind by more recent window managers, making
            it something of mainly historical interest. 
            It was for some time the only real choice of window manager, after taking
            over from the very simplistic uwm.</p>
      <p> 
            Nearly every window manager since has borrowed heavily from it, either
            directly, or indirectly through other window managers, such as fvwm.
            The source code is no longer maintained, but old TWM archives for various
            releases of X are available.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/twm.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.plig.org/xwinman/archive/twm/">Archive</link>
      </p>
      <p>Fink
            Package twm:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>Sawfish</title>
      <p>
                  Sawfish is an extensible window manager using a Lisp-based scripting
            language --all window decorations are configurable and all 
                  user-interface policy is controlled through the extension language.
                  This is no layer on top of twm, but a wholly new architecture.</p>
      <p>
                  User-configuration is possible either by writing Lisp code in a personal
            .sawfishrc file, or through the integrated customization system.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/sawfish.html">Click
            here for screenshot (N/A)</link>
      </p>
      <p>
        <link url="http://sawmill.sourceforge.net/">Web
            site</link>
      </p>
      <p>
        <link url="http://sawmill.sourceforge.net/FAQ.html">FAQ</link>
      </p>
      <p>
        <link url="http://sawmill.sourceforge.net/prog-manual.html">Manual</link>
      </p>
      <p>Fink
            Package sawfish:</p>
      <p>
        <em>Maintainer --
            Max Horn</em>
      </p>
    </section>
    <section>
      <title>Fvwm</title>
      <p>
                 Fvwm, developed by Robert Nation, was once dominant in the window manager
            stakes, especially in the Linux community. 
                 It borrows heavily from Tom LaStrange's famous twm window manager,
            which was the first ICCCM-compliant window manager to be written.</p>
      <p>
            Fvwm was designed to minimize memory consumption, provide a 3-D look
            (similar to from Motif's mwm) and provide a simple virtual desktop. 
            Functionality can be enhanced by the use of various modules.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/fvwm.html">Click
            here for screenshot (N/A)</link>
      </p>
      <p>
        <link url="http://www.fvwm.org/">Web
            site</link>
      </p>
      <p>
        <link url="http://www.fvwm.org/generated/FAQ.html">FAQ</link>
      </p>
      <p>
        <link url="http://www.hpc.uh.edu/fvwm/archive/">Archive</link>
      </p>
      <p>
        <link url="http://www.fvwm.org/generated/manpages/">manpages</link>
      </p>
      <p>Fink
            Package fvwm:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>Ion</title>
      <p>
                 Ion is a minimalist window manager. It doesn't rely on things like
            icons, title bars, window buttons, launch pads, and the like. 
                 It follows the premise that the window manager should be managing the
            windows, not the user. 
                 Window management is what it does best and it makes good use of desktop
            real estate without having to deal with issues like icons or taskbars.
            Ion is an unusual kind of X11 window manager that brings a text-editorish,
            keyboard friendly user interface to window management. </p>
      <p>
                 Ion was written as an experiment on a different kind of window management
            model and it tries to address the navigation problem 
                 by having the screen divided into frames that take up the whole screen
            and never overlap. Big displays have so much space that 
                 this should be convenient and smaller displays couldn't show more than
            one window at a time anyway.</p>
      <p>
                 Start up Ion, you get a single frame. Press F2 and it starts up a terminal.
            Press F3 and it prompts you for an application you want to start. 
                 You could type mozilla, for example, and start up the browser. Adding
            applications to a group it's done automatically, so now you have two
            applications open in the same frame, 
                 with tabs you can click on to switch between the two or you could also
            use the keystroke combination Alt-K-N to switch between them.</p>
      <p>
            Now, just go to Mozilla and press Alt-F9. This will open a new workspace
            (a new frame in a new work area) and move Mozilla to that new location.
            In this case, it will be workspace 2. Then go to the terminal and press
            Alt-F9 again, and it will create workspace 3 and put it there. 
            Now you can switch between these two workspaces with Alt-2 and Alt-3.</p>
      <p>
                 The frame layout is, of course, dynamic and different on each workspace.
            Given the tree instead of coordinate-based frame layout, moving between
            the frames can be 
                 conveniently done from the keyboard. As in PWM, the frames may have
            multiple clients attached.</p>
      <p>
                 Ion also lets you do things like split frames vertically or horizontally,
            start new applications within the new frames, and resize frames. 
                 After you worked for some time with ion and learned how to use it to
            your advantage, it's hard to go back to use another window manager.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/ion.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://modeemi.cs.tut.fi/~tuomov/ion/">Web
            site</link>
      </p>
      <p>
        <link url="http://modeemi.cs.tut.fi/~tuomov/ion/faq.html">FAQ</link>
      </p>
      <p>
        <link url="http://rt.fm/ion/archive/">Mailing
            Lists</link>
      </p>
      <p>Fink
            Package ion:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>Pwm</title>
      <p>
                 PWM is a rather lightweight window manager for X11. It has the unique
            feature that multiple client windows can be attached to the same frame.
                 This feature helps keeping windows, especially the numerous xterms,
            organized.</p>
      <p>
                 PWM does have workspaces, menus and Window Maker dockapp support. It
            has pretty good keyboard support and almost all the functionality is
            configurable.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/pwm.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://modeemi.cs.tut.fi/~tuomov/pwm/">Web
            site</link>
      </p>
      <p>
        <link url="http://modeemi.cs.tut.fi/~tuomov/pwm/pwmfaq.html">FAQ</link>
      </p>
      <p>Fink
            Package pwm:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>Ratpoison</title>
      <p>
                 Ratpoison is a simple window manager with no large library dependencies,
            fancy graphics, or window decorations. 
                 All interaction with the window manager is done through keystrokes.</p>
      <p> 
                 Ratpoison has a prefix map to minimize the key clobbering, and all
            windows are maximized and kept maximized to avoid wasting screen space.
            Ratpoison is a simple Window Manager with no fat library dependencies,
            no fancy graphics, no window decorations, and no rodent dependence. 
            It is largely modelled after GNU Screen which has done wonders in virtual
            terminal market.</p>
      <p>
            All windows are maximized and kept maximized to take full advantage of
            your precious screen real estate.</p>
      <p>
            All interaction with the window manager is done through keystrokes. ratpoison
            has a prefix map to minimize the key clobbering that cripples Emacs and
            other quality pieces of software.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/ratpoison.html">Click
            here for screenshot (N/A)</link>
      </p>
      <p>
        <link url="http://ratpoison.sourceforge.net/">Web
            site</link>
      </p>
      <p>
        <link url="http://www.geocrawler.com/lists/3/SourceForge/5915/0/">Lists</link>
      </p>
      <p>Fink
            Package ratpoison:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>Xfce</title>
      <p>
                 XFce is a lightweight desktop environment for UNIX platforms. It is
            similar to the commercial CDE, and is now based on the GTK+ toolkit.</p>
      <p>
            A strong point of XFce is its ease of configuration - it is driven entirely
            by the mouse. The latest version features drag and drop, 
            session management, translations for numerous languages, including support
            for multi-byte character sets, and numerous other features.</p>
      <p>
            From version to version, XFce became more and more user friendly and
            easily configurable. As XFce is made for the user, it has to be very
            simple to configure. 
            The desktop environment includes a window manager, called XFwm, the main
            panel, a file manager, a backdrop manager, a sound manager, 
            a calendar, a pager module, and a GNOME compliance module.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/xfce.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://www.xfce.org/">Web
            site</link>
      </p>
      <p>
        <link url="http://www.xfce.org/help/html/help.html">Help</link>
      </p>
      <p>Fink
            Package xfce:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>metacity</title>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/metacity.html">Click
            here for screenshot (N/A)</link>
      </p>
      <p>Fink
            Package metacity:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>oroborus</title>
      <p>
                 Oroborus is a small, themeable window manager for X which provides
            all the necessary window management functions as well as a themeable
            desktop, 
                 full keyboard controls and virtual desktops.</p>
      <p> 
                 Oroborus doesn't provide any kind of dock, toolbar, program launcher,
            background changer or root menu as these are added weight and their 
                 functions can be provided by seperate applications.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/oroborus.html">Click
            here for screenshot (N/A)</link>
      </p>
      <p>
        <link url="http://www.dreamind.de/oroborus.shtml.en">Web
            site</link>
      </p>
      <p>
        <link url="http://savannah.gnu.org/mail/?group_id=2078">Mailing
            Lists</link>
      </p>
      <p>Fink
            Package oroborus:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>oroborus2</title>
      <p>
                 Oroborus Light-weight window manager, is a small but fully featured
            window manager that is GNOME compliant.</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/oroborus2.html">Click
            here for screenshot (N/A)</link>
      </p>
      <p>Fink
            Package oroborus2:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>fluxbox</title>
      <p>
                 Fluxbox is yet another windowmanager for X.
            It's based on the Blackbox 0.61.1 code. Fluxbox looks like blackbox and
            handles styles, colors, window placement and similar thing exactly like
            blackbox 
            (100&#37; theme/style compability).</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/fluxbox.html">Click
            here for screenshot</link>
      </p>
      <p>
        <link url="http://fluxbox.sourceforge.net/">Web
            site</link>
      </p>
      <p>
        <link url="http://fluxbox.sourceforge.net/docs.php">FAQ</link>
      </p>
      <p>
        <link url="http://fluxbox.sourceforge.net/themes.php">Themes</link>
      </p>
      <p>Fink
            Package fluxbox:</p>
      <p>
        <em>Maintainer --
            Dave Morrison</em>
      </p>
    </section>
    <section>
      <title>Themes
            for window managers</title>
      <p>
        <link url="http://themes.freshmeat.net/articles/view/439/">Themes
            at freshmeat.net</link>
      </p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="tips">
    <title>      /
          Tips &amp; Hints /</title>
    <shorttitle>      /
          Tips &amp; Hints /</shorttitle>
    <preface>
      <p>
                  I hope this page will grow into a collection of 'hints and tips' about
            applications and utilities installed with Fink in X11.</p>
      <p/>
    </preface>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">Vim
            colors</link>
      </p>
      <p>
        <link url="#top2">Psync Backups</link>
      </p>
      <p>
        <link url="#top3">Deborphan</link>
      </p>
      <p>
        <link url="#top4">Starting
            Mysql at boot time</link>
      </p>
      <p>
        <link url="#top5">Blackbox Tips</link>
      </p>
      <p>
        <link url="#top6">Xmms
            no sound</link>
      </p>
      <p>
        <link url="#top7">Xmms Skin Installation</link>
      </p>
      <p>
        <link url="#top8">Select
            multiple mp3 files in xmms</link>
      </p>
      <p>
        <link url="#top9">Pico Editor basic commands</link>
      </p>
      <p>
        <link url="#top10">Fluxbox
            Tips</link>
      </p>
      <p>
        <link url="#top11">ImageMagick Tips</link>
      </p>
      <p>
        <link url="#top12">To
            turn off Eterm random backgrounds</link>
      </p>
      <p>
        <link url="#top13">Emacs commands</link>
      </p>
      <p>
        <link url="#top14">To
            view man pages in html</link>
      </p>
      <p>
        <link url="#top15">Debug tools</link>
      </p>
      <p>
        <link url="#top16">To
            list the files installed by a package</link>
      </p>
      <p>
        <link url="#top17">To find out what package
            a particular file is part of</link>
      </p>
      <p>
        <link url="#top18">To check which packages
            are out of date</link>
      </p>
      <p>
        <link url="#top19">To delete the &quot;old deb
            files&quot; via Fink</link>
      </p>
      <p>
        <link url="#top20">fix-fink</link>
      </p>
      <p>
        <link url="#top21">Bluefish
            and Safari</link>
      </p>
      <p>
        <link url="#top22">To add apps to the gnome2
            menu</link>
      </p>
      <p>
        <link url="#top23">KDE Tips</link>
      </p>
      <p>
        <link url="#top24">To
            send the compile output to a text file</link>
      </p>
      <p>
        <link url="#top25">Adding options to a package
            .info file</link>
      </p>
      <p>
        <link url="#top26">Sharing the Fink</link>
      </p>
      <p>
        <link url="#top27">Reinstalling
            Fink Tips</link>
      </p>
      <p>
        <link url="#top28">Sleeping during compile</link>
      </p>
      <p>
        <link url="#top29">Uninstalling
            Gnome</link>
      </p>
      <p>
        <link url="#top30">Running ethereal</link>
      </p>
    </section>
    <section>
      <title>Vim
            colors</title>
      <p>
        <em>Problem:</em>
      </p>
      <p>
            &quot;I'm having trouble getting vim's syntax highlighting to use ANSI colors
            in Terminal.app. Is there a setting that I'm missing in my .vimrc?&quot;</p>
      <p>
        <em>Answer:</em>
      </p>
      <p>
            Please check that you have in your .vimrc file:</p>
      <codeblock>:syntax enable</codeblock>
      <p>
            or write in your .vimrc file:</p>
      <codeblock>let &amp;t_Co = 8</codeblock>
      <p>
            If the above doesn't work, try these suggestions from the manual:</p>
      <p>
            There can be a number of reasons why you don't see colors:</p>
      <p>
            Your terminal does not support colors. Vim will use bold, italic and
            underlined text, but this doesn't look very nice. You probably will want
            to try to get a terminal with colors.</p>
      <p>
            Your terminal does support colors, but Vim doesn't know this. Make sure
            your $TERM setting is correct. For example, when using an xterm that
            supports colors:</p>
      <codeblock>setenv TERM xterm-color</codeblock>
      <p>
            or (depending on your shell):</p>
      <codeblock>TERM=xterm-color; export TERM</codeblock>
      <p>
            The terminal name must match the terminal you are using.</p>
      <p>
            or</p>
      <p>
            Most color xterms have only eight colors. They should work with these
            lines in your .vimrc:</p>
      <codeblock>:if has(&quot;terminfo&quot;) 
: set t_Co=8 
: set t_Sf=&lt;Esc&gt;[3&#37;p1&#37;dm 
: set t_Sb=&lt;Esc&gt;[4&#37;p1&#37;dm 
:else 
: set t_Co=8 
: set t_Sf=&lt;Esc&gt;[3&#37;dm 
: set t_Sb=&lt;Esc&gt;[4&#37;dm 
:endif </codeblock>
      <p>
                [&lt;Esc&gt; is a real escape, type CTRL-V &lt;Esc&gt;]</p>
      <p>
            You might want to put these lines in an &quot;:if&quot; that checks the name of
            your terminal, for example:</p>
      <codeblock>:if &amp;term =~ &quot;xterm&quot;      
put above lines here    
:endif </codeblock>
      <p>
            Note: Do these settings BEFORE doing &quot;:syntax on&quot;. Otherwise the colors may be wrong.</p>
    </section>
    <section>
      <title>Psync
            Backups</title>
      <p>
                  Psync does an update copy.  It compares source directory and target
            directory at first, then erases items that are nonexistent on source
            directory 
                  if specified and finally copies everything on source directory.  
                  Items with the same modification date and (data fork) size remain
            untouched, saving time on operation.</p>
      <p>
            I love this script, thanks to psync I saved myself a lot of headaches
            in many occasions, I use it regularly like this:</p>
      <codeblock>sudo psync -d /Users/pm /Volumes/backupdisk/backup</codeblock>
      <p>
            to produce a copy of my home directory (and all subdirectories) inside
            the backup directory on &quot;backupdisk&quot;.</p>
      <p> 
            And, the next time you use it with the same command, it will sync the
            backup with the active copy, deleting files on the backup that have been
            deleted on the main copy 
            (if you don't want this to happen just take out the -d flag), and only copying files that have changed.</p>
      <p>
            According to the man pages, it is also possible to backup everything
            in the startup volume, all you have to say is:</p>
      <codeblock>sudo psync -d / /Volumes/Ibackup</codeblock>
      <p>
            And the resulting backup volume is fully-bootable copy thereof.  Note
            `sudo' or root privilege is necessary to restore file ownership.</p>
    </section>
    <section>
      <title>Deborphan</title>
      <codeblock>-d, --show-deps</codeblock>
      <p>
            Shows a list of dependencies for packages that have them.</p>
      <codeblock>&#37; deborphan --show-deps gtk+
gtk+        
dillo        
vim        
gnucash        
gtkglarea        
gal19        
sodipodi        
gtk-engines        
gtk+extra        
gconf-shlibs        
pygtk        
gtk-perl-pm        
imlib-shlibs        
gnome-vfs-shlibs        
gaddr</codeblock>
    </section>
    <section>
      <title>Starting
            Mysql at boot time</title>
      <p>
        <em>Question:</em>
      </p>
      <p>
            &quot;I successfully installed mysql from fink ('fink install mysql'). I can
            start the server manually once the computer is up by issuing:</p>
      <p>
            /sw/bin/safe_mysqld --user=mysql --log &amp;</p>
      <p>
            However, I am having trouble starting the server at boot time&quot;.</p>
      <p>
        <em>Answer:</em>
      </p>
      <p>
            Run </p>
      <codeblock>'sudo daemonic enable mysql'</codeblock>
      <p>
            From 'fink info mysql':</p>
      <p>
            Usage Notes:</p>
      <p>
            The package creates the administrative tables on installation. Be sure
            to set a MySQL root password using mysqladmin:</p>
      <codeblock>mysqladmin -u root password your-new-password
or
mysqladmin -u root -h localhost -p password your-new-password</codeblock>
      <p>
            You can start the MySQL server manually</p>
      <p>
            1) using 'safe_mysqld --user=mysql &amp;' - version 3.x</p>
      <p>
            2) using 'mysqld_safe --user=mysql &amp;' - version 4.x</p>
      <p>
            or you can run </p>
      <codeblock>'daemonic enable mysql'</codeblock>
      <p> to create a StartupItem for it.</p>
      <p>
            All of these must be done as root.</p>
    </section>
    <section>
      <title>Blackbox
            Tips</title>
      <p>
                 You can configure the applications to appear in the app-launcher in
            your '~/.blackbox/menu' file.</p>
      <p>
            Download some nice themes and cp them to:</p>
      <codeblock>/sw/share/Blackbox/styles</codeblock>
      <p>
            If you use blackbox, you can also install the packages:</p>
      <p>'bbkeys':
            Key binding handler for Blackbox.</p>
      <p>'bbmail':
            Email-watcher designed for use with Blackbox.</p>
      <p>'bbpager':
            Pager tool for the Blackbox window manager.</p>
    </section>
    <section>
      <title>Xmms
            no sound</title>
      <p>
                  Since xmms forks an esd process the first time you run it then you'll
            might have one running as root already, to confirm try:</p>
      <codeblock>ps -auxw | grep esd</codeblock>
      <p>
            If the first column is root hunt that process down and kill it, and restart
            esd from the command line.</p>
      <p>
            Be sure to select the &quot;eSound Output Plugin&quot; in the xmms preferences.</p>
      <p>
            Run in an xterm:</p>
      <codeblock>esd &amp;</codeblock>
      <p>
            if you hear a sound, then it should be working.</p>
      <p>
            Then run in an xterm:</p>
      <codeblock>xmms &amp;</codeblock>
    </section>
    <section>
      <title>Xmms
            Skin Installation</title>
      <p>
        <link url="http://www.xmms.org/skins.html">Download
            Xmms Skins</link>
      </p>
      <p>
        <link url="http://ftp.pspt.fi/pub/linux/xmms/Skins/">Download
            Xmms Skins</link>
      </p>
      <p>
            XMMS creates a directory called:</p>
      <codeblock>~/.xmms/Skins/</codeblock>
      <p>
            in which you can unarchive the skins you downloaded.</p>
      <p>
            If you installed XMMS with Fink, it will look for skins in these directories:</p>
      <codeblock>/sw/share/xmms/Skins</codeblock>
      <p>
            and</p>
      <codeblock>~/.xmms/Skins</codeblock>
      <p>
            Use ALT+S when using XMMS to bring up the skin selector. XMMS will remember
            which skin you had loaded when you start XMMS the next time (saved in
            ~/.xmms/config).</p>
      <p>
            In the skin selector you have an option to use random skin on play, this
            will pick a random skin on song change.</p>
      <p>
            XMMS supports archived skins. Both .zip and .tgz (.tar.gz) archived skins
            are supported. 
            Just &quot;check&quot; if it works for you and copy the archive to one of the skin
            path's and XMMS will take care of the rest. 
            In order to support zipped skins you will need to have unzip installed.</p>
      <p>
            If this doesn't work for you, then just unarchive the skin and copy the
            folder to one of the Skins directories.</p>
    </section>
    <section>
      <title>Select
            multiple mp3 files in xmms</title>
      <p>
            When you select multiple mp3 files for xmms to play, sometimes the player
            just freezes after the end of the first track. 
            In contrast - when selecting only single mp3s for playback everything
            is fine.</p>
      <p>
            However, there is a workaround:</p>
      <p>
            Open XMMS preferences -&gt; Options -&gt; Click on:</p>
      <p>
            &quot;Pause between songs for 2 seconds&quot;</p>
      <p>
            (maybe 1 sec is also sufficient).</p>
      <p>
            This seems to avoid the buffer overrun.</p>
    </section>
    <section>
      <title>Pico
            Editor basic commands</title>
      <p>
                  Pico is a simple text editor based upon the Pine Message/mail System.</p>
      <p>
            Editing commands are entered using control-key combinations. 
            The most important commands are displayed at the bottom of the screen,
            facilitating ease of use.</p>
      <p>
            To start pico, simply use the command &quot;pico&quot; followed by the name of
            the file you wish to edit. 
            If the file exists, pico will start with that file. If it does not exist,
            then pico will assume that it is a new file.</p>
      <p>
            The basic commands provided by pico include:</p>
      <codeblock>CTRL-G - get help 
CTRL-X - exit 
CTRL-O - write out to a file 
CTRL-J - justify text 
CTRL-R - read a file 
CTRL-W - where is (search) 
CTRL-Y - previous page 
CTRL-V - next page 
CTRL-^ - mark cursor position as start of selected text
CTRL-K - cut text 
CTRL-U - uncut text / paste 
CTRL-T - check spelling 
CTRL-C - cursor position information 
CTRL-F - move forward a character
CTRL-B - move backward a character
CTRL-P - move to the previous line
CTRL-N - move to the next line
CTRL-A - move to the beginning of the current line
CTRL-E - move to the end of the current line
CTRL-L - refresh the display
CTRL-D - delete the character at the cursor position
CTRL-I - insert a tab at the current cursor position</codeblock>
      <p>
            Note that cursor positioning can also be accomplished by using the up,
            down, right and left arrow keys.</p>
    </section>
    <section>
      <title>Fluxbox
            Tips</title>
      <p>To use
            your own configuration:</p>
      <p>
            Create a directorory, in your homedir, called .fluxbox and copy: init,
            keys and menu from </p>
      <codeblock>/sw/share/fluxbox/</codeblock>
      <p>. 
            Dont forget to change session.menuFile and session.titlebarFile in the
            file init.</p>
      <p>
            You can use your old blackbox configuration file too. Just copy:</p>
      <codeblock> .blackboxrc to ~/.fluxbox/init</codeblock>
      <p>
            The same goes for menu file.</p>
      <p>
            You can also use the Blackbox themes in Fluxbox. If there isn't any format
            for the tab in the theme then the tab will have the same theme as the
            titlebar.</p>
      <p>
            The keys config file can be selected in the file init:</p>
      <codeblock>session.keyFile: [filename here]</codeblock>
      <p>
            The keys file is no longer compatible with bbkeys. There's a convertkeys
            script at:</p>
      <p>
        <link url="http://fluxbox.sourceforge.net/">Convert
            Keys script</link>
      </p>
      <p>
            that will convert the bbkeys format to the fluxbox format.</p>
      <p>To change the default startup
            'style':</p>
      <p>
            The init file has several parameters--it starts with a style called 'Clean'.
            You can change this to a different style if you wish.</p>
      <p>
            Find the line that reads:</p>
      <p>
            session.styleFile: /sw/share/fluxbox/styles/</p>
      <codeblock>Clean</codeblock>
      <p>
            Say you wish to start with the 'Rancor style'. You would change the above
            session.styleFile to:</p>
      <p>
            session.styleFile: /sw/share/fluxbox/styles/</p>
      <codeblock>Rancor</codeblock>
      <p>A
            quick example of menus:</p>
      <p>
            Open your home directory's .fluxbox/menu file. You'll see that the pattern
            of a menu item is:</p>
      <codeblock>[exec] (xterm) {xterm}</codeblock>
      <p>
            The exec means you can execute the command, the second item is how it
            will appear in the menu and the third, in curly braces is the actual
            command. 
            Say you wanted to add 'aterm' to the menu file and you want it to appear
            directly under the listing for xterm. So, under the listing for xterm
            add:</p>
      <codeblock>[exec] (aterm) {aterm}</codeblock>
      <p>
            The second listing is how it will appear when you see the available menu
            options. 
            So, you could write Aterm or ATERM in there--it makes no difference.
            You can add whatever programs you wish, under the pre-existing menus
            and submenus.</p>
      <p>A few extra notes:</p>
      <p>
            To disable tabs and/or iconbar just change it in configure menu.</p>
      <p>
            To work with tabs, use the third mouse button to drag a tab to another
            tab. This will group the two windows together.</p>
      <p>
            With 'Sloppy Window Grouping' turned on (in your configure menu), you
            can drop the tabs anywhere on the target window to group windows together.</p>
      <p>
            The 'Maximize over Slit' option means that maximized windows will not
            stop at the outside border of the slit, and will instead cover it.</p>
      <p>
            In the init file, the </p>
      <codeblock>session.screen0.rootCommand:</codeblock>
      <p> option will override the rootCommand
            option in a theme- keeping your background the same, no matter what the
            theme says it should be.</p>
    </section>
    <section>
      <title>ImageMagick
            Tips</title>
      <p>
            You can use 'display', part of the ImageMagick suite of tools,
            to view an image in X11. 
            If you run display and the file name of the image to be viewed, it displays
            the image in a new window. Run:</p>
      <codeblock>display name_of_file.jpeg</codeblock>
      <p>
            If you left-click on the image window it will open the display 'command
            menu' in a new window. 
            Menu items let you change the image size and otherwise change or transform
            the image display. 
            For an explanation of the various available display commands, choose
            Overview from the Help menu.</p>
      <p>
            If you middle-click on the image it will open a new window with a magnified
            view of the image centered where you click or 
            if you right-click on the image window a pop-up menu containing a few
            of the most frequently-used commands will come up. 
            The commands included are:  Quit, which exits display, and the Image
            Info, which displays information about the image file, including number
            of colors, image depth, and resolution.</p>
      <p>
            display can also be used to view images on the World Wide Web.</p>
      <p>
            To put an image in the root window, run: </p>
      <codeblock>display -window root name_of_file.jpeg</codeblock>
    </section>
    <section>
      <title>To
            turn off Eterm random backgrounds</title>
      <p>
                  The default themes all choose background pictures at random from the
            collection supplied with Eterm. 
                  The lines in the config file that activate this behavior are shown
            here:</p>
      <codeblock># Here you set the file.You can also set the geometry string if you follow the filename with
# an @ sign.  That way, you can include the geometries in your pixmaps.list file.
file &#37;random(`cat pixmaps.list`)</codeblock>
      <p>
            The first two lines are merely comments. The third line does the actual
            work. 
            The backquotes are evaluated first to cat the pixmaps.list file and include
            its contents as the parameters to the &#37;random() function.</p>
      <p>
            The function then picks one parameter at random and returns it. Thus,
            the name of the randomly-selected pixmap becomes the parameter to the
            file attribute.</p>
      <p>
            In order to deactivate this behavior, simply change this line to refer
            to a specific image file, or alter the mode line (just below the file
            line) 
            to specify a mode other than image for the background.</p>
    </section>
    <section>
      <title>Emacs
            commands</title>
      <codeblock>C-x C-s     Save file
C-x C-f     Find (open) file.
C-x C-z     Leave emacs temporarily (to return use &quot;fg&quot;)
C-x C-c     Quit emacs
C-g     Abort command (get out of trouble)
C-f     Move cursor forward one character
C-b     Move cursor backwards one character
C-n     Move cursor to next line
C-p     Move cursor to previous line
C-a     Move cursor to beginning of line
C-e     Move cursor to end of line
C-v     Go forward one screen
M-v     Go backward one screen
C-k     Kill text from cursor to end of line.(Cut text out)
C-y     Yank back killed text.(Paste text in)
C-l     Redisplay the screen if it is garbled.
M-f     Move cursor forward one word
M-b     Move cursor backwards one word
M-&gt;     Move to end of file
M-&lt;     Move to beginning of file
C-u 7 C-n       Move forward 7 lines
C-u 10 C-p     Move back 10 lines</codeblock>
      <p>
            Emacs has an excellent on-line help tutorial. To use it, start up emacs.
            When you are &quot;in emacs&quot;, type C-h, then type the letter &quot;t&quot;. 
            Follow directions. When you wish to leave the tutorial, type C-x C-c.</p>
    </section>
    <section>
      <title>To
            view man pages in html</title>
      <p>
                  (Thanks to Paul McCann (pmccann) for the tip)</p>
      <p>
            Install with Fink the rman package. It takes man pages from most of the
            popular flavors of UNIX and transforms them into any of a number of text
            source formats. 
            For more info about rman check:</p>
      <p>
        <link url="http://polyglotman.sourceforge.net/">Polyglotman
            web site</link>
      </p>
      <p>
            Then, use rman via a script to generate an html file and open the file
            in your default browser.</p>
      <codeblock>#!/bin/sh
# Writes an html formatted manpage to a given file, then
# opens the default browser to display the thing (assuming
# that you've associated .html files with your browser of choice
# Otherwise use eg &quot;open -a mozilla $tfile&quot; on the last line
tfile=/Users/yourusername/junk/somefile.html
man $1 | rman -f HTML &gt; $tfile
open $tfile</codeblock>
      <p>
            You'll have to change the path to the outfile </p>
      <p>
            (which is overwritten every time you call the script)</p>
      <p>
            Save the script in ~/bin/bman (for example)</p>
      <p>
            then &quot;chmod u+x ~/bin/bman&quot;, then &quot;rehash&quot; </p>
      <p>
            and finally you can run for example:</p>
      <p>
            &#37; bman tcsh</p>
    </section>
    <section>
      <title>Debug
            tools</title>
      <p>
            If you installed Apple's developer tools, check:</p>
      <p>'man gdb': 
            (The GNU Debugger)</p>
      <p>'man otool':
            (-tool to display specified parts of object files or libraries)</p>
      <p>'man ktrace': 
            (-enables kernel trace logging for the specified processes)</p>
      <p>'man 1 dyld':
            (-the dynamic link editor (useful env vars))</p>
      <p>'man install_name_tool':
            (-change dynamic shared library install names)</p>
      <p>otool examples:</p>
      <codeblock>otool -Lv YourBinaryHere</codeblock>
      <codeblock>otool -LV /sw/bin/gimp-real</codeblock>
      <codeblock>otool -L /sw/bin/dpkg</codeblock>
      <codeblock>otool -L /sw/lib/libgdal.1.1.dylib</codeblock>
      <codeblock>otool -L /sw/lib/libk* | less</codeblock>
      <codeblock>otool -L /sw/lib/*.dylib</codeblock>
    </section>
    <section>
      <title>To
            list the files installed by a package</title>
      <p>
            To get a list of all of the files installed by a package, run:</p>
      <codeblock>dpkg -L packagename</codeblock>
    </section>
    <section>
      <title>To
            find out what package a particular file is part of</title>
      <p>
            To find out what package a particular file is part of, run:</p>
      <codeblock>dpkg -S filename</codeblock>
      <p>Fast
            alternative to dpkg -L and dpkg -S</p>
      <p>
            With Fink you can install:</p>
      <p>dlocate-0.5-2</p>
      <p>
            &quot;Uses GNU locate to greatly speed up finding out which package a file
            belongs to (i.e. a very fast dpkg -S). many other uses, 
            including options to view all files in a package, calculate disk space
            used, view and check md5sums, list man pages, etc&quot;.</p>
    </section>
    <section>
      <title>To
            check which packages are out of date</title>
      <codeblock>fink list -o</codeblock>
    </section>
    <section>
      <title>To
            delete the &quot;old deb files&quot; via Fink</title>
      <p>
            Run from terminal.app the command:</p>
      <codeblock>sudo apt-get autoclean</codeblock>
      <p>
            And, if you use source, to clean up the old .deb files, run the command:</p>
      <p>
            (or from the FinkCommander menu, Source -&gt; Utilities -&gt; &quot;Cleanup&quot;)</p>
      <codeblock>fink cleanup</codeblock>
    </section>
    <section>
      <title>fix-fink</title>
      <p>version-2.1-1</p>
      <p>
            David R. Morrison updated the </p>
      <codeblock>fix-fink</codeblock>
      <p> program to help people update their libpng
            libraries to libpng3 and hopefully cure the libpng/libpng3 woes.</p>
      <p>
            &quot;Here's what it does: it examines all of your libraries and executables
            to see if they link to libpng.2.dylib, and if they do, 
            it tells you to rebuild the corresponding fink packages. This only makes
            sense, by the way, if you have run &quot;fink selfupdate-cvs&quot; on March 10-2003
            or later 
            (to make sure that the &quot;libpng -&gt; libpng3&quot; updates are present on your
            system)&quot;.</p>
      <p> 
            He also updated the older part of fix-fink so that it should no longer
            report &quot;false positives&quot; on the test that it runs.</p>
      <p> 
            Warning: if you have KDE installed, then fix-fink is going to want to
            rebuild your KDE packages, updating them to the new KDE 3.1 packages.
            This could take a day or more of compiling, so you might want to time
            your execution of fix-fink appropriately.</p>
      <p> 
            There is one situation in which fix-fink is slightly tricky to use. If
            you have at some point in the past installed some packages from the unstable
            tree, 
            but are currently using the stable tree, fink might get confused by the
            instruction to rebuild the packages.  
            In this case, you can temporarily turn on the unstable tree, run fix-fink,
            and then revert to the stable tree after everything has been rebuilt.</p>
    </section>
    <section>
      <title>Bluefish
            and Safari</title>
      <p>
            To get Safari to preview the page that is being written up in Bluefish:</p>
      <p>
            I use 'fink installed bluefish-0.11-1' in 'Apple's X11 rootless' with
            Safari, so I wrote the following in:</p>
      <p>
            Bluefish --&gt;Options --&gt;Preferences --&gt;External programs --&gt;</p>
      <p>
        <em>browser = Safari</em>
      </p>
      <p>
        <em>Command = open /Applications/Safari.app &#37;s &amp;</em>
      </p>
    </section>
    <section>
      <title>To
            add apps to the gnome2 menus</title>
      <p>
            To customize your menus, you can use the Nautilus file manager (check
            the info with &quot;Help&quot;) or Launcher Popup menu.</p>
      <p>Launcher Popup menu:</p>
      <p>
            When you right-click on a launcher in a menu, the popup menu for the
            launcher opens. 
            Check the submenu--&gt;Entire menu --&gt;Add new item to this menu. </p>
      <p>
            Another window will open where you fill the name, the command of your
            apps, and choose an icon. 
            Press ok. Your apps will now appear in your panel menu.</p>
      <p>
            I'm using Apple's X11 with gnome2, but I deselect &quot;Use Nautilus to draw
            the desktop&quot; in the Preferences of the Nautilus File Manager 
            as I like to run Apple's X11 in rootless mode. (together with MacOS X
            desktop) and then I access most of my apps through 
            the Apple's X11 'Applications' menu which I can access also from the
            dock.</p>
    </section>
    <section>
      <title>KDE
            Tips</title>
      <p>
            -Once KDE launches my mouse clicks become unresponsive once the tips
            screen appears:</p>
      <p>
            You need to turn off 'Enable icons on desktop' in:</p>
      <codeblock>Control Panel -&gt; Desktop -&gt; Behavior</codeblock>
      <p> 
            The transparent root window desktop is over the Aqua desktop. 
            You may need to select Minimize from the X11 Window menu intially to
            access the Control Panel.</p>
      <p>
            ---------</p>
      <p>KDE Multiple Desktops on Panther</p>
      <p>
            The desktops are a function of the window manager.
            If you use KDE with quartz-wm you only will get
            'one' virtual desktop. In order to use Multiple
            Desktops in KDE with Apple's X11, create a .xinitrc file
            in your home directory, with the following lines:</p>
      <codeblock>source /sw/bin/init.sh
export KDEWM=kwin
/sw/bin/startkde &gt;/tmp/kde.log 2&gt;&amp;1</codeblock>
      <p>
            ---------</p>
      <p>Fonts</p>
      <p>
            -navigate to KDE's control panel for system fonts, use the drop down
            to pick something that works.</p>
      <p>
            ---------</p>
      <p>
            -Take a look through the /sw/bin/startkde script. There are several instructions
            early in the script's execution 
            that focus on font location and what fonts will be made available to
            X11. 
            There are 5 different checks and possible font activations- X fonts,
            user fonts, system fonts, user override fonts, and system override fonts.</p>
      <p>
            ---------</p>
      <p>
            -In applications that support the Xft font rendering, Apple's X11 can
            shortcut directly 
            to Apple's font renderer, and you have access to all of the fonts in
            OSX, as well as X11 fonts.</p>
      <p>
            -You can install fink applesystemfonts package to make your fonts visible
            to x11 non-xft apps.</p>
      <p>
            ---------</p>
      <p>
            -anti-aliasing is implemented in X11. It works just fine in KDE, with
            a default configuration. 
            Go into the font settings and pick an Xft-supported font.</p>
    </section>
    <section>
      <title>To
            send the compile output to a text file</title>
      <codeblock>In tcsh:fink install
packagename |&amp; tee ~/Finklogs/packagename.log
In bash:fink install packagename 2&gt;&amp;1 | tee ~/Finklogs/packagename.log</codeblock>
    </section>
    <section>
      <title>Adding
            options to a package .info file</title>
      <p>Example: </p>
      <p> Adding
            &quot;--with-python&quot; option to vim</p>
      <p>
            Create a directory</p>
      <codeblock>/sw/fink/dists/local/main/finkinfo/editors</codeblock>
      <p>
            and copy the vim .info file (and .patch file if it exists) in there.</p>
      <p>
            Add:</p>
      <codeblock>--with-python</codeblock>
      <p>
            or whatever you want to the ConfigureParams line and increment the revision
            number.</p>
      <p>
            Then, Add:</p>
      <p>
            &quot;local/main&quot; to the 'Trees' line in /sw/etc/fink.conf.</p>
      <p>
            Finally,</p>
      <codeblock>fink update vim</codeblock>
      <p>
            Question: Would any updates to vim require me to fiddle with the configure
            script before each installation?</p>
      <p>
            If the vim package is updated to a revision number higher than the one
            in your local directory, a &quot;fink update-all&quot; will replace your version.
            To get around this, call your vim package &quot;vim-python&quot; and add:</p>
      <codeblock>Conflicts: vim</codeblock>
      <codeblock>Replaces: vim</codeblock>
      <codeblock>Provides: vim</codeblock>
      <p>
            to the .info file (this is what is done for the vim-nox package - you
            might just use that one as a starting point).</p>
    </section>
    <section>
      <title>Sharing
            the Fink</title>
      <p>
                  (How to share software between more than one fink installation)</p>
      <p>
            Thanks to Benjamin Reed (Fink Project Lead).</p>
      <p>
        <link url="http://ranger.befunk.com/blog/">Tales
            of the Racoon Fink</link>
      </p>
      <p>
            October 29, 2003</p>
      <p>
            ---------------------</p>
      <p>Sharing the Fink</p>
      <p>
            &quot;I was recently asked how to share software between more than one fink
            installation. 
            This is usually because the person has 2 (or more) machines, only one
            of which is fast. =) 
            It's pretty easy to share binaries you've built on one system with another.
            Here's how (keep in mind these instructions will generally only work
            if each system is running the same major version of Mac OS X):</p>
      <p>1. Install Fink on the &quot;master&quot;
            (build) system.</p>
      <p>2. (If the clients
            already have fink installed, you can skip this step.) Copy /sw to the
            &quot;client&quot; systems. 
            First you must enable &quot;Remote Login&quot; on the &quot;master&quot; box. Then, run the
            following on each of the &quot;client&quot; machines:</p>
      <codeblock>sudo rsync -avzr -e ssh user@otherhost:/sw/ /sw/</codeblock>
      <p>
            Just replace user@otherhost above with the username and hostname of the
            system to copy from.</p>
      <p>
            This will make a clone of the fink installation on your &quot;master&quot; box
            on each of the clients.</p>
      <p>3. On the &quot;master&quot;
            box, build something, and then run:</p>
      <codeblock>fink scanpackages</codeblock>
      <p>
            This will make fink generate apt indexes for all of your enabled trees.</p>
      <p>4. On the &quot;master&quot;
            box, enable:</p>
      <codeblock>&quot;Personal Web Sharing&quot;</codeblock>
      <p>
            in the Sharing section of System Preferences, and then set up httpd to
            expose your /sw/fink directory externally. I do so by making an:</p>
      <codeblock>/etc/httpd/users/fink.conf</codeblock>
      <p> file that contains:</p>
      <codeblock>Alias /fink /sw/fink&lt;Directory /sw/fink&gt;
Options Indexes FollowSymLinks&lt;/Directory&gt;</codeblock>
      <p>
            ..and then run:</p>
      <codeblock>sudo /usr/sbin/apachectl graceful</codeblock>
      <p> to (re)start.</p>
      <p>5. On
            the &quot;client&quot; box(es), edit:</p>
      <codeblock>/sw/etc/apt/sources.list</codeblock>
      <p>
            and add the lines representing your fink trees. For example, if my IP
            address of my build box at home is 192.168.42.7, the client would add:</p>
      <codeblock>deb http://192.168.42.7/fink stable main crypto
deb http://192.168.42.7/fink unstable main crypto
deb http://192.168.42.7/fink local main</codeblock>
      <p>6. On the &quot;client&quot;
            box(es), run:</p>
      <codeblock>sudo apt-get update</codeblock>
      <p>
                 If all goes well, you should see something like:</p>
      <codeblock>Hit http://192.168.42.7 stable/main Packages
Hit http://192.168.42.7 stable/main Release
Hit http://192.168.42.7 stable/crypto Packages
...and so on</codeblock>
      <p>7. You should
            then be able to do:</p>
      <codeblock>sudo apt-get install &lt;package&gt;</codeblock>
      <p>
                 for anything that's been built on the &quot;master&quot; box.</p>
      <p>
                 Any time you build more stuff there, you will need to re-run:</p>
      <codeblock>fink scanpackages</codeblock>
      <p> on the master,</p>
      <p>
                  and</p>
      <codeblock>sudo apt-get update</codeblock>
      <p> on the client(s)&quot;.</p>
    </section>
    <section>
      <title>Reinstalling
            Fink Tips</title>
      <p>
            To reinstall fink you need to remove all of /sw by</p>
      <codeblock>sudo rm -rf /sw</codeblock>
      <p>
            but you can save /sw/src and /sw/etc.</p>
      <p>
            /sw/src is sources you'll need to have to download again.</p>
      <p> 
            /sw/etc is where configs are kept, if you changed any of them.</p>
      <p>
            For example to save /sw/src do the following:</p>
      <codeblock>sudo mv /sw/src ~</codeblock>
      <p>
            then when you reinstall fink, it will ask you for a place where</p>
      <p> 
            additional sources are, and you can then enter:</p>
      <codeblock>/Users/username/src</codeblock>
    </section>
    <section>
      <title>Sleeping
            during compile</title>
      <p>
            If you have a compile going on and close the lid of your ibook, the compilation
            will be temporarily suspended 
            and your computer will go to sleep.  When you open the lid the compilation
            will resume when the computer wakes up. It's pretty safe.</p>
      <p>Note:</p>
      <p>
            It happened in some cases, that the iBook accidentally couldn't sleep,
            like for example, 
            if after RAM or an AirPort Card installation, the keyboard was not properly
            installed back causing some key(s) being pressed by the lid, 
            which prevented the iBook from going to sleep.</p>
    </section>
    <section>
      <title>Uninstalling
            Gnome</title>
      <p>
            There is no package that does the corresponding *uninstalling*.</p>
    </section>
    <section>
      <title>Running
            ethereal</title>
      <p>
            Ethereal needs to be run as root. If you are not root, you will not see
            any devices. 
            In 10.2, you could run 'sudo open-x11 ethereal'. 
            In 10.3 you can start from an xterm with:</p>
      <codeblock>sudo ethereal</codeblock>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="commands">
    <title>      /
          Commands /</title>
    <shorttitle>      /
          Commands /</shorttitle>
    <preface>
      <p>
        <em>fink</em>
      </p>
      <p> 
            A package management system that aims to bring the full world of GNU
            and other common Open Source software to Darwin and MacOS X.</p>
      <p>
        <em>fink.conf</em>
      </p>
      <p> 
            The configuration file for fink (/sw/etc/fink.conf)</p>
      <p>
        <em>apt-get</em>
      </p>
      <p> 
            The  command-line tool for handling packages, and may be considered the
            user's &quot;back-end&quot; to other tools using the APT library.</p>
      <p>
        <em>dselect</em>
      </p>
      <p> 
            The primary user interface for managing packages on a Debian  system.</p>
      <p>
        <em>dpkg</em>
      </p>
      <p> 
            A medium-level package manager for Debian.</p>
      <p/>
    </preface>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">Fink
            Commands</link>
      </p>
      <p>
        <link url="#top2">The fink.conf file</link>
      </p>
      <p>
        <link url="#top3">Apt-get
            commands</link>
      </p>
      <p>
        <link url="#top4">Dselect</link>
      </p>
      <p>
        <link url="#top5">Dpkg</link>
      </p>
    </section>
    <section>
      <title>Fink
            Commands</title>
      <p>
                  &quot;Fink has several commands that work on packages. All of them need
            at least one package name, and all can handle several package names at
            once. 
                  You can specify just the package name (e.g. gimp), or a fully qualified
            name with a version number (e.g. gimp-1.2.1 or gimp-1.2.1-3). 
                  Fink will automatically choose the latest available version and revision
            when they are not specified&quot;</p>
      <codeblock>fink install 'package...'</codeblock>
      <p>  
            Is used to install packages. It downloads, configure, builds and installs
            the packages. Check dependencies.</p>
      <codeblock>fink remove</codeblock>
      <p>   
            Removes the actual package, but leaves the .deb compressed package file
            intact. Does not check dependencies.</p>
      <codeblock>fink update-all</codeblock>
      <p>            
            Updates all installed packages to the latest version.</p>
      <codeblock>fink list</codeblock>
      <p>         
            Produces a list of available packages, listing installation status, the
            latest version and a short description.</p>
      <codeblock>fink describe</codeblock>
      <p>
            Displays a description of the package you name on the command line.</p>
      <codeblock>fink fetch</codeblock>
      <p>
            Downloads the package even if it was downloaded before, but does not
            install it. </p>
      <codeblock>fink fetch-all</codeblock>
      <p>                     
            Downloads all package source files, even if they were downloaded before.</p>
      <codeblock>fink fetch-missing</codeblock>
      <p>     
            Downloads all package source files, but only those files that are not
            present on the system.</p>
      <codeblock>fink build</codeblock>
      <p>
            Builds a package, but does not install it, and download the source if
            it is not present.</p>
      <codeblock>fink rebuild</codeblock>
      <p>
            Builds a package, but ignores and overwrites the existing .deb file,
            upgrades package with the newest build.</p>
      <codeblock>fink reinstall</codeblock>
      <p>
            Same as install, but will install the package via dpkg even when it is
            already installed.</p>
      <codeblock>fink configure</codeblock>
      <p>
            Reruns the fink configuration process. Will let you change your mirror
            sites and proxy settings.</p>
      <codeblock>fink selfupdate</codeblock>
      <p>
            Upgrades fink and updates the core packages, including fink itself. It
            can also setup your /sw/fink/dists directory tree for direct CVS updates.
            Then you will be able to access the very latest revisions of all packages.</p>
      <codeblock>fink index</codeblock>
      <p>                   
            Rebuilds the package cache. You should not normally need to execute this
            manually. Fink should auto-detect when it needs to be updated.</p>
    </section>
    <section>
      <title>The
            fink.conf file</title>
      <p>
                 &quot;When fink is initially installed it prompts you for the answers to
            some questions to set up your configuration file, 
                 such as which mirrors you want to use for downloading files and how
            to acquire super-user rights. 
                 You can re-run this process by calling the fink configure command.
            In order to set some options, you may need to edit your fink.conf by
            hand&quot;. </p>
      <p>Trees:</p>
      <p>
            Normally used to choose between the stable/main and unstable/main trees.
            Edit this line to use the unstable tree if you want to install from the
            unstable section.</p>
      <p>ProxyPassiveFTP:</p>
      <p>
            It is safest to set this to true, it  is the default.</p>
      <p>DownloadMethod:</p>
      <p>
            You have a choice of using either curl or wget to download. The default
            is curl. </p>
      <p>ProxyHTTP:</p>
      <p>
            This line is your HTTP proxy settings. 
            You may find it easier to edit this line directly rather than running
            fink configure.</p>
      <p>ProxyFTP:</p>
      <p>
            Your ftp proxy settings.</p>
    </section>
    <section>
      <title>Apt-get
            Commands</title>
      <codeblock>update</codeblock>
      <p>
            This command retrieves and scans the Packages.gz files, so that information
            about new and updated packages is available. 
            Should always be performed before an upgrade or dist-upgrade.</p>
      <codeblock>upgrade</codeblock>
      <p>
            Is used to install the newest versions of all packages currently installed
            on the system.</p>
      <codeblock>dselect-upgrade</codeblock>
      <p>
            dselect-upgrade follows the changes made by dselect to the Status field
            of available packages, and performs the actions necessary to realize
            that state 
            (for instance, the removal of old and the installation of new packages).</p>
      <codeblock>dist-upgrade</codeblock>
      <p>
            Performes the function of upgrade, and also handles changing dependencies
            with new versions of  packages;</p>
      <codeblock>install</codeblock>
      <p>                 
            Download and installs especified deb package. Don't forget to run 'apt-get
            update' first.</p>
      <codeblock>remove</codeblock>
      <p>                   
            Removes package and check dependencies. </p>
      <codeblock>source</codeblock>
      <p>                 
            Makes apt-get fetch source packages. </p>
      <codeblock>build-dep</codeblock>
      <p>                 
            Install/remove packages in an attempt to satisfy the build dependencies
            for a source packages. 
            Right now virtual package build depends choose a package at random.</p>
      <codeblock>check</codeblock>
      <p>
            check is a diagnostic tool; it updates the package cache and checks for
            broken dependencies.</p>
      <codeblock>clean</codeblock>
      <p>                      
            Clean clears out the local repository of retrieved package files. 
            Those who do not use dselect will likely want to run apt-get clean from
            time to time to free up disk space.</p>
      <codeblock>autoclean</codeblock>
      <p>   
            Like clean, autoclean clears out the local repository of retrieved package
            files. 
            The difference is that it only removes package files that can no longer
            be downloaded, and are largely useless.</p>
    </section>
    <section>
      <title>Dselect</title>
      <p>
                  Is the primary user interface for installing, removing and managing
            Debian GNU/Linux packages. 
                  It is an front-end to dpkg. At the  dselect  main menu, the system
            administrator can:</p>
      <p>
            Update the list of available package versions,</p>
      <p>
            View the status of installed and available packages,</p>
      <p>
            Alter package selections and manage dependencies,</p>
      <p>
            Install new packages or upgrade to newer versions.</p>
      <codeblock>Update</codeblock>
      <p>
            Updates list of packages available to dpkg/dselect with data from the
            chosen repository Packages file(s).</p>
      <codeblock>Select</codeblock>
      <p> 
            Selects individual packages to install.</p>
      <codeblock>Install</codeblock>
      <p> 
            Installs selected packages.</p>
      <codeblock>Config</codeblock>
      <p>
            Configures any previously not configured packages.</p>
      <codeblock>Remove</codeblock>
      <p>
            Removes or purges deselected packages.</p>
      <codeblock>Quit</codeblock>
      <p>
            Exit dselect (successfully).</p>
    </section>
    <section>
      <title>Dpkg</title>
      <p>
                 Is a medium-level tool to install, build, remove and manage Debian
            GNU/Linux  packages. The primary and more user-friendly front-end for
            dpkg is dselect.</p>
      <codeblock>dpkg --install packagename</codeblock>
      <p>     
            Installs the package. Check package dependencies but do not fetches dependent
            items.</p>
      <codeblock>dpkg --remove packagename</codeblock>
      <p>
            Removes package, but leaves configuration files and checks the package
            dependencies.</p>
      <codeblock>dpkg --purge packagename</codeblock>
      <p>  
            Removes package and its configuration files and checks for package dependencies.</p>
      <codeblock>dpkg -r --force-depends packagename</codeblock>
      <p>
            Remove by force an installed package, except the configuration files
            and turn all dependencies into warnings.</p>
      <codeblock>dpkg -L packagename</codeblock>
      <p>
            will show you the list of all files installed by a package.</p>
      <codeblock>dpkg -S packagename</codeblock>
      <p>
            or</p>
      <codeblock>dpkg -S /sw/bin/packagename</codeblock>
      <p>
            will show you the package that installed the specified file.</p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="faqs">
    <title>      /
          X11 v0.1- FAQs /</title>
    <shorttitle>      /
          X11 v0.1- FAQs /</shorttitle>
    <preface>
      <p>
        <em>
            - The Macosxhints Forums - </em>
      </p>
      <p>
        <em>Apple
            X11 Beta v0.1
                   Frequently Asked Questions</em>
      </p>
      <p>
        <em>This page was written while
            testing Apple's X11 Beta version.</em>
      </p>
      <p>
                  For information about Apple's X11 1.0 and Fink read the following
            pages:</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/index.html">Essential</link>
      </p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/finpan.html">Fink
&amp;
            Panther</link>
      </p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/finpan2.html">Fink-Panther
            2</link>
      </p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/faqs10.html">X11
            1.0 FAQs</link>
      </p>
      <p/>
    </preface>
    <section>
      <title>General
            Information</title>
      <p>
        <link url="#top1">X11,
            Xfree86, X-Window</link>
      </p>
      <p>
        <link url="#top2">X11 installation</link>
      </p>
      <p>
        <link url="#top3">Locating
            software to run on X11</link>
      </p>
      <p>
        <link url="#top4">Installing software to run
            on X11</link>
      </p>
      <p>
        <link url="#top5">What is Fink?</link>
      </p>
      <p>
        <link url="#top6">Using
            Fink to install Software in Apple X11</link>
      </p>
      <p>
        <link url="#top7">Fink: Setting your PATH
            environment variable</link>
      </p>
      <p>
        <link url="#top8">(Miscellaneous - forthcoming)</link>
      </p>
      <p>
        <link url="#top9">Opening
            software with xterm or the apps launcher</link>
      </p>
      <p>
        <link url="#top10">The .xinitrc file</link>
      </p>
      <p>Tips
            and troubleshooting</p>
      <p>
        <link url="#top11">Run
            X11 applications from Terminal.app</link>
      </p>
      <p>
        <link url="#top12">Problems with the hide
            command</link>
      </p>
      <p>
        <link url="#top13">The Mac menu bar coverup
            problem</link>
      </p>
      <p>
        <link url="#top14">Minimized windows</link>
      </p>
      <p>
        <link url="#top15">Events
            to the X11 root window</link>
      </p>
      <p>
        <link url="#top16">Hover events from underlying
            app</link>
      </p>
      <p>
        <link url="#top17">Cut and Paste Problem</link>
      </p>
      <p>
        <link url="#top18">Resize
            gadget completely covers the scroll</link>
      </p>
      <p>
        <link url="#top19">How to run apps at launch</link>
      </p>
      <p>
        <link url="#top20">Trouble
            getting ssh-agent working with Apple X11</link>
      </p>
      <p>
        <link url="#top21">Problem with zombies</link>
      </p>
      <p>
        <link url="#top22">Problem
            with KDE and Apple's X11</link>
      </p>
      <p>
        <link url="#top23">Problems replacing Fink
            Xfree86 with Apple's X11</link>
      </p>
      <p>
        <link url="#top24">Confusion with Fink 'system-xfree86'
            placeholder package</link>
      </p>
      <p>
        <link url="#top25">Reflections on Firewall
            rule for X11 usage</link>
      </p>
      <p>
        <link url="#top26">How to pause a Fink installation
            for X11</link>
      </p>
      <p>
        <link url="#top27">To tell Matlab to use Apple's
            X11 public beta</link>
      </p>
      <p>
        <link url="#top28">Make xterm in Apple's X11
            behave more like Terminal.app</link>
      </p>
      <p>
        <link url="#top29">Apple's X11 won't start
            anymore</link>
      </p>
      <p>
        <link url="#top30">Apple X11 Library Warning</link>
      </p>
      <p>
        <link url="#top31">Uninstalling
            Apple's X11</link>
      </p>
      <p>Keyboard
            Issues</p>
      <p>
        <link url="#top32">Keyboard
            Problem</link>
      </p>
      <p>
        <link url="#top33">Delete key</link>
      </p>
      <p>
        <link url="#top34">To
            specify your Keyboard type (French Keyboard example)</link>
      </p>
      <p>
        <link url="#top35">Switching from USA to Italian
            Pro Keyboard in X11</link>
      </p>
      <p>
        <link url="#top36">Specific German keymapping
            Problem</link>
      </p>
      <p>
        <link url="#top37">Japanese keyboard input</link>
      </p>
      <p>
        <link url="#top38">Spanish
            Keyboard with X11</link>
      </p>
      <p>Font
            Issues</p>
      <p>
        <link url="#top39">True
            Type Fonts are working well under Apple's X11</link>
      </p>
      <p>
        <link url="#top40">Adding to the font repository
            in Apple X11 on OSX</link>
      </p>
      <p>
        <link url="#top41">Apple's X11 and freetype
            aware applications</link>
      </p>
      <p>
        <link url="#top42">Tip for OpenOffice</link>
      </p>
      <p>
        <link url="#top43">Add
            extra X11 fonts</link>
      </p>
    </section>
    <section>
      <title>X11,
            Xfree86, X-Window</title>
      <p>
        <em>What
            is X11 for Mac OS?</em>
      </p>
      <p>
                  From:</p>
      <p>
        <link url="http://www.apple.com/macosx/X11/">Apple's
            X11 Page</link>
      </p>
      <p>
            &quot;X11 for Mac OS X offers a complete X Window System implementation for
            running X11-based applications on Mac OS X. 
            Based on the de facto-standard for X11, the open source XFree86 project,
            X11 for Mac OS X is compatible, fast and fully integrated with Mac OS
            X. 
            It includes the full X11R6.6 technology including a window server, libraries
            and basic utilities such as xterm&quot;.</p>
      <p>
        <em>What does &quot;X11-based applications&quot;
            mean?</em>
      </p>
      <p>
            These are applications that run in the X Window System, which is an open
            source graphic rendering engine used in Unix and Linux operating systems.
            Some of these applications include the popular Gimp graphic editing application,
            AbiWord word processor, and Open Office, which is a suite of applications
            similar to MS Office. 
            To Learn more about X11 visit:</p>
      <p>
        <link url="http://www.x.org/">X.org web
            site</link>
      </p>
      <p>
        <em>What is Xfree86?</em>
      </p>
      <p>
            From:</p>
      <p>
        <link url="http://www.xfree86.org/">XFree86.org web
            site</link>
      </p>
      <p>
            &quot;The XFree86 Project, Inc is the &quot;organisation which produces XFree86,
            a freely redistributable open-source implementation of the X Window System
            which runs on UNIX(R) and UNIX-like operating systems such as Linux,
            all of the BSD variants, Sun Solaris x86, Mac OS X (via Darwin), as well
            as other platforms like OS/2 and Cygwin.&quot;</p>
      <p>
        <em>Summary:</em>
      </p>
      <p>
            Just as the Classic environment makes it possible to run classic Mac
            OS applications in Mac OS X, so does Xfee86 make it possible to run X11
            applications in Mac OS X. 
            Apple's X11 has radically simplified the process of installing this environment.</p>
    </section>
    <section>
      <title>X11
            installation</title>
      <p>A - Go to:
                  </p>
      <p>
        <link url="http://www.apple.com/macosx/X11/">Apple's
            X11 Page</link>
      </p>
      <p>
                  to download the most recent version of X11.
                  The download is around 40 MB.</p>
      <p>B - Check the bottom of that web page for 'Apple's SDK' package and download
            it (3.8 MB)</p>
      <p>C -
            Double-click the disk image of these downloads to install as with any
            other application.</p>
      <p> 
            --------------</p>
      <p>
            If you have installed Xfree86 with Fink and want to install Apple X11:</p>
      <p>
            First make sure that you remove your existing Fink xfree86 packages,
            use dpkg with the --force-depends option from the Command-Line, like
            so:</p>
      <p>
        <em>sudo dpkg -r --force-depends xfree86-rootless
            xfree86-rootless-shlibs xfree86-base xfree86-base-shlibs</em>
      </p>
      <p>
            Then install BOTH, Apple's X11 Public Beta (41.4 MB) and the Mac OS X
            Public Beta SDK. (3.8MB). </p>
      <p>
            When done, then install Fink 'system-xfree86' package:</p>
      <p>For binaries:</p>
      <p>
        <em>'sudo
            apt-get update'
            'sudo apt-get install system-xfree86'</em>
      </p>
      <p>
            Or</p>
      <p>To install the latest 'system-xfree86'
            package from CVS, run:</p>
      <p>
            (you will need to install Apple December 2002 Developer Tools)</p>
      <p>
        <em>'fink selfupdate-cvs'
            'fink install system-xfree86'</em>
      </p>
    </section>
    <section>
      <title>Locating
            software to run on X11</title>
      <p>A. Check out:</p>
      <p>
        <link url="http://opendarwin.org/">OpenDarwin.org</link>
      </p>
      <p>
                  for available X11 packages, most notably Gimp. Download and install
            as you do OS X applications.</p>
      <p>B. For Open Office, go to:</p>
      <p>
        <link url="http://www.openoffice.org/">OpenOffice
            web site</link>
      </p>
      <p>C. Installing packages with
            &quot;Fink&quot;:</p>
      <p>
            Fink currently lists a total of 2114 packages in 22 sections (as of 1-2-03)
            you could install in precompiled binary packages or build from source.</p>
      <p>
        <link url="http://fink.sourceforge.net/download/index.php">Download
            Fink from here</link>
      </p>
      <p>D. Installing packages with
            &quot;FinkCommander&quot;:</p>
      <p>
            FinkCommander is a graphical user interface for the Fink software packaging
            system for Mac OS X.</p>
      <p>
            To download FinkCommander:</p>
      <p>
        <link url="http://finkcommander.sourceforge.net/">FinkCommander
            web site</link>
      </p>
    </section>
    <section>
      <title>Installing
            software to run on X11</title>
      <p>
                 First, make sure you download and install &quot;BOTH&quot;, X11 Public Beta (41.4
            MB) and the Mac OS X Public Beta SDK. (3.8MB) from Apple X11 web page:</p>
      <p>
        <link url="http://www.apple.com/macosx/X11/">Download
            Apple's X11</link>
      </p>
      <p>
            Do not download the &quot;common toolkits&quot; from OpenDarwin, they will likely
            interact poorly with Fink's installation.</p>
      <p>
            Then, download and install Fink:</p>
      <p>
        <link url="http://fink.sourceforge.net/download/index.php">Download
            the Fink Installer</link>
      </p>
      <p>
            Once Fink's is installed, make sure that you install with it, the 'system-xfree86'
            package, version 4.2-3 or higher by running the following commands in
            terminal.app:</p>
      <p>For binaries:</p>
      <p>
        <em>'sudo
            apt-get update'
            'sudo apt-get install system-xfree86'</em>
      </p>
      <p>
            Or</p>
      <p>To install the latest 'system-xfree86'
            package from CVS, run:</p>
      <p>
            (you will need to install Apple December 2002 Developer Tools)</p>
      <p>
        <em>'fink selfupdate-cvs'
            'fink install system-xfree86'</em>
      </p>
    </section>
    <section>
      <title>What
            is Fink?</title>
      <p>
                  Fink is free, fast and reliable. It offers the easiest and most painless
            install of Xwindows on macOS X. 
            Fink currently lists in its database 2114 packages in 22 sections you
            could install, including the unstable tree and the latest packages from
            CVS (as 1-29-03). 
            And, thanks to the hard work of the Fink developers, the fink packages
            seem to get updated fairly quickly to follow the updates in the basic
            unix source. 
            If you feel you don't need fink anymore, it's extremely easy to uninstall,
            as it keeps all the things at one place. 
            Fink has support 24/7 through the fink-mailing lists. For more information:</p>
      <p>
        <link url="http://fink.sourceforge.net/">Fink
            Web Site</link>
      </p>
    </section>
    <section>
      <title>Using
            Fink to install Software in Apple X11</title>
      <p>
                  To install the software Fink uses package managment tools ported over
            from Linux:</p>
      <codeblock>apt-get, dselect</codeblock>
      <p>and
            it's own tool named ...</p>
      <codeblock>'fink'</codeblock>
      <p>
            You can choose between two installing models:</p>
      <p>1-Pre-compiled binary packages:</p>
      <p>
            When you install a binary package what you get is a ready to run program
            saving you the time for compiling. 
            The packages are tailor-made for Mac OS X / Darwin. The tools Fink use
            to install pre-compiled binary packages are:</p>
      <codeblock>'apt-get' and 'dselect'</codeblock>
      <p>2-The
            source distribution:</p>
      <p>
            If you install from source you have the advantage to usually get newer
            software. 
            You get to test the latest packages. With Fink, you can install packages
            from source, using its own tool named 'fink'.</p>
      <p>
            So, if you run in terminal:</p>
      <codeblock>fink install 'packagename'</codeblock>
      <p>
            Fink will download the package, it will unpack it, apply any needed patches,
            auto-configure, compile, test, and install into a .deb file which gets
            installed for you by dpkg. 
            Compared to binary installs, it's a slow process -- but it can be much
            more reliable in many cases.</p>
      <p>
            To install packages from source with Fink, you need the latest version
            of Apple Developer Tools installed. 
            After you register for free, you can get them from the ADC:</p>
      <p>
        <link url="http://www.apple.com/developer/">ADC</link>
      </p>
    </section>
    <section>
      <title>Fink:
            Setting your PATH environment variable</title>
      <p>
                  If you use tcsh (the default on Mac OS X), add the following line
            to the .cshrc file in your home directory:</p>
      <p>
        <em>source /sw/bin/init.csh</em>
      </p>
      <p>
            If you don't have a .cshrc file, run these commands:</p>
      <p>
            Go to your home directory:</p>
      <codeblock>cd</codeblock>
      <p>
            Open the text editor pico, and create a file named .cshrc:</p>
      <codeblock>pico .cshrc</codeblock>
      <p>
            When the text editor open, type:</p>
      <p>
        <em>source /sw/bin/init.csh</em>
      </p>
      <p>
            at the end of the line press Return once.</p>
      <p>
            Then press Control-O, Return, and control-X</p>
      <p>
            to save the file and return to the prompt.</p>
      <p>
            Now you should type rehash or close-open the terminal window.</p>
      <p>Attention:</p>
      <p>
            If you use tcsh and happen to have a .tcshrc file in your home directory,
            this will be read instead of .cshrc .</p>
      <p>
            In this case, write then 'source /sw/bin/init.csh' in your .tcshrc file.</p>
      <p>If you are using bash, sh
            or zsh:</p>
      <p>
            Type in .profile:</p>
      <p>
        <em>source /sw/bin/init.sh</em>
      </p>
      <p>
            The scripts also add /usr/X11R6/bin and /usr/X11R6/man to your path so
            you can use X11 when it is installed.</p>
    </section>
    <section>
      <title>(Miscellaneous
            - forthcoming)</title>
    </section>
    <section>
      <title>Opening
            software with xterm or the apps launcher</title>
      <p>In an xterm:</p>
      <p>
                  simply type the directory path of the Application and hit Enter.</p>
      <p>
            - e.g.</p>
      <codeblock>/sw/bin/AbiWord</codeblock>
      <p>
            or just type:</p>
      <codeblock>AbiWord &amp;</codeblock>
      <p>
            and hit Enter.</p>
      <p>In X11, follow these steps:</p>
      <p>A.
            Choose Customize from the Application menu.</p>
      <p>B.
            Click &quot;Add Item&quot;</p>
      <p>C.
            Double Click under Name in the new item and type the name of the application.</p>
      <p>D.
            Double Click under Command and type the absolute path to the application:</p>
      <p>
            - e.g.</p>
      <codeblock>/sw/bin/AbiWord</codeblock>
      <p>
            repeat steps B and C as needed.</p>
    </section>
    <section>
      <title>The
            .xinitrc file</title>
      <p>
                  The .xinitrc file is a shell script that runs when you start the X11
            system (or when it automatically starts for you).</p>
      <p>
        <em>This file contains the commands to
            define which applications are started when your X11 system boots up.</em>
      </p>
      <p>
            It contains, for example, the commands to start the window manager, some
            xterms or a desktop environment (like GNOME or KDE), 
            along with various command line options to control their behavior or
            appearance, such as setting sizes, background colors, fonts, etc.</p>
      <p>
            By default, Apple's X11 will execute the .xinitrc file if one is present.
            If not, it will launch the quartz-wm and launch an xterm.</p>
      <p>
            If you want to run a bunch of apps at launch, add them to your .xinitrc
            file and add 'exec quartz-wm' if you want them to run with Apple's window
            manager. 
            If you want Apple's X11 to run with another window manager, add 'exec
            wmanagername' to your .xinitrc file.</p>
      <p>
            What is typically done is to start applications in the background and
            then finally start the window manager in the foreground. 
            In this way, when exit from the window manager, the .xinitrc script exits
            and the X11 system goes away.</p>
      <p>
            When the .xinitrc script exits, the X11 system will close down and allow
            you to logout.</p>
      <p>
            You will find XFree86 xinitrc default file in:</p>
      <codeblock>/usr/X11R6/lib/X11/xinit/xinitrc</codeblock>
      <p>
            To make your own .xinitrc file, copy this file to your home directory:</p>
      <codeblock>cp /usr/X11R6/lib/X11/xinit/xinitrc ~/.xinitrc</codeblock>
      <p>
            Then, you can edit it with your own choices.</p>
      <p>
            Some simple .xinitrc examples:</p>
      <p>
            It will start 'autocutsel' and 'Windowmaker':</p>
      <p>
            (You don't need autocutsel anymore in Apple's X11)</p>
      <codeblock>source /sw/bin/init.sh
autocutsel &amp;
exec wmaker</codeblock>
      <p>
            This .xinitrc file will start an xterm and Apple's quartz-wm:</p>
      <codeblock>source /sw/bin/init.sh
xterm -geometry 75x34+687+40 &amp;
exec quartz-wm</codeblock>
      <p>
            To use blackbox window manager, and start other apps at launch:</p>
      <codeblock>source /sw/bin/init.sh
xterm -geometry 75x34+687+40 &amp;
multi-gnome-terminal --geometry 75x34+687+40 &amp;
wmCalClock &amp;
wmMoonClock &amp;
wmSpaceWeather &amp;
gkrellm -w &amp;
exec blackbox</codeblock>
    </section>
    <section>
      <title>Run
            X11 applications from Terminal.app</title>
      <p>To start X11 applications
            from Terminal.app:</p>
      <p>
                   Write in your .cshrc or .login or .tcshrc file:</p>
      <codeblock>if (! $?DISPLAY) then setenv DISPLAY :0.0
endif
----------
If you are using Bash:
if [ ${#DISPLAY} -eq 0 ]; then export DISPLAY=':0.0'
fi
----------
The 'standard' way to do it in the Bourne shells:
: ${DISPLAY:=':0.0'}  export DISPLAY</codeblock>
      <p>
            This also works with zsh.</p>
    </section>
    <section>
      <title>Problems
            with the hide command</title>
      <p>
        <em>Problem:</em>
      </p>
      <p>
                  The hide command actually destroys the X11 windows. Any solution?</p>
      <p>
        <em>Workaround:</em>
      </p>
      <p>
            You should be able to revive all X11 windows after hiding. Just select
            X11 and then select &quot;Bring All to Front&quot; from the Window menu.</p>
    </section>
    <section>
      <title>The
            Mac menu bar coverup problem</title>
      <p>
                  Window title bars disappear under the Mac menu bar.</p>
      <p>
        <em>Workaround:</em>
      </p>
      <p>1- If you use wmaker instead of quartz-wm, one of the preference panels
            allows you to put a starting point for new windows (it works along with
            the automatic setting). 
            You could start new windows at x=64 and y=64 for example.</p>
      <p>
           2- In icewm you can define an area for docks, start menus and other stuff,
            which programms cannot overlap. 
            This is meant to be used with the gnome-panel, but it should also work
            with the apple-menu.</p>
      <p>3- Open
            your X11 applications with the geometry option:</p>
      <p>
            Most all properly written X11 applications accept -geometry</p>
      <p>
            (some use --geometry)</p>
      <p>
            To start them at launch, write them in your ~/.xinitrc file, for example:</p>
      <codeblock>xterm -geometry 80x24+50+60
&amp;</codeblock>
      <p>
            This will open an xterm that is 80 characters wide, by 24 high, that
            is 50 pixels right and 60 pixels down from the upper left corner of your
            screen.</p>
      <codeblock>multi-gnome-terminal --geometry 75x34+687+40 &amp;</codeblock>
      <p>
            or write them in the X11 Application menu X11:</p>
      <p> 
            (Application menu --&gt;Customize)</p>
      <codeblock>sw/bin/xemacs -geometry 70x30+100+40</codeblock>
      <codeblock>sw/bin/gvim -geometry 80x30+687+40</codeblock>
      <p>
            The &quot;units&quot; in some programs are characters (xterm, emacs) and others
            use pixels.</p>
      <p>
            For most programs the position +100+40 is in pixels.</p>
      <p>
            To learn more about geometry check </p>
      <codeblock>'man X'</codeblock>
      <p>
            (GEOMETRY SPECIFICATIONS)</p>
    </section>
    <section>
      <title>Minimized
            windows</title>
      <p>
                  Minimized windows sometimes become &quot;passive&quot;: clicking doesn't maximize
            them and they can't be removed from the dock. 
                  Curiously, quitting X11 does not help: the minimized windows simply
            stay in the dock, do not respond to a click and still can't be removed.
                  Restarting X11 doesn't change this. Up to now I've seen this only
            with xterm windows.</p>
      <p>Workaround:</p>
      <p>
            kill the Dock</p>
      <p>
            logout - login helps</p>
    </section>
    <section>
      <title>Events
            to the X11 root window</title>
      <p>
                  Greg Parker wrote 'xroot tool', it creates a small X11 window that
            routes input events to the X11 root window. 
                  In particular, you can click on it to get window manager menus.</p>
      <p>
            You can get xroot tool from here:</p>
      <p>
        <link url="http://sealiesoftware.com/xroot.c">sealiesoftware.com</link>
      </p>
    </section>
    <section>
      <title>Hover
            events from underlying app</title>
      <p>
                  An X application in the background still gets hover events when it
            should not. 
                  Little tooltips pop up from the underlying app even though you are
            in the Apple Mail application for example or if you have a GTK+ app open,
                  and then move a non-X11 window over the GTK+ app, then the GTK+ tooltips
            appear over the non-X11 window.</p>
      <p>
            This is caused by the way in which the X server gets pointer events from
            the real window server. 
            They have recently fixed most of these problems, but fixing all cases
            may have to wait for the next version of the operating system.</p>
    </section>
    <section>
      <title>Cut
            and Paste Problem</title>
      <p>
                  Apple X11 currently does not support cut and paste between other window
            managers and Aqua in the current beta release. 
                  This may get resolved in the next release.</p>
    </section>
    <section>
      <title>Resize
            gadget completely covers the scroll</title>
      <p>
                  For those X-windows that have rightside scroll-bars that are the full
            height of the window and have a bottom scroll arrow, 
                  the quartz-wm resize gadget completely covers the scroll arrow.</p>
      <p>Workaround:</p>
      <p>
            The only workaround at present is to use a different window manager.
            Apple is aware of this problem and are trying to find a way to make the
            resize box less intrusive..</p>
    </section>
    <section>
      <title>How
            to run apps at launch</title>
      <p>
                  To run a bunch of apps at launch, add them to your ~/.xinitrc file
            together with 'exec quartz-wm' if you want to run Apple window manager.</p>
    </section>
    <section>
      <title>Trouble
            getting ssh-agent working with Apple X11</title>
      <p>
                  On other Unix-like systems I have ssh-agent launch the window manager,
            so I tried the following in my ~/.xinitrc:</p>
      <codeblock>exec ssh-agent /usr/X11R6/bin/quartz-wm</codeblock>
      <p>
            the agent is running...but the window manager isn't passing crucial env
            vars to its child processes, 
            so trying to run ssh-add in an xterm results in &quot;Could not open a connection
            to your authentication agent.&quot;</p>
      <p>Workaround:</p>
      <p>
            The problem is that quartz-wm has no child processes, it's the X server
            that spawns the commands in the Applications menu. 
            So to make this work the way you want, you'll need to get the SSH_ variables
            into the initial environment of the X server, perhaps by starting it
            by hand from a shell.</p>
    </section>
    <section>
      <title>Problem
            with zombies</title>
      <p>
                  (conversation I read at Apple's x11-users list)</p>
      <codeblock>When ever I exit from X, menu-&gt;quit, I get an X11 zombie that is left around.</codeblock>
      <p>
            It's a known problem, and has been mentioned on this list a couple of
            times. I believe the suggestion is that it will be fixed in the proverbial
            Upcoming Release.</p>
      <codeblock>If I log out, all the zombies disappear.</codeblock>
      <p>
            -Yup. That's when zombies are reaped.</p>
      <codeblock>What does the system do to get rid of the zombies??</codeblock>
      <p>
            -&quot;The system&quot; doesn't do anything. The parent of the zombified children
            either exits, in which case 'init' collects them and disposes of them;
            or it calls (or should call) wait(2) or one of its friends to collect
            them. That's not happening right now. Logging out will cause the former
            to occur.</p>
      <codeblock>Can I kill off the zombies without logging out??</codeblock>
      <p>
            -They're already dead, Jim. As has been observed at least once before,
            zombies are fairly benign, unlike movies about them. 
            They essentially take up a process slot, but no (or few) other resources.
            Unless you are churning out a lot of processes, you shouldn't have to
            worry. 
            It's mostly a cosmetic deal (which will be corrected, in the fullness
            of time).</p>
    </section>
    <section>
      <title>Problem
            with KDE and Apple's X11</title>
      <p>
        <em>Problem:</em>
      </p>
      <p>
                  If you open up any window in KDE, it stays behind the current windows
            you have open in Mac OS X. 
                  If you put the mouse pointer over the window, it activates it, but
            does not bring it above the OS X window.</p>
      <p>
        <em>Answer:</em>
      </p>
      <p>
            This is one of the known bugs of Apple's X11.app. They have promised
            to fix it in the next release. You cannot do anything about it, except
            hide the Aqua windows.</p>
    </section>
    <section>
      <title>Problems
            replacing Fink Xfree86 with Apple's X11</title>
      <p>
        <em>Problem:</em>
      </p>
      <p>
                  If you had Fink's XFree86 installed, and you replaced it with Apple's
            X11, and now everything's crashing:</p>
      <p>
        <em>Answer:</em>
      </p>
      <p>
            First of all, if you previously had the &quot;threaded&quot; versions of Fink's
            XFree86 packages installed, you may need to rebuild the application that
            is crashing. 
            Some programs check for the availability of threading at build time,
            and then from then on believe that threading is available to them.</p>
      <p>
            Secondly, you may have just hit an Apple X11 bug. As of the time of this
            writing, a number of bugs are known by the Apple team and are being worked
            on.</p>
    </section>
    <section>
      <title>Confusion
            with Fink 'system-xfree86' placeholder package</title>
      <p>
                  Many people get confused between Fink's:</p>
      <p>'xfree86-base' - 'xfree86-rootless'
            packages (used to install XFree86)</p>
      <p>
            and Fink's:</p>
      <p>'system-xfree86' package 
            which is just a placeholder package for an &quot;outside Fink&quot; installed Xfree86,
            in this case Apple's X11, which installs it's own implementation of XFree86.</p>
      <p>
            So, if you want to work with Fink and you install 'Apple X11' be sure
            to install Fink 'system-xfree86' placeholder package version 4.2-3 or
            higher.</p>
    </section>
    <section>
      <title>Reflections
            on Firewall rule for X11 usage</title>
      <p>
        <em>Question:</em>
      </p>
      <p>
                  What would be a good firewall rule on the Mac, so you can use x11
            without having to switch off the firewall?</p>
      <p>
            IANA has ports 6000-6063 registered to the X Window System:</p>
      <codeblock>x11 6000-6063/tcp X Window System
x11 6000-6063/udp X Window System</codeblock>
      <p>
If X11.app is like every other X server around,</p>
      <p>
it listens by default on port 6000 for display :0.</p>
      <p>
If you open up port 6000, you should be fine.</p>
      <p>
-----------</p>
      <p>
            This works, of course, but pundits will be quick to point out that it's
            low on the security scale. 
            A better scheme, if it works for you, is to use &quot;X forwarding&quot;, via ssh.
            Cf the ssh man page for details.</p>
      <p>
            -----------</p>
      <p>
            You do _not_ need to change _any_ firewall settings to use X11 through
            ssh if ssh is already working. 
            That's the whole idea of X11 forwarding in ssh -- everything will go
            through your ssh session on port 22.</p>
      <p>
            It is a _bad_ idea to open ports 6000-60xx and connect directly through
            this. 
            Anybody listening to you connecting will see all key presses in clear
            text. Just think of, what this means when you enter passwords.</p>
      <p>
            BTW:</p>
      <p> 
            Using X11 forward in ssh saves you a lot of trouble setting things up.</p>
      <p>
            -----------</p>
      <p>Ssh and Xauth:</p>
      <p>
            Ssh does encryption and compression of the stream. The encryption is
            why it's secure, but it can make the connection very slow. 
            In my experience, and that of pretty much everyone else I work with,
            the delays necessitated by ssh encoding make the connection tremendously
            slower than if you bypass ssh. 
            You may want to try turning on compression in ssh (with the -C option
            or a config file setting). It will very much depend on the bandwidth
            of your network.</p>
      <p>
            However, if you bypass ssh, you have to ensure security. If you do not
            secure your connection somehow, you've pretty much opened your machine
            to anyone who cares to listen. 
            Even the keyboard &quot;locking&quot; that xterm provides does not protect you
            from snoopers.</p>
      <p>
            X11 has a good per-user authentication mechanism called xauth. Do not
            use the older &quot;xhost&quot;, as it only does per-machine authentication. 
            If you use xauth authentication, opening ports 6000-6063 is not a security
            hole.</p>
      <p>
            For setup time speed, use ssh to forward the connection. It's the easiest
            way to get going. It may also be the slowest network route, though. 
            Run some tests and decide what's best for your setup.</p>
      <p>
            -----------</p>
      <p>
            Xauth is very basic. When using the MIT-MAGIC-COOKIE-1 scheme the authentication
            is done by sending a random number known to both server and client across
            the network. 
            If the numbers match, the connection is allowed. However, the number
            is sent unencrypted, so it's possible for anyone watching the network
            stream to capture the random number and
            connect to your server.</p>
      <p>
            Also, the data sent across the connection isn't encrypted either, 
            so even if the authentication method is secure, eavesdroppers can still
            see everything sent between server and client, e.g. the keys you type.</p>
      <p>
        <em>In summary:</em>
      </p>
      <p>
            If you're connecting across an unsecure network use ssh.</p>
    </section>
    <section>
      <title>How
            to pause a Fink installation for X11</title>
      <p>
                  When you install a large package it can take up to several hours to
            compile it. 
                  If you want to do some other work in the meantime, the compilation
            in the background sometimes slows down the work which can be annoying.
                  Is it possible to pause a compilation for a while and then after the
            other work is done to resume it. If you started the installation manually
            in Terminal.app, you can just press:</p>
      <codeblock>Ctrl+Z</codeblock>
      <p>
            while you're in the Terminal.app window that &quot;contains&quot; the compilation
            process. The process will be stopped and put to sleep in the background.
            You can then go and do the other work, 
            and when you're ready to continue just return to the Terminal.app window
            where you stopped the process and type:</p>
      <codeblock>'fg'</codeblock>
      <p> (without quotes).
            fg = foreground</p>
      <p>
            If you are not sure whether you have stopped jobs in a given Terminal.app
            window, just type:</p>
      <codeblock>'jobs'</codeblock>
      <p>
            and you will get a list of jobs that you have put in the background.
            If there are several of them they will be marked with a number. Type
            for instance:</p>
      <codeblock>'fg 2'</codeblock>
      <p> to continue with
            job 2.</p>
      <p>
            You could also say:</p>
      <codeblock>'bg 2'</codeblock>
      <p> to continue job
            2 in the background.</p>
      <p>
            You are then free to type other commands on the shell prompt while the
            job runs in the background. Note that the background job will still send
            all output to the screen as if it were in the foreground. 
            This can interfere with the output of another command that you have started
            in the meantime, or even with the command that you're typing right now.
            The interference is actually harmless - it will not affect how another
            command is executed, nor will the output mix with anything that you type.
            If you're not sure about this, just fool around with harmless commands
            such as &quot;find&quot; that generate lots of output.</p>
      <p>
            If you find yourself in a situation where a &quot;runaway&quot; background job
            is wildly polluting your window with output and it seems you're helpless,
            just try the following:</p>
      <p>
            - blindly type </p>
      <codeblock>'fg x'</codeblock>
      <p> (where x is the number of the runaway
            job)</p>
      <p>
            - now you have the job in the foreground and you can just type:</p>
      <codeblock>Ctrl+Z</codeblock>
      <p> to put it to
            sleep, or </p>
      <codeblock>Ctrl+C</codeblock>
      <p> to abort it.</p>
      <p>
            If you'd like to start a job in the background from the first moment,
            just type your command as normal and then append an &amp; (ampersand) to the very end of the command.</p>
      <p>
            If you started the installation with FinkCommander:</p>
      <p>
            Just find the pid of the fink process by:</p>
      <codeblock>'ps aux | grep fink' </codeblock>
      <p> or something, 
            then </p>
      <codeblock>'kill -STOP thePid'</codeblock>
      <p> 
            which is similar to Ctrl+Z.</p>
      <p>
            And when you want to continue it:</p>
      <codeblock>'kill -CONT thePid'</codeblock>
      <p>
            which is similar to 'fg'.</p>
    </section>
    <section>
      <title>To
            tell Matlab to use Apple's X11 public beta</title>
      <p>
                  From a terminal type:</p>
      <codeblock>/Applications/MATLAB6p5/bin/matlab &amp;</codeblock>
      <p>
            Or you can set things up so that you have a click-able icon</p>
      <p>
            courtesy of John Iversen (iversen@nsi.edu)</p>
      <p>
            To convert matlab to smoothly use Apple's X11 for OS X:</p>
      <p>
            Go in to:</p>
      <codeblock>/Applications/MATLAB6p5/LaunchMatlab.app/Contents</codeblock>
      <p>
            and you'll find a file called 'launch_matlab.sh'.</p>
      <p> 
            Copy this to something else for safekeeping</p>
      <p>
            (e.g. 'launch_matlab.sh.oroborosx')</p>
      <p>
            Then replace the original launch_matlab.sh with the following:</p>
      <codeblock>#!/bin/sh
# $Revision: 1.5 $
# Copyright 1997-2002 The MathWorks, Inc.
#modification to work with Apple's X11
# 1/7/03 John Iversen (iversen@nsi.edu)
if [ &quot;`ps xc | grep X11`&quot; ]; then
# Bounce less if X11 for OS X is already started
# (starts up much faster than oroborosx)       
sleeptime=10       
echo LaunchMatlab: Using previously started X11 for OS X
                  
else       
sleeptime=15       
echo LaunchMatlab: Starting X11 for OS X
fi
open /Applications/X11.app
cd ../..
bin/mac/setsid bin/matlab -desktop -display :0.0 &amp;
# Bounce to let user know MATLAB is starting up.
/bin/sleep $sleeptime</codeblock>
      <p>
            You can modify yours to match.</p>
      <p>
            The only important thing is adding the line reading:</p>
      <codeblock>&quot;open /Applications/X11.app&quot;</codeblock>
      <p>
            and commenting out the line opening oroborosx.</p>
      <p> 
            The rest is just to let you know what it's doing.</p>
    </section>
    <section>
      <title>Make
            xterm in Apple's X11 behave more like Terminal.app</title>
      <p>
                  Courtesy of Mathias Meyer (mathmeye@users.sourceforge.net)</p>
      <p>
            If you want to make xterm in Apple X11 behave more like Terminal.app
            you can create a file called .Xdefaults 
            in your home directory or just add the following if it already exists:</p>
      <p>
        <link url="http://homepage.mac.com/sao1/fink/screenshots/xtermsettings.html">Click
            here for screenshot</link>
      </p>
    </section>
    <section>
      <title>Apple's
            X11 won't start anymore</title>
      <p>
                  The console output would read something like this:</p>
      <codeblock>Fatal server error:
Could not create server lock file: /tmp/.X0-lock</codeblock>
      <p>
        <em>Workaround:</em>
      </p>
      <p>
            If you don't quit X11 via &quot;Quit&quot; in its menu but by some other method
            then it leaves behind the lock file:</p>
      <codeblock>/tmp/.X0-lock</codeblock>
      <p>
            and maybe also a file:</p>
      <codeblock>/tmp/.X11-unix/X0</codeblock>
      <p>
            You have to manually remove these files first before you can start X11.app
            again.</p>
      <p>
            To have this done automatically:</p>
      <p> 
            (Tip by wgscott)</p>
      <p>
            Add a -LogoutHook switch to the console line of the /etc/ttys file. 
            Then after -LogoutHook put in the absolute path to a shell script that
            contains the following:</p>
      <codeblock>#!/bin/csh
chmod a+w /tmp/.X0-lock
chmod -R a+w /tmp/.X11-unix
rm -f /tmp/.X0-lock
rm -f -R /tmp/.X11-unix
exit</codeblock>
      <p>
            You have to restart to get it to work.</p>
      <p>
            The -LoginHook and -LogoutHook are documented here:</p>
      <p> 
            (tip by Gary Kerbaugh)</p>
      <p>
        <link url="http://developer.apple.com/techpubs...Procedures.html">Developer.apple.com</link>
      </p>
    </section>
    <section>
      <title>Apple
            X11 Library Warning</title>
      <p>
                  The following was posted on Fink's news on 2003-01-26:</p>
      <p>
            &quot;While Apple's X11 works just fine with existing binaries, it has a bug
            in the install name of the libraries that can cause some software to
            build incorrectly, 
            and will break forward-compatibility with future X11 releases.</p>
      <p>
            Ben Hines has created a script that you can use that will fix the install_name
            entries in Apple's X11 libraries, 
            but it will not repair software you have already built against the broken
            libraries&quot;.</p>
      <p>
            The script is available here:</p>
      <p>
        <link url="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/*checkout*/fink/fix-fink/install_name_fix.pl">script</link>
      </p>
      <p>
            The reponse from Apple has been: </p>
      <p>
            from Haroon Sheikh</p>
      <p> 
            (Manager Graphics Software, Apple Computer, Inc.)</p>
      <p>
            &quot;We are looking into this issue and hope to have it resolved in the next
            public release of X11ForMacOSX (no comments on when that will be)&quot;.</p>
    </section>
    <section>
      <title>Uninstalling
            Apple's X11</title>
      <p>
                  sudo rm -rf /usr/X11R6</p>
      <p>
            sudo rm -rf /etc/X11</p>
      <p>
            sudo rm -rf /Applications/X11.app</p>
    </section>
    <section>
      <title>Keyboard
            Problem</title>
      <p>
        <em>Problem:</em>
      </p>
      <p>
                  In the 'X11 application Menu' the 'azerty' keyboard is properly recognized,
            in all 'xterm' windows it switches to 'qwerty'.</p>
      <p>
        <em>Answer:</em>
      </p>
      <p>
            Apple is working on fixing this.</p>
    </section>
    <section>
      <title>Delete
            key</title>
      <p>
                  To make the delete key in Apple's X11.app behave like that in XDarwin:</p>
      <p>
            If the behavior of the delete key is different between XDarwin and Apple
            X11. 
            This can be rectified by adding the following lines to the appropriate
            X startup files:</p>
      <p>.Xmodmap:</p>
      <codeblock>keycode 59 = Delete</codeblock>
      <p>.Xresources:</p>
      <codeblock>xterm*.deleteIsDEL: true
xterm*.backarrowKey: false
xterm*.ttyModes: erase ^?</codeblock>
      <p>.xinitrc:</p>
      <codeblock>xrdb -load $HOME/.Xresources
xmodmap $HOME/.Xmodmap</codeblock>
    </section>
    <section>
      <title>To
            specify your Keyboard type (French Keyboard example)</title>
      <p>
                  The following example is for French Keyboard</p>
      <p> 
                  (adjust to your own language).</p>
      <p>
            You have to start X11 from the terminal with: (all in one line)</p>
      <codeblock>/Applications/X11.app/Contents/MacOS/X11 --xquartz-be-xinit -keymap
/System/Library/Keyboards/Francais.keymapping</codeblock>
      <p>Place in .xinitrc:</p>
      <codeblock>xmodmap -e 'keycode 66 = Mode_switch'
xmodmap -e 'keycode 69 = Alt_L'</codeblock>
      <p>
Or</p>
      <p>Without modifying anything in /System:</p>
      <codeblock>mkdir ~/Library/Keyboards
cd ~/Library/Keybaords
ln -s /Library/Keyboards/Francais.keymapping USA.keymapping</codeblock>
      <p>
            and then restart X11.app.</p>
      <p>
            Or</p>
      <codeblock>&#37; startx -- -keymap Francais.keymapping &amp;
&#37; xterm &amp;</codeblock>
      <p>In xterm:</p>
      <codeblock>&#37; cd
&#37; xmodmap -pke &gt; .Xmodmap</codeblock>
      <p>
 exit xterm and quit X</p>
      <p>Add in .xinitrc:</p>
      <codeblock>xmodmap $HOME/.Xmodmap
xmodmap -e 'keycode 66 = Mode_switch'</codeblock>
      <p>Add in .tcshrc:</p>
      <codeblock>stty -istrip</codeblock>
      <p>
            Then restart X11 by double-cliking the icon.</p>
    </section>
    <section>
      <title>Switching
            from USA to Italian Pro Keyboard in X11</title>
      <p>
                  Check the following page:</p>
      <p>
        <link url="http://php.tevac.com/artview.php?art_id=5733">Tastiera
            italiana 'PRO' con X11</link>
      </p>
    </section>
    <section>
      <title>Specific
            German keymapping Problem</title>
      <p>
                  This is specific to the German keymapping and it's not just a problem
            with Apple's X11, but with XDarwin etc. as well.</p>
      <p>
            If you launch X11 like this:</p>
      <codeblock>/Applications/X11.app/Contents/MacOS/X11 --xquartz-be-xinit -keymap  /System/Library/Keyboards/Deutsch.keymapping</codeblock>
      <p>
            and use</p>
      <codeblock>xmodmap -e 'keycode 66 = Mode_switch'</codeblock>
      <p>
            You can use the German keyboard layout just fine.</p>
      <p>
            But the @ character is mapped to Shift-Alt-1 (one), just like it used
            to be up to Mac OS 8.6. With the introduction of Mac OS 9 Apple moved
            that character to Alt-L. The file Deutsch.keymapping does not seem to
            reflect that.</p>
      <p>
            Some keymappings in /System/Library/Keyboards have not been updated from
            a long time. 
            This could explain the problem with the German keymapping.</p>
    </section>
    <section>
      <title>Japanese
            keyboard input</title>
      <p>
                  &quot;With X11 applications now, the way to get Japanese keyboard input
            is to run kinput2 and Canna (or some other back end). 
                  Keyboard switching and input is all done using the XIM protocol. 
                  The X11 application talks to kinput2, which in turn uses Canna to
            do kanna to kanji conversion.</p>
      <p>
            OSX has a perfectly good keyboard layout and input method for Japanese
            already. 
            What would be really nice is if Apple could write their own XIM server
            to replace kinput2. 
            Apple's could use all the powerful stuff they already have to implement
            this&quot;.</p>
    </section>
    <section>
      <title>Spanish
            Keyboard with X11</title>
      <p>
                  (Thanks to Artemio Gonzalez Lopez (artemiog@mac.com) )</p>
      <p>
            The usual way to start X11 from the terminal with the command:</p>
      <codeblock>/Applications/X11.app/Contents/MacOS/X11 --xquartz-be-xinit -keymap  /System/Library/Keyboards/YourDesiredLayout.keymapping</codeblock>
      <p>
        <em>*doesn't work*</em>
      </p>
      <p>
            with the Spanish ISO keyboard.</p>
      <p>
            Apple's Spanish.keymapping is very old</p>
      <p>
            and doesn't match the modern ISO keyboard.</p>
      <p>
            The way to do it is as follows:</p>
      <p>Write in your .xinitrc file:</p>
      <codeblock>xmodmap ~/.MyXmodmap
xmodmap -e 'keycode 66 = Mode_switch'</codeblock>
      <p>
            To create '.MyXmodmap' file:</p>
      <p>
            Copy/paste the following to .MyXmodmap file in your home directory.</p>
      <p>
            .MyXmodmap, is a simple keymap that works very well with xterm.</p>
      <p>
            It has the necessary modifications to the USA keymapping in order that
            all the characters that 
            are drawn in the Spanish ISO keyboard will appear as indicated by the
            drawings on the keyboard. 
            Including the characters like @#~ that are called with the option key.</p>
      <p>.MyXmodmap file:</p>
      <codeblock>keycode 18 = masculine ordfeminine backslash backslash
keycode  22 = e E EuroSign cent
keycode  26 = 1 exclam bar exclamdown
keycode  27 = 2 quotedbl at oneeighth
keycode  28 = 3 periodcentered numbersign sterling
keycode  29 = 4 dollar asciitilde dollar
keycode  30 = 6 ampersand notsign fiveeighths
keycode  32 = exclamdown questiondown asciitilde asciitilde
keycode  33 = 9 parenright
keycode  34 = 7 slash paragraph doubledagger
keycode  35 = apostrophe question
keycode  36 = 8 parenleft
keycode  37 = 0 equal
keycode  38 = plus asterisk bracketright dead_macron
keycode  41 = dead_grave dead_circumflex bracketleft dead_abovering
keycode  47 = dead_acute dead_diaeresis braceleft braceleft
keycode  49 = ntilde Ntilde asciitilde dead_doubleacute
keycode  50 = ccedilla Ccedilla braceright dead_breve
keycode  51 = comma semicolon
keycode  52 = minus underscore endash emdash
keycode  55 = period colon
keycode  58 = less greater bar brokenbar
keycode  66 = Mode_switch</codeblock>
    </section>
    <section>
      <title>True
            Type Fonts are working well under Apple's X11</title>
      <p>
                  To set-up True Type Fonts under XDarwin, write in your ~/.xinitrc
            file:</p>
      <codeblock>xset fp+ /usr/X11R6/lib/X11/fonts/TTF</codeblock>
    </section>
    <section>
      <title>Adding
            to the font repository in Apple X11 on OSX</title>
      <p>
                  Add fonts to /Library/Fonts or /System/Library/Fonts, then run:</p>
      <codeblock>xftcache</codeblock>
      <p> as root</p>
      <p>
            Any applications that use Xft for font management should automatically
            pick up the native fonts.</p>
      <codeblock>which xftcache  /usr/X11R6/bin/xftcache</codeblock>
    </section>
    <section>
      <title>Apple's
            X11 and freetype aware applications</title>
      <p>
                  If using Apple's X11.app:</p>
      <p>
                  add the following directories to '/etc/X11/XftConfig':</p>
      <p># add
            OS X system-wide font directories</p>
      <codeblock>dir &quot;/Library/Fonts&quot;
dir &quot;/System/Library/Fonts&quot;</codeblock>
      <p>
            This would work with freetype aware X11 applications (like xterm).</p>
      <p>
            You can run: </p>
      <codeblock>xterm -fa Monaco -fs 14</codeblock>
      <p>
            to get an xterm with Monaco fonts or write in your .xinitrc file:</p>
      <codeblock>/usr/X11R6/bin/xterm -sb -fa monaco -fs 14 &amp;</codeblock>
    </section>
    <section>
      <title>Tip
            for OpenOffice</title>
      <p>
                  Run the admin program:</p>
      <codeblock>&#37; cd /Applications/OpenOffice.org1.0.1/program/
&#37; ./spadmin</codeblock>
      <p>
            click on fonts, add the ones you want (that are unix enabled via fondu)
            and click add.</p>
    </section>
    <section>
      <title>Add
            extra X11 fonts</title>
      <p>
                  For extra X11 fonts, you can try the fonts available at:</p>
      <p>
                  (will work with Gimp fairly easily)</p>
      <p>
        <link url="http://us.dl.sourceforge.net/sourceforge/gnu-darwin/direct_download/packages/ppc/x11-fonts/">Extra
            X11 Fonts</link>
      </p>
      <p>
            The urwfonts are a good place to start. Untar them and place them anywhere
            you like.</p>
      <p>
            Normally, they go in </p>
      <codeblock>/usr/X11R6/lib/X11/fonts</codeblock>
      <p> directory.</p>
      <p>
            Then run the following commands:</p>
      <codeblock>xset +fp [path to fonts file]
xset fp rehash</codeblock>
      <p>
            If it works, put them in your .xinitrc file so they'll be avaliable everytime
            you start X11 (or XDarwin).</p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="faqs2">
    <title>      /
          X11 v0.2 FAQs /</title>
    <shorttitle>      /
          X11 v0.2 FAQs /</shorttitle>
    <preface>
      <p>
        <em>
            - The Macosxhints Forums - </em>
      </p>
      <p>
        <em>Apple's
            X11 v0.2
                  Frequently Asked Questions</em>
      </p>
      <p>
        <em>This page was written while
            testing Apple's X11 Beta version.</em>
      </p>
      <p/>
    </preface>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">Upgrading
            to Apple's X11 Public Beta v0.2</link>
      </p>
      <p>
        <link url="#top2">Official Apple's FAQs for
            X11 Public Beta v0.2</link>
      </p>
      <p>
        <link url="#top3">What's New in Apple's X11
            v0.2 </link>
      </p>
      <p>
        <link url="#top4">Launch of twm instead of
            Aqua Quartz Window Manager issue</link>
      </p>
      <p>
        <link url="#top5">What does the &quot;option for
            no-click-to-focus&quot; do?</link>
      </p>
      <p>
        <link url="#top6">Fink Script to fix the library
            issues in Apple's X11</link>
      </p>
      <p>
        <link url="#top7">X11 v0.2 crashing on launch</link>
      </p>
      <p>
        <link url="#top8">About
            x11 Extensions</link>
      </p>
      <p>
        <link url="#top9">Keyboard shortcut to quit
            X11</link>
      </p>
      <p>
        <link url="#top10">To keep your .dmg files</link>
      </p>
      <p>
        <link url="#top11">Custom
            Xmodmap files</link>
      </p>
      <p>
        <link url="#top12">Windows not refocusing
            with WindowMaker - Codetek?</link>
      </p>
      <p>
        <link url="#top13">If the 'nph-x11.hqx' file
            doesn't expand</link>
      </p>
      <p>
        <link url="#top14">X11 for Mac OS X Beta 0.2.1
            released</link>
      </p>
      <p>
        <link url="#top15">If you installed both,
            Apple's X11 and XDarwin</link>
      </p>
      <p>
        <link url="#top16">Print from X11 applications
            using &quot;lp&quot;</link>
      </p>
      <p>
        <link url="#top17">Configure a three-button
            mouse to work with X11.app</link>
      </p>
      <p>
        <link url="#top18">KDE window opens with it's
            title bar underneath X11's menu bar</link>
      </p>
      <p>
        <link url="#top19">X11, Fonts, and OpenOffice</link>
      </p>
      <p>
        <link url="#top20">More
            on OpenOffice</link>
      </p>
      <p>
        <link url="#top21">AppleScript to launch Apple's
            X11 and The Gimp </link>
      </p>
      <p>
        <link url="#top22">Printing from Abiword</link>
      </p>
    </section>
    <section>
      <title>Upgrading
            to Apple's X11 Public Beta 0.2</title>
      <p>
                  1- Download 'X11 for Mac OS X Public Beta v0.2'(41.8MB)</p>
      <p>
            2- Download and Reinstall 'X11 for Mac OS X Public Beta SDK' (3.9MB)</p>
      <p>
        <link url="http://www.apple.com/macosx/x11/download/">Download
            Apple's X11 and SDK</link>
      </p>
    </section>
    <section>
      <title>Official
            Apple's FAQs for X11 Public Beta v0.2</title>
      <p>
                  The official &quot;Apple's X11 for MacOS X PB v0.2 FAQs&quot; are here:</p>
      <p>
        <link url="http://lists.apple.com/mhonarc/x11-users/msg01319.html">Apple's
            X11 v0.2 FAQs</link>
      </p>
      <p>
            To access the FAQs,</p>
      <p>
        <link url="http://www.lists.apple.com/mailman/listinfo/x11-users">Subscribe
            to x11-users discussion list</link>
      </p>
    </section>
    <section>
      <title>What's
            New in Apple's X11 v0.2 </title>
      <p>
                  Support for Gnome, KDE hints</p>
      <p>
            Application windows now cascade instead of piling on top of each if they
            do not have an explicit placement policy</p>
      <p>
            Added /usr/include/X11 and /usr/lib/X11 symlinks</p>
      <p>
            Menu in the Dock now shows a list of X11 windows.</p>
      <p>
            Support for Copy &amp; Paste working with other window managers.</p>
      <p>
            No-click-to-focus option : defaults write com.apple.x11 wm_ffm true</p>
      <p>
            Support for move window events from CodeTek's VirtualDesktop.</p>
      <p>
            Support to respect the Mac OS X's International keyboard mapping.</p>
      <p>
            Keymappings from /System/Library/Keyboards.</p>
      <p>
            Support for -iconic. E.g. xterm -iconic now puts the xterm into the Dock
            on launch.</p>
      <p>
            New preference options to control xauth usage</p>
      <p>
            Bug fixes and other feature enhancements.</p>
    </section>
    <section>
      <title>Launch
            of twm instead of Aqua Quartz Window Manager issue</title>
      <p>
                 (By Haroon Sheikh at Apple's x11-users list)</p>
      <p>
            &quot;If you install Beta 2 on top of an existing install of X11 for Mac OS
            X, then you may notice that your window manager is twm instead of quartz-wm.
            This happens because Beta 2 now uses /etc/X11/xinit/xinitrc if a .xinitrc
            is not present in your home directory.</p>
      <p>
            By default, the X11 installer does not install the 'X11 Config' package
            by default, if /etc/X11 is already present, 
            because people may have customized their /etc/X11 configs.</p>
      <p>
            If you select the 'X11 Config' package by customizing the installation,
            then your existing /etc/X11 directory is backed up as X11.AppleBackup
            and a new /etc/X11 is installed&quot;.</p>
      <p>Workarounds:</p>
      <p>
            - Select the X11 Config package by customizing the installation. 
            By default this package is not installed and it contains the new /etc/X11/xinit/xinitrc
            that launches quartz-wm</p>
      <p>
            - Modify </p>
      <codeblock>/etc/X11/xinit/xinitrc</codeblock>
      <p> to launch quartz-wm instead of twm.</p>
      <p>
            - Add a </p>
      <codeblock>~/.xinitrc</codeblock>
      <p> file to launch your xterm and the quartz-wm
            window manager.</p>
      <p>
            - Do a clean install, i.e. wipe out the previous install of X11 and then
            install Beta 2 on top. 
            To just fix this problem, you can also move aside /etc/X11 elsewhere
            before installing Beta 2.</p>
      <p> 
            You can uninstall the previous version by deleting (or moving aside)
            the following files:</p>
      <codeblock>sudo rm -rf /Applications/X11.app /usr/bin/open-x11 /private/etc/X11 /usr/X11R6 /Library/Receipts/X11* /usr/include/X11 /usr/lib/X11</codeblock>
    </section>
    <section>
      <title>What
            does the &quot;option for no-click-to-focus&quot; do?</title>
      <p>
                  &quot;This option allows you to focus an X11 window by just moving the
            mouse to the window. 
                  This is different than the rest of the Aqua UI behavior where you
            have to click in the window to focus the window&quot;.</p>
      <p>
            How do we activate the option?</p>
      <p>
            To enable it, enter the following from an xterm (with out the quotes)
            and relaunch X11:</p>
      <codeblock>&quot;defaults write com.apple.x11 wm_ffm true&quot;</codeblock>
      <p>
            Make sure you write:</p>
      <codeblock>wm_ffm</codeblock>
      <p>
            (ffm = focus-follows-mouse)</p>
      <p>
            This adds the wm_ffm key to the</p>
      <codeblock>~/Library/Preferences/com.apple.x11.plist</codeblock>
      <p>
            To undo it, enter:</p>
      <codeblock>defaults write com.apple.x11 delete wm_ffm</codeblock>
    </section>
    <section>
      <title>Fink
            Script to fix the library issues in Apple's X11</title>
      <p>
                 The script is not needed anymore with version 0.2 of Apple's X11.app</p>
    </section>
    <section>
      <title>X11
            0.2 crashing on launch </title>
      <p>
                 If it's installed, try by disabling the Unsanity &quot;Application Enhancer&quot;
            hack 
                 or exclude X11.app from the FruitMenu Application Enhancer module.</p>
    </section>
    <section>
      <title>About
            x11 Extension</title>
      <p>
                 It provides a handy tool that allows you to switch between sessions
            like gnome and KDE, and window managers 
            (icvewm, enlightenment, fvwm, fvwm2, blackbox, wmaker etc) and it has
            a drop down that lets you select these.</p>
      <p> 
            It also comes with some fink scripts for installing these windows managers
            (also gnome, KDE). And it has a check box which lets you turn on/off
            quartz-wm.</p>
      <p>
        <link url="http://www.macfworks.tk/">X11
            Extension Web site</link>
      </p>
    </section>
    <section>
      <title>Keyboard
            shortcut to quit X11</title>
      <p>
                 Thanks to Michele Garoche (michele.garoche@easyconnect.fr)</p>
      <p>
            (You need the Developer Tools installed)</p>
      <p>
            1- Simply Ctr-I (i like ice) on X11.app (not running evidently).</p>
      <p>
            2- Click on the column presentation in the toolbar</p>
      <p> 
            (to see the folders inside it).</p>
      <p>
            3- Click on Contents.</p>
      <p>
            4- Click on Resources. Click on English.lproj</p>
      <p>
            5- Double-click on main.nib</p>
      <p>
            6- Go to menu Tools, Show Info</p>
      <p>
            7- Double on MainMenu in the main.nib window</p>
      <p> 
            (insist until you obtain it, and also search all you screen as sometimes
            it can be hidden under other windows)</p>
      <p>
            8- Click on X11 in the main.nib - MainMenu window</p>
      <p>
            9- Click on Quit X11</p>
      <p>
            10- Go to the NSMenuItemInfo window.</p>
      <p> 
            You should have Attributes in the scrolling menu at the top of the window,
            if not change it.</p>
      <p>
            11- Enter Q in the Key menu equivalent box and uncheck the up arrow modifier
            which is automatically checked 
            (you should not have any modifier box checked).</p>
      <p>
            12- Quit Interface Builder,</p>
      <p>
            save the document main.nib when asked for.</p>
      <p>
            13- Launch X11. You have a nice shortcut now (Cmd-Q as usual).</p>
    </section>
    <section>
      <title>To
            keep your .dmg files</title>
      <p>
                 After installing Apple's X11 and the X11 SDK your .dmg files are moved
            to the trash but the thrash icon isn't automatically updated, 
                 so you will not see the full trash can icon.</p>
      <p>
            If you like to keep the original .dmg files in case of future problems,
            click on the trash to open it and retrieve your files.</p>
    </section>
    <section>
      <title>Custom
            Xmodmap files</title>
      <p>
                 with v2 of the X11 beta,</p>
      <p> 
                 custom Xmodmap files are no longer necessary.</p>
    </section>
    <section>
      <title>Windows
            not refocusing with WindowMaker - Codetek?</title>
      <p>
                  Once you have focused an Aqua window, you can no longer bring a WM
            window to the front - it is focused, but the Aqua window still stays
            visible above it, 
                  even as you drag the other one above it (so the X11 window ends up
            disappearing under Aqua).</p>
      <p>
                 It also happens with other window-managers. It's a bug in X11.app that
            survived from beta 1.0.</p>
    </section>
    <section>
      <title>If
            the 'nph-x11.hqx' file doesn't expand</title>
      <p>
                 Change &quot;.hqx&quot; to &quot;.dmg&quot;, and use Diskcopy.</p>
      <p>
            If you download with Safari 1.0 v51, the file it's called 'x11.dmg'.</p>
      <p>
            If you download with Internet Explorer 5.2 it's call 'nph-x11.hqx'.</p>
    </section>
    <section>
      <title>X11
            for Mac OS X Beta 0.2.1 released</title>
      <p>
                 Posted by Apple at the x11-users mailing lists:</p>
      <p>
            An updated release of X11 for Mac OS X Beta (v 0.2.1) has been released.
            You can download it here:</p>
      <p>
        <link url="http://www.apple.com/macosx/x11/download/">Download
            Apple's X11 v 0.2.1</link>
      </p>
      <p>
            The only change between 0.2 and 0.2.1 is that now the installer defaults
            to installing the X11Config package. 
            This should help address the problem where people were seeing the twm
            window manager instead of the quartz-wm window manager after a default
            installation. 
            Even though there have been workarounds and explanations posted, a lot
            of users were unaware of the reason why they were not seeing the quartz-wm
            window manager with the default install. 
            Advanced users (those that have made changes to /etc/X11) can either
            deselect the &quot;X11 Config&quot; package during install or restore their /etc/X11
            directory from /etc/X11.AppleBackup.</p>
      <p>
            From the Readme:</p>
      <codeblock>WARNING:</codeblock>
      <p>
            By default, the installer archives and then overwrites any existing X11
            configuration information. 
            Your existing /etc/X11 directory will be backed up as X11.AppleBackup
            and a new /etc/X11 will be installed. 
            To prevent your existing X11 configuration files from being archived
            and overwritten, deselect the package named &quot;X11 Config&quot;.</p>
      <p>
            Thanks for the feedback. Please report any new bugs at:</p>
      <p>
        <link url="http://developer.apple.com/bugreporter">Apple
            bugreporter</link>
      </p>
    </section>
    <section>
      <title>If
            you installed both, Apple's X11 and XDarwin</title>
      <p>
                  If you installed both Apple's X11 and XDarwin and sometimes you want
            to use Xdarwin with blackbox window manager for example, 
                  and sometimes Apple's X11 with quartz-wm, you can put this at the
            bottom of your ~/.xinitrc file to start the correct window manager (courtesy
            of Russell Stephany).</p>
      <codeblock>xdar=&quot;`ps xo command | grep XDarwin.app | grep -v grep | wc -l`&quot; 
if [ $xdar -eq 1 ]; then            
exec blackbox
else 
exec quartz-wm
fi</codeblock>
    </section>
    <section>
      <title>Print
            from X11 applications using &quot;lp&quot;</title>
      <p>
                  (Thanks to Francois Rigaut and Haroon Sheikh)</p>
      <p>
                  You can print from the command line using:</p>
      <p>
                  (from an xterm or equivalent, or Terminal.app)</p>
      <codeblock>lp filename</codeblock>
      <p>
            this will print to your default printer.</p>
      <p>
            and:</p>
      <codeblock>lp -d cups-printer-name filename</codeblock>
      <p>
            will print to another printer. </p>
      <p>
            From other X11 applications, you can usually print from the app menus.
            xfig, gv, openoffice, xemacs all include a &quot;print&quot; in their own menu,
            sometimes configurable (you generally have to specify the &quot;print&quot; command
            -lp- and the destination printer).</p>
      <p>
            Check out gimp-print. The following links may be useful:</p>
      <p>
        <link url="http://gimp-print.sourceforge.net/MacOSX.php3">Gimp-print
            at sourceforge</link>
      </p>
      <p>
        <link url="http://www.macwrite.com/criticalmass/x-print-on-mac-os-x-jaguar.php">Macwrite:
            x-print-on-mac-os-x-jaguar</link>
      </p>
      <p>
        <link url="http://developer.apple.com/printing/">Apple
            Developer: Printing</link>
      </p>
    </section>
    <section>
      <title>Configure
            a three-button mouse to work with X11.app</title>
      <p>
                  (Thanks to Greg Parker, Andrew Hartung, Michael, and Nick Zitzmann)</p>
      <p>
            There are two ways to configure a real three-button mouse to work with
            X11.app and XDarwin:</p>
      <p>1: Enable X11's
            &quot;mouse button emulation&quot; and configure the mouse software to send option-click
            and control-click for buttons 2 and 3.</p>
      <p>2: Disable X11's
            &quot;mouse button emulation&quot; and configure the mouse software to send &quot;middle
            click&quot; and &quot;right click&quot; for buttons 2 and 3. This is the preferred configuration
            for a mouse with three physical buttons.</p>
      <p>
            Make sure you have the most recent version of your mouse software.</p>
      <p>
            For the ability to have different sets of mouse configurations on a per-application
            basis, the current versions of USB Overdrive and Kensington MouseWorks
            work great.</p>
      <p>MouseWorks from Kensington, works great
            with X11, though you need one of their products.</p>
      <p>USB Overdrive. It works fine
            with Logitech 3-button mouse, and it allows you to customize mouse configurations
            on a per-application basis. 
            Tip: You can set up USB Overdrive so the &quot;clicked wheel&quot; actions are
            turned off and the scroll wheel works as the middle mouse button just
            for X11.app, and it works fine.</p>
      <p>
        <link url="http://www.usboverdrive.com/">USB Overdrive</link>
      </p>
      <codeblock>Is there any way to enable the scroll-wheel?</codeblock>
      <p>
            XDarwin looks for standard Cocoa scroll wheel events and turns them into
            X11 buttons 4 and 5. (not sure what X11.app does.) 
            Some X11 apps like xterm understand this out of the box, but other X11
            apps might need to be configured to recognize buttons 4 and 5 as scroll
            wheel motion. 
            Use the xev program to check whether your X11 server is actually generating
            any X11 events when you move the wheel.</p>
      <p>Tip for Logitech Wheel
            Mouse Optical:</p>
      <p> 
            Logitech Control Center configuration for the &quot;Wheel Button&quot;</p>
      <p>
            should be set to &quot;Advanced Click&quot;</p>
      <p>
            with the &quot;Configure Advanced Click&quot; tab settings</p>
      <p>
            &quot;Click Type&quot; = Click and &quot;Button number&quot; = 3.</p>
    </section>
    <section>
      <title>KDE
            window opens with it's title bar underneath X11's menu bar</title>
      <p>
                  Here's a possible workaround: call up the control center under KDE
            and activate Enable Desktop menus in the Behaviors page of the Desktops
            section. 
                  Every time a window goes underneath X11's or KDE's menu bar, just
            middle click (option click on some systems) 
                  on the desktop and select Unclutter windows in the pop up menu and
            everything comes back within reach. (Thanks to Edward Lichtner)</p>
      <p>
            Or try this other way to make all the windows open at the center of the
            screen:</p>
      <codeblock>Control Center--&gt;Window Behaviour--&gt;Advanced</codeblock>
      <codeblock>--&gt;Enable Xinerama support</codeblock>
      <codeblock>--&gt;Enable window placement support</codeblock>
      <p>
            And then:</p>
      <codeblock>Window Behaviour--&gt;Moving--&gt;Placement--&gt;Centered</codeblock>
    </section>
    <section>
      <title>X11,
            Fonts, and OpenOffice</title>
      <p>
            OOo does not yet support MacOS X fonts 'directly', but you can easily
            convert most MacOS X fonts
            via fondu and install them for use in OOo. But, not all of the your MacOS
            X fonts are usable by OOo. 
            So you will need to do some manual clean up prior to installing them
            in OOo.</p>
      <p> 
            Full instructions at the &quot;OpenOffice.org MacOS X Testing forum&quot;:</p>
      <p>
        <link url="http://www.ooodocs.org/modules.php?name=Forums&amp;file=viewtopic&amp;t=366&amp;sid=b59f">Using
            MacOSX fonts in OOo</link>
      </p>
      <p>
            Some people reported success using the &quot;nativefonts&quot; package advertised
            in this thread:</p>
      <p>
        <link url="http://www.ooodocs.org/modules.php?name=Forums&amp;file=viewtopic&amp;t=455&amp;sid=3f822b4ab3d5975f422cdbd90170100c">Native
            Mac Fonts v3. Please Test!</link>
      </p>
      <p>
            Download the 'nativefont3.tar.gz' package:</p>
      <p>
        <link url="http://homepage.mac.com/WebObjects/FileSharing.woa/wa/default?user=oootesting&amp;fpath=FinalBetaPlus&amp;templatefn=FileSharing1.html">nativefont3.tar.gz</link>
      </p>
      <p>
            (3.9 MB, instructions in the file)</p>
    </section>
    <section>
      <title>More
            on OpenOffice</title>
      <p>
            You can only Copy/Paste &quot;plain text&quot; between OOo and MacOS X apps using
            Apple's X11. </p>
      <p>
            The import/export of JPEG, TIFF, GIF, etc works fine between OOo and
            other Mac apps.</p>
      <p>
            The OOo Final Beta running in Apples' X11 ( both 0.1 and 0.2) supports
            font smoothing of _truetype_ fonts.</p>
      <codeblock>To see antialiasing in menus:</codeblock>
      <p>
            Choose the 'Tools/Options' menu item. Expand the 'OpenOffice.Org' section
            of the left-hand list and choose 'View'. 
            Set the 'Scale', second from the top, to 109&#37; or larger and click 'OK'
            to close the window and the menus should now appear antialiased.</p>
      <codeblock>You can download PC Truetype fonts (.ttf) from:</codeblock>
      <p>
        <link url="http://gimmefonts.com/">gimmefonts.com</link>
      </p>
      <p>
            Be selective and download fonts you know and remember to get the whole
            family. 
            The fonts you download need to go in the folder:</p>
      <codeblock>/Applications/OpenOffice.org1.0.1/share/fonts/truetype</codeblock>
    </section>
    <section>
      <title>AppleScript
            to launch Apple's X11 and The Gimp</title>
      <p>
                  (Thanks to Martin Costabel and Marcelo Camperi)</p>
      <p>
            Write a script in AppleScript Editor that looks like this:</p>
      <codeblock>tell application &quot;X11&quot;   activate
end tell
do shell script &quot;export DISPLAY=:0 &amp;&amp; source /sw/bin/init.sh &amp;&amp; gimp&quot;</codeblock>
      <p>
                 Then save as Application.</p>
      <p>
            Works the same way for any program that uses Apple's X11, was installed
            by fink, and can be started from the command line.</p>
      <p>
            You can also write a regular shell script to start an application, and
            then use &quot;DropScript&quot; to generate an application that will run the shell
            script.</p>
      <p>
            The way to activate X11 by these means is to use the line:</p>
      <codeblock>osascript -e 'tell application &quot;X11&quot; to activate'</codeblock>
      <p>
            at the start of your shell script.</p>
      <p>About DropScript:</p>
      <p>
            &quot;DropScript is an application for Mac OS X which lets you create new
            applications from any BSD program which takes files as command line arguments.
            Typically, these are scripts written in sh, perl, or other scripting
            languages&quot;. </p>
      <p>
        <link url="http://www.apple.com/downloads/macosx/unix_open_source/dropscript.html">Apple
            Downloads-Dropscript</link>
      </p>
    </section>
    <section>
      <title>Printing
            from Abiword</title>
      <p>
                  (Thanks to Martin Costabel)</p>
      <p>
            &quot;The problem is that Abiword and other X11-based Unix programs send Postscript
            files to the printer. 
            This works, of course, if your printer is a postscript printer. 
            It doesn't work for the usual USB inkjet printers, because Apple's version
            of CUPS does not include a filter for postscript files.</p>
      <p>
            It contains filters for all kinds of files, but not for postscript. 
            One possibility is to print to a file and then convert this postscript
            file to pdf using ps2pdf from a ghostscript package. 
            The pdf file can then be printed using Preview or Acrobat Reader or simply
            by &quot;lpr&quot; from the command line.</p>
      <p>
            The other possibility is to install gimp-print and eps-postscript, download
            from:</p>
      <p>
        <link url="http://gimp-print.sourceforge.net/MacOSX.php3">Gimp-print
            at sourceforge.net</link>
      </p>
      <p>
            This includes a postscript filter for cups. You can then define a second
            version of your USB printer using a driver from gimp-print. 
            This will then probably work with Abiword&quot;.</p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="faqs3">
    <title>      /
          X11 v0.3 FAQs /</title>
    <shorttitle>      /
          X11 v0.3 FAQs /</shorttitle>
    <preface>
      <p>
        <em>
            - The Macosxhints Forums - </em>
      </p>
      <p>
        <em>Apple's
            X11 v0.3
                  Frequently Asked Questions</em>
      </p>
      <p>
        <em>This page was written while
            testing Apple's X11 Beta version.</em>
      </p>
      <p/>
    </preface>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">Download
            Apple's X11 Public Beta v0.3</link>
      </p>
      <p>
        <link url="#top2">What's New in X11 Public
            Beta 3</link>
      </p>
      <p>
        <link url="#top3">Apple's FAQs for X11 Public
            Beta v0.3</link>
      </p>
      <p>
        <link url="#top4">Fink and Apple's X11 v.03</link>
      </p>
      <p>
        <link url="#top5">KDE
            3.1 in Fink Stable and Apple's X11</link>
      </p>
      <p>
        <link url="#top6">Pseudocolor (8-bit) visual
            plane support</link>
      </p>
      <p>
        <link url="#top7">xman from Apple's X11 v.03</link>
      </p>
      <p>
        <link url="#top8">Howto:
            Seamless Postscript printing</link>
      </p>
      <p>
        <link url="#top9">Trouble launching OOo with
            Apple's X11</link>
      </p>
      <p>
        <link url="#top10">OpenOffice + Fink + dlcompat
            libraries</link>
      </p>
      <p>
        <link url="#top11">To get xterm to support
            scrollback while in &quot;screen&quot;</link>
      </p>
      <p>
        <link url="#top12">If you are using Fink installed
            KDE and Apple's X11</link>
      </p>
      <p>
        <link url="#top13">Installing Matlab on Mac
            OS X With Apple's X11</link>
      </p>
      <p>
        <link url="#top14">To start OOo with Apple's
            X11</link>
      </p>
      <p>
        <link url="#top15">To activate the &quot;font menu&quot;
            in xterm</link>
      </p>
      <p>
        <link url="#top16">Application to launch gv
            in Finder</link>
      </p>
      <p>
        <link url="#top17">To download and compile
            X11-wwdc(v1.0) source code</link>
      </p>
      <p>
        <link url="#top18">Latest Apple Developer
            Tools update and Fink</link>
      </p>
      <p>
        <link url="#top19">To install OpenOffice with
            Apple's X11 and Fink installed</link>
      </p>
    </section>
    <section>
      <title>Download
            Apple's X11 Public Beta v0.3 and SDK</title>
      <p>
                  1- You can download Apple's third public beta for X11 (41.7MB) at:</p>
      <p>
        <link url="http://www.apple.com/macosx/x11/download/">Get
            X11 for Mac OS X Public Beta 3</link>
      </p>
      <p>
            &quot;This third beta is available as a free download for anyone using  Mac
            OS X 10.2.x.  It contains a wide range of bug fixes and feature enhancements&quot;</p>
      <p>
                 2- Install the X11 for Mac OS X Public Beta &quot;SDK&quot; (4.0MB)</p>
      <p>
            &quot;The optional software developer's kit contains headers and other support
            files for X11 Beta 3, enabling you to compile your own X11 applications.
            All SDK users should upgrade to this new version&quot;.</p>
      <p>
            The download link is at the bottom-right of the same page as above:</p>
      <p>
        <link url="http://www.apple.com/macosx/x11/download/">Get
            X11 for Mac OS X Public Beta &quot;SDK&quot;</link>
      </p>
    </section>
    <section>
      <title>What's
            New in X11 Public Beta 3</title>
      <p>Changes in Beta
            3:</p>
      <p>
            Added Pseudocolor (8-bit) visual plane support so applications requiring
            8 bit support should find the visuals by default. 
            You can also add </p>
      <codeblock>&quot; -depth 8 &quot;</codeblock>
      <p> (see Xquartz man page)
            when starting the X Server if you want to run it only in 8 bit mode,
            which is unrecommended as OpenGL support is not available in 8 bit mode.</p>
      <p>
            Added an option to quit X11 without presenting warning dialog:</p>
      <codeblock>&quot; defaults write com.apple.x11 no_quit_alert true &quot;</codeblock>
      <p>
            See man page for Xquartz for more details.</p>
      <p>
            Added </p>
      <codeblock>Command-Q</codeblock>
      <p> keyboard shortcut to quit X11.
            Can be disabled from preferences.</p>
      <p>
            Added </p>
      <codeblock>Command-,</codeblock>
      <p> to bring up preferences dialog.
            Can be disabled from preferences.</p>
      <p>
            Added customization of fake buttons while emulating mouse. 
            See man page for Xquartz for more details.</p>
      <p>
            Fixed problems with dead keys on certain keyboard mappings.</p>
      <p>
            OpenGL: Fixed problem with linking against libGL resulting in multiple
            definitions of glGetColorTableEXT.</p>
      <p>
            Fixed problem where non-admin users could not start X11 because lock
            files were being left behind in /tmp.</p>
      <p>
            Fixed problem where quartz-wm lost ConfigureNotify events.</p>
      <p>
            Fixed problem so that windows can be resized by user to any size and
            not be limited by the Dock's height.</p>
      <p>
            Fixed window focus problem when un-minimizing X11 windows from the Dock.</p>
      <p>
            Fixed a crash that could occur when dragging remotely hosted windows.</p>
      <p>
            Dialog windows can now be resized.</p>
      <p>
            Fixed a problem with hardware accelerated scrolling in 16 bit mode.</p>
      <p>
            Fixed a bug where emulated middle-button-raise fails when Alt/option
            is not Mode_Switch.</p>
      <p>
            Fixed a bug where cursor would jump on multiple monitor systems if application
            tried to manage the cursor's position.</p>
      <p>
            Fixed a bug that crashes the X Server if application tried to retrieve
            data back from the framebuffer using XGetImage.</p>
      <p>
            Fixed a bug when quitting from the Dock that would result in the Quit
            Dialog being presented behind the current application.</p>
      <p>
            Fixed a bug where windows are created offscreen if (0,0) maps to an offscreen
            location.</p>
      <p>
            Fixed a bug with undecorated and modal windows having a titlebar because
            the window manager hints were not being interpreted correctly.</p>
    </section>
    <section>
      <title>Apple's
            FAQs for X11 Public Beta v0.3</title>
      <p>
                  The official &quot;Apple's X11 for MacOS X PB v0.3 FAQs&quot; are here:</p>
      <p>
        <link url="http://developer.apple.com/qa/qa2001/qa1232.html">Official
            FAQs for Apple's X11 PB v3</link>
      </p>
    </section>
    <section>
      <title>Fink
            and Apple's X11 v.03</title>
      <p>
                  At the Fink site they recommend that all Fink users who are using
            Apple X11 upgrade to version 0.3. 
                  After installing Apple's X11 beta v0.3 you need to install with Fink
            system-xfree86-4.2-11 or higher.</p>
      <p>
            &quot;It fixes a number of bugs including a few that can cause problems with
            building Fink packages. 
            It is recommended that all Fink users who are using Apple X11 upgrade.
            A new version of the system-xfree86 package has been released that takes
            the new Apple X11 v0.3 into account&quot;.</p>
      <p>
            The Fink package system-xfree86-4.2-11 has been committed to stable,
            so you should be able to do a:</p>
      <codeblock>sudo apt-get update 
sudo apt-get install system-xfree86</codeblock>
      <p>
            Or, if you have the December 2002 Apple Developer Tools installed you
            can run:</p>
      <codeblock>fink selfupdate-cvs 
fink install system-xfree86</codeblock>
    </section>
    <section>
      <title>KDE
            3.1 in Fink Stable and Apple's X11</title>
      <p>
                  KDE 3.1 is now in Fink stable.</p>
      <p>
            &quot;Improvements over 3.1 beta1 include an updated audio driver, faster
            startup times, cleaned up fink package info, support for Apple X11's
            window manager, and manybugfixes. 
            Binary packages will be available in the next Fink binary distribution
            release&quot;.</p>
      <p>Apple X11 Support:</p>
      <codeblock>'startkde'</codeblock>
      <p>
            now detects if you have Apple's quartz-wm (from the Apple X11 release),
            and runs with it instead of kwin if available. 
            If you don't want to use Apple's window manager, you can get the old
            behaviour by putting:</p>
      <codeblock>export KDEWM=kwin</codeblock>
      <p>
            in your ~/.xinitrc file before the startkde line.</p>
    </section>
    <section>
      <title>Pseudocolor
            (8-bit) visual plane support</title>
      <p>
                  (Thanks to John Harper and Toshimitsu Tanaka)</p>
      <p>
            It means that starting the server with &quot;-depth 8&quot; will only create a
            PseudoColor visual, 
            normally you get the TrueColor visuals plus a single PseudoColor visual
            that can be used by applications that want it.</p>
      <p>
            To use it, try the following command from terminal:</p>
      <codeblock> /Applications/X11.app/Contents/MacOS/X11 -depth 8</codeblock>
    </section>
    <section>
      <title>xman
            from Apple's X11 v.03</title>
      <p>
                  (Thanks to Martin Costabel)</p>
      <p>
            xman is an X11 program that provides a gui interface to the manpages.</p>
      <p>
            If you want to use xman from Apple's X11, you have to run:</p>
      <codeblock>setenv GROFF_TYPESETTER latin1</codeblock>
      <p>
            before starting xman.</p>
      <p>
            Because Apple's xman has a bug which it's still not yet fixed.</p>
      <p>
            To start it, type in an xterm window:</p>
      <codeblock>xman &amp;</codeblock>
    </section>
    <section>
      <title>Howto:
            Seamless Postscript printing</title>
      <p>
                  By Eric Dahlman at the x11-users mailing list</p>
      <p>
            &quot;A while back there was some talk about how to make X11 applications
            easily print under Jaguar and I promised to send on my solution. 
            I got a free second so here it is.</p>
      <p>
            The problem with printing Postscript is that the printing system (CUPS)
            does not know how to convert a Postscript document into a PDF which is
            what many OSX print drivers take as input. 
            So I wrote a little filter that uses ps2pdf from Ghostscript and the
            configuration file to tell the printing system how to use it. 
            Once the filter is installed then you can send Postscript to lpr and
            print to your hearts content.</p>
      <p>
            This is particularly nice because there is no need to install the gimp-print
            printer drivers an you can just use the drivers you have currently working
            on your printer&quot;.</p>
      <p>
            You can grab the two little files you need and the directions from:</p>
      <p>
        <link url="http://www1.twincitizen.net/~dahlman">Printing
            Postscript via lpr on Jaguar</link>
      </p>
    </section>
    <section>
      <title>Trouble
            launching OOo with Apple's X11</title>
      <p>
                  At the &quot;OOo - Testing -Mac OS X forums&quot; at the thread &quot;Trouble launching
            OOo with Apple's X11&quot;, they report several problems:</p>
      <p>
        <link url="http://www.ooodocs.org/modules.php?name=Forums&amp;file=viewtopic&amp;t=553&amp;sid=5299d16fcacc19fdb17f49f3e30ba084">Trouble
            launching OOo with Apple's X11</link>
      </p>
      <p>
            &quot;From the crashlogs above, it appears that the crash *may* be related
            to changes in their OpenGL implementation.  
            What may help is removing any of the X11 OpenGL libraries in /usr/X11R6/lib.
            When using Apple X11, /usr/X11R6/lib must *not* be contained 
            in the path as loading or attempting to load the GL libraries from that
            directory will fail.  
            They unfortunately have the same names as the OpenGL.framework libraries
            against which OpenOffice.org is linked&quot;.</p>
      <p>
            And </p>
      <p>
            &quot;Some problems seem to related to...</p>
      <p> 
            * Locale (NULL) </p>
      <p>
            * Java versions (1.3.3 vs  1.4.1) </p>
      <p>
            * Installer graphics (jpg vs gif) </p>
      <p>
            Of course, it doesn't help that several people have reported 'spontaneous
            recovery' after reboots etc. 
            Well, it does help them but it makes figuring out what went wrong a little
            tougher &quot;</p>
      <p>
            And regarding,</p>
      <p>
            * Installer graphics (jpg vs gif) :</p>
      <p> 
            &quot;apparently on some systems those premature end of JPEG messages may
            be related to the installer crashes.  
            I've never had a problem on my system (latest Java VM 1.3.1/1.4.1 and
            QT6), but others have.  
            Interestingly enough, if the JPEG based installer is run off the 1.4.1
            VM on my system, 
            it segfaults inside of code that parses the JPEGS in the VM (very bad,
            very bad) but it doesn't crash under 1.3.1, 
            only barfs up those messages from the console.  
            So even if it seems to be harmless on my box, it may be wise to replace
            them in order to work around a potentially very serious bug in the JVM&quot;.</p>
      <p>
            One post advices that people having weird problems like this, should
            back up important data, do a clean install of Mac OS X 10.2.x, 
            apply any Mac OS X updates, install OOo and X11.app, and if things work,
            then start modifying the environment, restoring applications and data
            etc.</p>
    </section>
    <section>
      <title>OpenOffice
            + Fink + dlcompat libraries</title>
      <p>
            OOo wants you to have dlcompat libraries in /usr/local/lib.</p>
      <p>
            Make links in /usr/local/lib to your fink-installed dlcompat libraries,
            otherwise your fink installation will stop working. This seems to work
            fine.</p>
    </section>
    <section>
      <title>To
            get xterm to support scrollback while in &quot;screen&quot;</title>
      <p>
                  (Thanks to David Brown)</p>
      <p>
            This problem is with screen and not with xterm.</p>
      <p>
            Add a line such as the following to you ~/.screenrc:</p>
      <codeblock># Do not use xterms alternate window buffer
# (won't add lines to scrollback bfr)
termcapinfo xterm|xterms|xs|xterm-color ti=\E7\E[?471</codeblock>
    </section>
    <section>
      <title>If
            you are using Fink installed KDE and Apple's X11</title>
      <p>
            On April 10, Benjamin Reed posted the following at the 'fink-announce'
            mailing list:</p>
      <p>KDE Security Advisory</p>
      <p>Overview</p>
      <p>
            KDE uses Ghostscript software for processing of PostScript (PS) and PDF
            files in a way that allows for the execution of arbitrary commands that
            can be contained in such files.</p>
      <p>
            An attacker can prepare a malicious PostScript or PDF file which will
            provide the attacker with access to 
            the victim's account and privileges when the victim opens this malicious
            file for viewing or when the victim browses a 
            directory containing such malicious file and has file previews enabled.</p>
      <p>
            An attacker can provide malicious files remotely to a victim in an e-mail,
            as part of a webpage, via an ftp server and possible other means.</p>
      <p>
            More specifics can be found in the KDE security advisory at:</p>
      <p>
        <link url="http://www.kde.org/info/security/advisory-20030409-1.txt">KDE.org</link>
      </p>
      <p>Solution</p>
      <p>
            Updated packages for kdelibs, kdebase, and kdegraphics have been checked
            into Fink unstable:</p>
      <p>
            kdelibs3-ssl-3.1.1-6</p>
      <p> 
            kdebase3-ssl-3.1.1-6</p>
      <p>
            kdelibs3-3.1.1-6 </p>
      <p>
            kdebase3-3.1.1-6 </p>
      <p>
            kdegraphics3-3.1.1-5 </p>
      <p>
            All users of the unstable tree are encouraged to upgrade as soon as possible.
            After an initial smoke test, the KDE 3.1.1 packages will be moved to
            stable tomorrow, the morning of the 11th (EST).  
            New binaries will be built as soon as possible, most likely within the
            next two weeks.</p>
      <p>
            Users of the stable tree are encouraged to update as soon as these packages
            are available to help find any 
            remaining problems that might come up so that we can get binaries built.</p>
      <p>
            Users of the unstable tree can update immediately by running:</p>
      <codeblock>fink selfupdate-cvs; fink update-all</codeblock>
      <p>
            Users of the stable tree will be able to update tomorrow morning after
            10:00 EST.</p>
    </section>
    <section>
      <title>Installing
            Matlab on Mac OS X With Apple's X11</title>
      <p>
                  Nathaniel Grady's has written some notes on &quot;Installing Matlab on
            Mac OS X with Apple's X11&quot;. You can read the notes at the following link:</p>
      <p>
        <link url="http://www.ece.rice.edu/~ngrady/install_matlab_osx.html">Notes
            on Installing Matlab</link>
      </p>
    </section>
    <section>
      <title>To
            start OOo with Apple's X11</title>
      <p>
            Thanks to </p>
      <p>
        <link url="http://www.math.uu.nl/people/gill">Richard Gill</link>
      </p>
      <p>
            To get OOo to work (I have Apple's X11): one must start up the program
            from the command line (not from the launcher supplied by OOo). 
            You follow OOo's instructions (which flash by on your screen at the end
            of installation), but you must remove /usr/X11R6/lib from the path for
            dynamic libraries.</p>
      <p>
            So it goes like this:</p>
      <codeblock>setenv DISPLAY localhost:0
setenv DYLD_LIBRARY_PATH  ###in one line with the next line 
/Applications/OpenOffice.org1.0.1/program:/Applications/OpenOffice.org1.0.1/program/filter
cd /Applications/OpenOffice.org1.0.1/program
sh soffice</codeblock>
      <p>
            I wrote a little unix script:</p>
      <codeblock>#!/bin/tcsh
setenv DISPLAY localhost:0
setenv DYLD_LIBRARY_PATH  ###in one line with the next line
/Applications/OpenOffice.org1.0.1/program:/Applications/OpenOffice.org1.0.1/program/filter
cd /Applications/OpenOffice.org1.0.1/program
sh soffice</codeblock>
      <p>
                This is saved in a file which is in my $PATH and made executable by
            doing chmod +x .
            Call it myoffice, say. Then I can put it in Apple's X11 &quot;Applications&quot;
            menu, as well as calling it from the command line.</p>
    </section>
    <section>
      <title>To
            activate the &quot;font menu&quot; in xterm</title>
      <p>
            Thanks to David McNett</p>
      <p>
            &quot;Ctrl-Apple-Click on the xterm window. (Assuming default mouse button
            configuration).  
            xterm contains a variety of menus similar to the font menu, all accessable
            through a variety of chorded clicks 
            (or alternate button clicks if you've got a multibutton mouse)&quot;</p>
    </section>
    <section>
      <title>Application
            to launch gv in Finder</title>
      <p>
                  Kazuhumi Murakami has made a small application called &quot;Open GV.app&quot;
            to launch gv in Finder. 
                  It launches gv and preview a postscript file with double-clicking
            in  Finder.</p>
      <p>
            It requires OSX 10.2.6, X11 and gv and you can download it from:</p>
      <p>
        <link url="http://homepage.mac.com/droppedgreentomato/">Open
            GV.app</link>
      </p>
    </section>
    <section>
      <title>To
            download and compile X11-wwdc(v1.0) source code</title>
      <p>
            (Thanks to Toshimitsu Tanaka)</p>
      <p>1.
            Download X11-wwdc source code from:</p>
      <p>
        <link url="http://developer.apple.com/darwin/projects/X11/index.html">developer.apple.com</link>
      </p>
      <p>2.
            Get Xplugin.h and install as /usr/include/ Xplugin.h.</p>
      <p>
            Read the followining post at:</p>
      <p>
        <link url="lists.apple.com/mhonarc/x11-users/msg03665.html">x11-users
            list</link>
      </p>
      <p>
            (Also, Torrey T. Lyons informed that the current Xplugin.h is now checked
            into XFree86 CVS in xc/programs/Xserver/hw/darwin/quartz/xpr)</p>
      <p>3.Create
            the symlink '/usr/lib/libXplugin.dylib-&gt;libXplugin.1.0.dylib'.</p>
      <p>
            Read the followining post at:</p>
      <p>
        <link url="http://lists.apple.com/mhonarc/x11-users/msg03644.html">x11-users
            list</link>
      </p>
      <p>4. </p>
      <codeblock>&#37; tar xzf X11ForMacOSXSource-wwdc.tar.gz 
&#37; cd X11ForMacOSXSource-wwdc/xc</codeblock>
      <p>&gt;5.</p>
      <codeblock>&#37; make World 
&#37; sudo make install 
&#37; sudo make install.man</codeblock>
      <p>6.
 Launch /Applications/Utilities/X11.app.</p>
      <p>Important:</p>
      <p> You cannot use
            quartz-wm with X11 v1.0 in Jaguar. 
            It's just not open-source so it's not available to those who are building
            it themselves from source on jaguar. 
            X11 v1.0 final does have quartz-wm, on panther .</p>
      <p>
            So, in Jaguar to use X11-wwdc, you will have to install another window
            manager, like oroborus, blackbox, etc...</p>
      <p>
            If you follow these instructions carefully, what you will get is a clean
            build in MacOSX v10.2.6 of X11 v1.0 and XFree86 v4.3.0 
            from the source you downloaded in &quot;X11ForMacOSXSource-wwdc.tar.gz&quot;</p>
      <p>
            And, in the X11 &quot;About box&quot; you will read the inscription &quot;X11 1.0 -
            XFree86 4.3.0&quot;</p>
      <p>Note:</p>
      <p> Be aware that Fink does
            not recognize this X11 installation at the moment, 
            since it is based on XFree86 4.3 rather than XFree86 4.2.x.  
            Fink's &quot;system-xfree86&quot; packages assumes that your non-Fink install of
            X11 was based on 4.2.x. 
            I believe there is already a *not fully tested* system-xfree86 package
            in fink's CVS repository which might work with the self-compiled X11.</p>
      <p>News 8/18/03:</p>
      <p> (Thanks to Benjamin Reed
            and Martin Costabel)</p>
      <p> 
            Benjamin Reed has committed to Fink unstable branch a new version of
            the system-xfree86 package. 
            system-xfree86 is now a placeholder for the placeholder which depends
            on either system-xfree86-42 or system-xfree86-43.</p>
      <p>
            This new package system-xfree86 in &quot;unstable&quot; works well for a first
            time install of Fink with an installation from source of Apple's X11-wwdc
            (v1.0).</p>
      <p>
            Just enable &quot;unstable&quot; in the /sw/etc/fink.conf file by adding: unstable/main
            unstable/crypto to the beginning of 
            the Trees: line and after run the command 'fink index'. Then run 'fink
            selfupdate-cvs' till you see the package, then run 'fink install system-xfree86'</p>
      <p>It doesn't work for an update</p>
      <p>. To make it work for an
            update you have to use force (and dpkg) to install the update. Either:</p>
      <codeblock>sudo dpkg -r --force-depends system-xfree86 
fink install system-xfree86</codeblock>
      <p>
or</p>
      <codeblock>sudo dpkg -i --force-all 
/sw/fink/dists/unstable/main/binary-darwin-powerpc
/x11-system/system-xfree86-42_4.2-1_darwin-powerpc.deb</codeblock>
      <p>
(all in one line)</p>
      <p>
Then run:</p>
      <codeblock>fink install system-xfree86</codeblock>
      <p>
            Don't try the update remotely via ssh while you are not logged in at
            the console because it will hang.</p>
      <p>FinkCommander:</p>
      <p>
            If you're using FinkCommander, you can select system-xfree86, use Source-&gt;Force
            Remove, then reselect it and use Source-&gt;Install.</p>
    </section>
    <section>
      <title>Latest
            Apple Developer Tools Update and Fink</title>
      <p>
            If you use Fink to install packages in Apple's X11, be aware that Fink
            won't work with the latest Apple Developer Tools version (2003-06-26).
            Fink does not yet support compiling with gcc 3.3.</p>
      <p>
            It is recommended that if you update your Developer Tools with the new
            patch, you should be careful to run sudo gcc_select 3 prior to any &quot;fink
            build&quot; or &quot;fink install&quot; commands.</p>
      <p>
            Or, if you want to remove the updated Dev Tools to reinstall Apple's
            Dec 2002 Developer Tools tools on a clean system, 
            there should be a Perl script called /Developer/Tools/uninstall-devtools.pl.
            If you run this, that should clear everything out, and then you can reinstall.</p>
    </section>
    <section>
      <title>To
            install OpenOffice with Apple's X11 and Fink installed</title>
      <p>1- Install
            OpenOffice, it will try to install its own version of dlcompat, so in
            order that it doesn't make your Fink installation completely dysfunctional,
            you'll need to do the following:</p>
      <p>
            For dlcompat:</p>
      <codeblock>sudo ln -s /sw/lib/libdl.0.dylib /usr/local/lib/libdl.0.dylib 
sudo ln -s /usr/local/lib/libdl.0.dylib /usr/local/lib/libdl.dylib</codeblock>
      <p>
            And similarly for fondu:</p>
      <codeblock>sudo ln -s /sw/bin/fondu /usr/local/bin/fondu</codeblock>
      <p>2- Install gimp-print and esp-ghostscript (these are installed into the
            /usr/local tree) with the packages from:</p>
      <p>
        <link url="http://gimp-print.sourceforge.net/MacOSX.php3">gimp-print.sourceforge.net</link>
      </p>
      <p>
            OpenOffice looks for libfreetype in /usr/X11R6/lib, so there is no need
            to symlink it in /usr/local/lib; 
            the freetype libraries in /usr/X11R6/lib are installed by X11.</p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="faqs10">
    <title>      /
          X11 1.0 - FAQs /</title>
    <shorttitle>      /
          X11 1.0 - FAQs /</shorttitle>
    <preface>
      <p>
        <em>
            - The Macosxhints Forums - </em>
      </p>
      <p>
        <em>Apple
            X11 1.0
                  Frequently Asked Questions</em>
      </p>
      <p/>
    </preface>
    <section>
      <title>Contents</title>
      <p>
        <link url="#top1">Installing
            Apple's X11 1.0 in Panther</link>
      </p>
      <p>
        <link url="#top2">Installing Xcode and the
            X11 SDK package</link>
      </p>
      <p>
        <link url="#top3">Fresh install of Fink in
            Panther</link>
      </p>
      <p>
        <link url="#top4">Upgrading your previous
            Fink installation</link>
      </p>
      <p>
        <link url="#top5">Check for circular dependencies&quot;
            error</link>
      </p>
      <p>
        <link url="#top6">Can't find X11.app after
            installation in Panther</link>
      </p>
      <p>
        <link url="#top7">Full screen mode in Apple's
            X11 1.0</link>
      </p>
      <p>
        <link url="#top8">Cut and Paste if you don't
            use quartz-wm</link>
      </p>
      <p>
        <link url="#top9">Fink keep asking to install
            xfree86?</link>
      </p>
      <p>
        <link url="#top10">With X11 in 10.3 my window
            title bars are missing</link>
      </p>
      <p>
        <link url="#top11">To remove Fink xfree86
            packages and install Apple's X11</link>
      </p>
      <p>
        <link url="#top12">Apple's X11 1.0 in Panther
            and CodeTek VirtualDesktop</link>
      </p>
      <p>
        <link url="#top13">&quot;The State of Fink&quot;</link>
      </p>
      <p>
        <link url="#top14">Fink
            &quot;Circular Dependency Problem&quot; Solved</link>
      </p>
      <p>
        <link url="#top15">Official Apple's X11 1.0
            FAQ</link>
      </p>
      <p>
        <link url="#top16">Can I run Apple's X11 logging
            in as &gt;console ?</link>
      </p>
      <p>
        <link url="#top17">To make Terminal.app and
            X11 boot in csh?</link>
      </p>
      <p>
        <link url="#top18">Using Apple's X11 1.0 &quot;Applications&quot;
            menu in Panther</link>
      </p>
      <p>
        <link url="#top19">The startx script in Apple's
            X11 for Panther</link>
      </p>
      <p>
        <link url="#top20">Problem with the kde binaries
            on panther</link>
      </p>
      <p>
        <link url="#top21">Setting the default for
            -all- X11 binaries</link>
      </p>
      <p>
        <link url="#top22">Matlab - license manager
            doesn't start at startup</link>
      </p>
      <p>
        <link url="#top23">Apple's X11 Customization</link>
      </p>
      <p>
        <link url="#top24">Apple
            X11 Beta 3 alternatives</link>
      </p>
      <p>
        <link url="#top25">X11 1.0 for Panther</link>
      </p>
      <p>
        <link url="#top26">Display
            InsightII; from SGI to Panther</link>
      </p>
      <p>
        <link url="#top27">X11 Forwarding on MacOS
            X</link>
      </p>
      <p>
        <link url="#top28">Sharing the Fink</link>
      </p>
      <p>
        <link url="#top29">Matlab
            and Apple's X11</link>
      </p>
      <p>
        <link url="#top30">Fink, the X11SDK and the
            Apple Installer</link>
      </p>
    </section>
    <section>
      <title>Installing
            Apple's X11 1.0 in Panther</title>
      <p>
                  Apple's X11 for Mac OS X 10.3 is available as an optional installation
            when you install Mac OS X 10.3 (Panther), 
                  meaning that the Panther installer does not automatically install
            Apple's X11 1.0.</p>
      <p>
            You need to click &quot;Custom&quot; in the Easy install pane then select X11.
            If you forgot to select it while installing Panther, 
            you can install it later by opening (double clicking) the X11User.pkg
            file on the Mac OS X Install Disc 3 CD.</p>
    </section>
    <section>
      <title>Installing
            Xcode and the X11 SDK package</title>
      <p>
                  Install XCode from the XCode Tools CD.</p>
      <p>
            The X11 SDK is not installed by default when you install Xcode, you must
            click the &quot;Customize&quot; button, 
            as this will allow you to select the &quot;X11 SDK&quot; checkbox also, which is
            by default not selected.</p>
      <p>
            If you forget to press the &quot;customize&quot; button, you can install the X11
            SDK later by double-clicking on the X11SDK.pkg file 
            in the Xcode Tools CD.</p>
    </section>
    <section>
      <title>Fresh
            install of Fink in Panther</title>
      <p>
                  -First install Apple's X11 1.0 from the Panther CD, XCode from the
            XCode disk, and the X11SDK.pkg also from the Xcode cd.</p>
      <p>
            -Is recommended</p>
      <p>
        <link url="http://fink.sourceforge.net/download/srcdist.php">bootstrapping
            from source,</link>
      </p>
      <p>
            starting from fink-full-0.6.0.tar.gz available on fink's:</p>
      <p>
        <link url="http://sourceforge.net/project/showfiles.php?group_id=17203">sourceforge
            download page.</link>
      </p>
      <p>
            -Since Fink version 0.15.0 or higher, you do not need to install system-xfree86
            anymore. 
            Fink is capable of automatically determining your system-xfree86 version
            if you don't already have any fink x11 packages installed. 
            If you currently have an old system-xfree86 package of any kind installed,
            please run the following commands:</p>
      <codeblock>sudo dpkg -r --force-all system-xfree86 system-xfree86-42 system-xfree86-43; fink selfupdate; fink index</codeblock>
    </section>
    <section>
      <title>Upgrading
            your previous Fink installation</title>
      <p>
                 If you installed Panther with the 'archive and install' method, and
            then installed Apple's X11 1.0 and the X11 SDK, 
                 be sure to install XCode from the XCode disk before upgrading Fink.</p>
      <p>
            Then, running:</p>
      <codeblock>fink selfupdate</codeblock>
      <p>
            should perform the upgrade for you. The latest version of the fink package
            manager will automatically detect 
            which version of OS X and which version of gcc you have installed, and
            will adjust itself accordingly.</p>
    </section>
    <section>
      <title>&quot;Check
            for circular dependencies&quot; error</title>
      <p>
                  When you run 'fink selfupdate' you might get the following error:</p>
      <codeblock>The following 17 packages will be installed or updated:
apt apt-shlibs bzip2 bzip2-dev bzip2-shlibs debianutils dpkg gettext
gettext-bin gettext-dev libiconv libiconv-bin libiconv-dev ncurses
ncurses-dev ncurses-shlibs tar
The following additional package will be installed:
fink-prebinding
Do you want to continue? [Y/n]
Failed: Problem resolving dependencies. Check for circular dependencies.</codeblock>
      <p>
            Some people have resolved this problem installing 'fink-prebinding' separately.</p>
      <p>
            If you get the above error, try running:</p>
      <codeblock>fink install fink-prebinding</codeblock>
      <p>
            and then running:</p>
      <codeblock>fink selfupdate</codeblock>
      <p> again.</p>
      <p>
            If running fink install fink-prebinding and then doing update-all again
            doesn't help, your only recourse is to start over 
            with a bootstrap of 0.6.0 from source, or wait for the bindist which
            should be coming shortly.</p>
    </section>
    <section>
      <title>Can't
            find X11.app after installation in Panther</title>
      <p>
                  After the installation of Apple's X11 1.0 on Panther, you will find
            the X11.app in /Applications/Utilities/</p>
      <p>
            (If you install the new X11 with Panther's &quot;archive and install&quot; method,
            it will not remove your old X11.app from /Applications)</p>
    </section>
    <section>
      <title>Full
            screen mode in Apple's X11 1.0</title>
      <p>
                  Open X11 preferences, and in the Output section there is an option
            for enabling full screen mode. 
                  After enabling it, use:</p>
      <p>
                  &quot;Command+Option+A&quot;</p>
      <p>
                  to enter and leave full screen mode.</p>
    </section>
    <section>
      <title>Cut
            and Paste if you don't use quartz-wm</title>
      <p>
                  If you're not using the quartz-wm, you should install autocutsel with
            Fink:</p>
      <p>
            Merges two X11 cut buffers.</p>
      <p>
            It provides a working cut and paste between Aqua and those X apps that
            only check one cut buffer.</p>
      <p>
            Usage Notes:</p>
      <p>
            just write 'autocutsel &amp;' in your ~/.xinitrc file.</p>
    </section>
    <section>
      <title>Fink
            keep asking to install xfree86?</title>
      <p>
                  If after installing Apple's X11, Fink keep asking to install xfree86,
            you need to:</p>
      <p>
                  Install the X11 SDK, which is on the Xcode CD (double click the X11SDK.pkg),
            and is not installed by default.</p>
      <p>
            Also note that you do not need to install system-xfree86 anymore, fink
            is capable of figuring out your X11 version automatically 
            in cases where you would have installed system-xfree86 previously.</p>
      <p>
            If you still have an old system-xfree86 package installed, run the following
            commands:</p>
      <codeblock>sudo dpkg -r --force-all system-xfree86 system-xfree86-42 system-xfree86-43; \fink selfupdate; fink index</codeblock>
    </section>
    <section>
      <title>With
            X11 in 10.3 my window title bars are missing</title>
      <p>
                  You didn't upgrade X11 to version &quot;X11 1.0 - XFree86 4.3.0&quot; included
            with Panther. 
                  Apple's X11 for Mac OS X 10.3 is available as an optional installation
            when you install Mac OS X 10.3 (Panther), 
                  meaning that the Panther installer does not automatically install
            Apple's X11 1.0.</p>
      <p>
            You can install it from the X11User.pkg file on the Mac OS X Install
            Disc 3 CD.</p>
    </section>
    <section>
      <title>To
            remove Fink xfree86 packages and install Apple's X11</title>
      <codeblock>sudo dpkg -r --force-depends xfree86-rootless xfree86-rootless-shlibs xfree86-base xfree86-base-shlibs
(the above command all in one line)
sudo rm -rf /usr/X11R6 /etc/X11 /Applications/XDarwin.app</codeblock>
      <p>
                  Then install Apple's X11 1.0 from the Panther CD including Xcode and
            the X11 SDK from the XCode CD.</p>
      <p>
            You don't need to install system-xfree86 anymore. It's automatically
            generated if fink detects a valid x11 install.</p>
    </section>
    <section>
      <title>Apple's
            X11 1.0 in Panther and CodeTek VirtualDesktop</title>
      <p>
                  You can use it by making Virtual Desktop put all X11 windows in a
            single desktop. Expos? also works fine.</p>
      <p>
            Posted at the x11-users list by Matthew S. Klahn, (CodeTek developer):</p>
      <p>
            &quot;Hi, everyone; friendly neighborhood CodeTek developer here. We are currently
            working on CodeTek VirtualDesktop 3.0, 
            which we plan to include full X11 support, regardless of X11 implementation
            used (i.e. XDarwin, OroborOSX, Apple X11, etc.). 
            We have decided that this was a bigger issue that just Apple X11/CTVD
            compatibility, and that we will need to work with X11 windows themselves,
            and thus support all X11 implementations. We are working on this feature
            now, and hope to have a public beta available by the end of the year
            for people to test this out. This is one of the top two requests for
            us, and we realize how important it is for our users.</p>
      <p>
            In the meantime, we have worked with Adrian Umpleby of OroborOSX to get
            both of our apps working together, 
            and compatibility between OroborOSX and CTVD is very good. I realize
            that choice is good, but since we don't 
            have the information and API for X11 manipulation in the 2.x version
            of CTVD, and adding it will take re-engineering 
            the product to a great extent, we cannot provide a fix for this by ourselves
            in the 2.x product. 
            I hope that everyone understands, and that this information helps. Please
            let us know if you have any questions; 
            I do monitor this mailing list, but did manage to miss this message.
            I will pay close attention to my digest messages, 
            though, and shouldn't miss any futher mails&quot;.</p>
      <p>
            ----</p>
      <p>
            Matthew S. Klahn</p>
      <p>
            Software Architect, CodeTek Studios, Inc.</p>
      <p>
        <link url="http://www.codetek.com">http://www.codetek.com</link>
      </p>
    </section>
    <section>
      <title>&quot;The
            State of Fink&quot;</title>
      <p>
                  This is important information for all fink-users, please read carefully
            and follow what's necessary to do for your system.</p>
      <p>
            The following was posted by Benjamin Reed (Fink Project Leader) at the
            fink-users list, on Oct 24th:</p>
      <p>
        <link url="http://article.gmane.org/gmane.os.apple.fink.general/10138">The
            State of Fink</link>
      </p>
      <p>
            In some parts of the world, Panther is already out, so I wanted to give
            an update on where things are. A more formal announcement will come
            when we're ready for a &quot;real&quot; release.</p>
      <p>How This Will Work</p>
      <p>
            First of all, unlike the transition from 10.1 -&gt; 10.2, we will continue
            to support the previous Mac OS X release. It may not be updated as
            quickly as the 10.3 tree, but we now at least have the resources in
            place to make it reasonable to support both. It would be nice to have
            volunteers from the community to help &quot;backport&quot; 10.3 changes, but that
            is something that will probably have to be worked out later. If you're
            interested, drop a line to fink-core@lists.sourceforge.net.</p>
      <p>The Transition to GCC 3.3</p>
      <p>
            HOWEVER, to ease keeping things in sync between 10.2 and 10.3, our
            continued support for 10.2 will *only* be if you are using the gcc 3.3
            update, since the differences between gcc3.1 and 3.3 are reasonably
            large as far as how porting happens.</p>
      <p>
            If you've been following the fink-devel list, you know that for the past
            few months we've been working on a tree dubbed &quot;10.2-gcc3.3&quot;, which
            currently contains most of the packages in the 10.2 tree, updated to
            work with the new compiler. Even now more packages are getting moved
            over each day, and tools have now been written to make it easier to
            track changes between the different development trees.</p>
      <p>
            The 10.2-gcc3.3 tree is perfectly usable right now, although a little
            incomplete in unstable. David R. Morrison is working incredibly hard
            to
            finish putting together the first binary distribution for 10.2-gcc3.3,
            and it is expected to be coming any day now.</p>
      <p>The Transition to Panther</p>
      <p>
            The initial target for Panther users will be for you to use the
            10.2-gcc3.3 binary distribution. This tree is binary-compatible with
            Panther and should provide a smooth upgrade path to the &quot;real&quot; 10.3 tree.</p>
      <p>
            The 10.3 tree is currently based on a subset of 10.2-gcc3.3, and is,
            like it's predecessor, continuously getting updated and is getting
            closer to parity with the other trees as time goes on. There's still
            plenty of work to do, but almost all of stable is there, and ready, and
            developers are diligently getting packages moved over to the unstable
            tree.</p>
      <p>What You Can Do</p>
      <p>
            Please help us test the 10.2-gcc3.3 and 10.3 trees.</p>
      <p>
            10.2:</p>
      <p>
            If you're running 10.2, install the December developer tools if you
            haven't already, and then install the August updater. You can get them
            both at the Apple Developer Connection </p>
      <p>
        <link url="http://developer.apple.com/">http://developer.apple.com/</link>
      </p>
      <p>
            It does require registration, but is free.</p>
      <p>
            10.3:</p>
      <p>
            If you're already running 10.3, be warned that if you installed fink's
            X11 package (instead of a system-xfree86 package), you may need to
            force-remove them, and then re-install Apple's X11 (make sure you also
            install the X11 SDK from the developer tools!)</p>
      <p>Everyone:</p>
      <p>
            Download the 0.15.1 beta of fink here:</p>
      <p>
        <link url="http://prdownloads.sourceforge.net/fink/fink-0.15.1-beta.tar.gz?download">Download
            0.15.1 beta of fink</link>
      </p>
      <p>
            ...and follow the instructions for the rsync upgrade (which are good
            general instructions for upgrading your fink package manager to the beta):</p>
      <p>
        <link url="http://fink.sourceforge.net/download/rsync-upgrade.php">http://fink.sourceforge.net/download/rsync-upgrade.php</link>
      </p>
      <p>
            The beta will set you up for 10.2-gcc3.3 or 10.3, depending on what OS
            version you are running.</p>
      <p>
            *Please* keep in mind that you shouldn't use apt-get or dselect to
            install things until we have a binary distribution (or if you do, make
            sure you do &quot;fink update-all&quot; afterwards so that any 10.2-gcc3.3 fixes
            or upgrades get built and installed). Once the 10.2-gcc3.3 bindist is
            ready, we will make an announcement and it will be safe to use binary
            tools again.</p>
      <p>
            Also keep in mind that for now, 10.2-gcc3.3 and 10.3 are still
            considered &quot;beta&quot;. Expect the occasional problem. Generally, things
            are working pretty well, though.</p>
      <p>
            We'll let you know as soon as something official is available.</p>
    </section>
    <section>
      <title>Fink
            &quot;Circular Dependency Problem&quot; Solved</title>
      <p>
                  Posted by Benjamin Reed at the fink-users list:</p>
      <p>
        <link url="http://article.gmane.org/gmane.os.apple.fink.general/10265">http://article.gmane.org/gmane.os.apple.fink.general/10265</link>
      </p>
      <p>
            &quot;fink-prebinding was &quot;Essential&quot; in the bootstrap, but not in the actual
            fink package tree. 
            Since essential packages depended on a non-essential package that wasn't
            installed yet, 
            fink got confused and gave up, since essential packages must always be
            installed first.</p>
      <p>
            This is fixed in all trees, and a &quot;fink selfupdate&quot; should solve circular
            dependency issues if you have been unable to upgrade&quot;.</p>
    </section>
    <section>
      <title>Official
            Apple's X11 1.0 FAQ</title>
      <p>
        <link url="http://developer.apple.com/qa/qa2001/qa1232.html">Apple's
            X11 FAQ</link>
      </p>
    </section>
    <section>
      <title>Can
            I run Apple's X11 logging in as &gt;console ?</title>
      <p>
                  X11 for Mac OS X cannot be run without the window server.</p>
      <p>
            If you log in as &quot;&gt;console&quot; it stops the Quartz Window Server which is
            required for Apple's X11 to operate on MacOS X.</p>
    </section>
    <section>
      <title>To
            make Terminal.app and X11 boot in csh?</title>
      <p>
                  You'll need to change your default shell. Assuming you want tcsh (the
            default shell for Jaguar) 
                  all you really need to do is issue the 'chpass' command in a terminal
            window, the NetInfo database will be updated to reflect the change:</p>
      <codeblock>chpass -s /bin/tcsh</codeblock>
      <p>
            The 'chpass' command doesn't work prior to 10.3. But, it does work in
            10.3.</p>
    </section>
    <section>
      <title>Using
            Apple's X11 1.0 &quot;Applications&quot; menu in Panther</title>
      <p>
                  If you launch a process fron the Apple's X11 &quot;Applications&quot; menu in
            Panther and your Applications commands are explicitly sent 
                  to the background via '&amp;', the process is launched and it maximizes cpu usage that can only be
            killed with a -9 option. 
                  Remove the '&amp;' and this may fix the problem. In x11 v1.0, the applications are backgrounded
            and there is no need for the '&amp;'.</p>
    </section>
    <section>
      <title>The
            startx script in Apple's X11 for Panther</title>
      <p>
                  The startx script in Apple's X11 for Panther is broken. It does not
            work if you try to use it from a tcsh command line. In bash, it works.
                  From a post by Martin Costabel to the fink-beginners list:</p>
      <p>
            &quot;The common reason for these problems is that the build system for 
            xfree86 (also used by Apple) creates scripts like startx (or xmkmf, or
            all the man pages) using the C preprocessor. This preprocessor should
            among other things replace all occurrences of &quot;XCOMM&quot; by the comment
            sign &quot;#&quot;.</p>
      <p>
            Now cpp on Panther is broken. It writes a line &quot;#pragma GCC 
            set_debug_pwd...&quot; into its output, and this line is found as a first
            line of startx and about 800 other text files in Apple's /usr/X11R6.
            Just try &quot;man X&quot; with Apple's X11 installed. I am curious how long it
            will take Apple to fix it. My guess is in the order of 1 year.</p>
      <p>
            For the Fink xfree86 package, the maintainers tried to replace the call
            to the buggy &quot;cpp&quot; by a supposedly working &quot;cpp3&quot;, but apparently this
            doesn't work correctly either, as witnessed by the remaining unreplaced
            &quot;XCOMM&quot;s&quot;.</p>
      <p>
            The effect on a shell script like startx is that the line #!/bin/sh that
            defines the shell under which this is to run, 
            is not seen, because it works only when it is the first line. So when
            you run this script from your tcsh command line, 
            it tries to execute everything in tcsh which fails, because the syntax
            is made for sh.</p>
      <p>
            Right now, you can either remove this first line from the startx script
            or run it as &quot;sh startx&quot;.</p>
    </section>
    <section>
      <title>Problem
            with the kde binaries on panther</title>
      <p>
            The only problem with the kde binaries on panther is that after installing
            them, you need to do:</p>
      <codeblock>fink remove qt3</codeblock>
      <codeblock>fink install qt3</codeblock>
      <p>
            to fix qt3's linking against freetype libraries, and then it will work.</p>
    </section>
    <section>
      <title>Setting
            the default for -all- X11 binaries</title>
      <p>
            Posted by Ernest Prabhakar at the x11-users lists:</p>
      <p>
            &quot;To do that, you need to change a file that has an -explicit- extension
            of '.x11app'. 
            Since UNIX binaries can implicitly be either Terminal or X11 binaries,
            Launch Services won't know which until after it is double-clicked, 
            so that information can't be used in Get Info. Since nobody (currently)
            ships binaries with an explicit extension, 
            I believe you need to do something like the following:</p>
      <p>
            1. Create a simple file which ends in '.x11app'</p>
      <codeblock>$ touch foo.x11app</codeblock>
      <p>
            2. Open that with Get Info in the Finder</p>
      <codeblock>$ open .</codeblock>
      <codeblock>Command-I or Control-Click</codeblock>
      <p>
            3. Select the application</p>
      <p>
            4. Set that as default (&quot;Always open&quot; or 'Change All&quot;).</p>
      <p>
            That should make every X11 binary run with the launcher of your choice.
            Perhaps a little convoluted, but that's the price we pay for stretching
            the paradigm&quot;.</p>
    </section>
    <section>
      <title>Matlab
            - license manager doesn't start at startup</title>
      <p>
            (Thanks to Mike Coleman)</p>
      <p>
            &quot;Installed the Matlab for Panther. Of course it doesn't work. It all
            went on fine. 
            However, the license manager doesn't start at start up - and if you 
            try ./lmstart in the right /Applications/MATLAB6p5p1/etc directory it
            won't start - 
            Attempting to start gives a -15 error, 
            the fixes on the Mathworks site are for 10.1 and 10.2 for this problem.
            They don't work&quot;.</p>
      <p>
            You can clear it by running in terminal.app:</p>
      <codeblock>sudo rm -f /var/tmp/lm_TMW.*</codeblock>
    </section>
    <section>
      <title>Apple's
            X11 Customization</title>
      <p>
            Run:</p>
      <codeblock>man quartz-wm</codeblock>
      <p>
            and</p>
      <codeblock>man Xquartz</codeblock>
      <p>
            to get a list of all the defaults-based options.</p>
      <p>
            From man Xquartz: &quot;CUSTOMIZATION&quot;</p>
      <p>
            Xquartz can also be customized using the defaults(1) command.</p>
      <p>
            The available options are:</p>
      <codeblock>defaults write com.apple.x11 enable_fake_buttons -boolean true
defaults write com.apple.x11 fake_button2 modifiers
defaults write com.apple.x11 fake_button3 modifiers
defaults write com.apple.x11 swap_alt_meta -boolean true
defaults write com.apple.x11 keymap_file filename
defaults write com.apple.x11 no_quit_alert -boolean true
defaults write com.apple.x11 no_auth -boolean true
defaults write com.apple.x11 nolisten_tcp -boolean true
defaults write com.apple.x11 xinit_kills_server -boolean false
defaults write com.apple.x11 fullscreen_hotkeys -boolean false
defaults write com.apple.x11 enable_system_beep -boolean false
defaults write com.apple.x11 enable_key_equivalents -boolean false
defaults write com.apple.x11 depth depth</codeblock>
      <p>
            -----------</p>
      <p>
            From man quartz-wm: &quot;CUSTOMIZATION&quot; </p>
      <p>
            quartz-wm can be customized using the defaults(1) command.</p>
      <p>
            The  available options are:</p>
      <codeblock>defaults write com.apple.x11 wm_ffm -bool true
defaults write com.apple.x11 wm_click_through -bool true</codeblock>
    </section>
    <section>
      <title>Apple
            X11 Beta 3 alternatives</title>
      <p>
            The following info was posted by Torrey T. Lyons (XFree86.org) at the
            x11-users list:</p>
      <p>
            &quot;In the discussion of the Apple X11 Beta 3, there was some confusion
            about the available X11 options for Jaguar. 
            To clarify, Apple's X11 1.0 is based on XFree86 4.3.0. (Beta 3 was based
            on the earlier XFree86 4.2.1, which is now over a year old.) 
            There are several easy-to-use and free installers for XFree86 4.3.0 on
            Jaguar available from:</p>
      <p>
        <link url="http://fink.sourceforge.net">Fink</link>
      </p>
      <p>
        <link url="http://sourceforge.net/projects/xonx">XonX</link>
      </p>
      <p>
            In particular, a standalone, pre-compiled binary of XFree86 4.3.0 for
            Jaguar, with a GUI installer based on InstallAnywhere, 
            is available for free download at:</p>
      <p>
        <link url="http://prdownloads.sourceforge.net/xonx/XFree86_4.3.0.dmg?download">XonX-pre-compiled
            binary of XFree86 4.3.0 for Jaguar</link>
      </p>
      <p>
            Apple's X11 does include improvements in two areas over XFree86 4.3.0,
            which represent real work by Apple engineers:</p>
      <p>
            1. The proprietary quartz-wm offers good integration with Aqua.</p>
      <p> 
            For Jaguar a similar solution is available with the </p>
      <p>
        <link url="http://http://oroborosx.sourceforge.net">OroborOSX</link>
      </p>
      <p> window
            manager.</p>
      <p>
            2. Apple's X server is faster then XFree86 4.3.0. XFree86 4.4.0 will
            be released at the end of this year and will contain 
            the performance improvements from Apple's X11. Apple should be commended
            for making these available to the 
            open source community rather then just leaving Jaguar with an unsupported
            beta. 
            On Jaguar XFree86 4.4.0 will be faster then 4.3.0, and on Panther XFree86
            4.4.0 will have identical performance to Apple's X11&quot;.</p>
    </section>
    <section>
      <title>X11
            1.0 for Panther</title>
      <p>
            The following info was posted by Ernest Prabhakar at the x11-users list:</p>
      <p>
            &quot;Dear X11 Users,</p>
      <p>
            We are pleased to announce that X11 1.0, the GM version, is available
            as part of Mac OS X v10.3 &quot;Panther.&quot;</p>
      <p>
        <link url="http://www.apple.com/macosx/features/x11/">X11
            for Mac OS X</link>
      </p>
      <p>
            This marks a major milestone for Apple. Not only is X11 1.0 a complete,
            highly-optimized implementation of 
            the X Window System R6.6 specification, plus the Aqua-compatible quartz-wm
            window manager, 
            it is bundled in the box as an optional install for Mac OS X. It is also
            available as a free download for Panther Server customers, 
            or customers who purchase Macs pre-installed with Panther:</p>
      <p>
        <link url="http://www.apple.com/macosx/features/x11/download/">Get
            X11 for Mac OS X</link>
      </p>
      <p>
            Note: This version requires Mac OS X v10.3 &quot;Panther&quot; or later</p>
      <p>
            X11 1.0 includes a range of new features, including Finder integration
            for double-clickable applications, support for full-screen mode, 
            and an improved Applications menu. It is one of the 150+ new features
            available in </p>
      <p>
        <link url="http://www.apple.com/macosx">Panther</link>
      </p>
      <p>  
            including added UNIX functionality such as NFS performance improvements,
            updated scripting languages and command-line utilities, and additional
            POSIX and Linux APIs.</p>
      <p>
            The release of X11 1.0 marks the end of our highly-successful beta process.
            We would like to express our appreciation for all of you who helped us
            by participating in the X11 for Mac OS X beta process. 
            We made a wide range of improvements to the product based on your feedback,
            the bulk of which have been released as </p>
      <p>
        <link url="http://developer.apple.com/darwin/projects/X11/index.html">Open
            Source</link>
      </p>
      <p> and will become part of XFree86 4.4. 
            Please observe the terms of the beta license agreement and do not redistribute
            private copies of that beta.</p>
      <p>
            I hope this information is helpful to you, and I apologize for not getting
            it out sooner. 
            Feel free to forward this to other people who might be interested in
            X11 1.0. If you have any questions or comments, please email me directly.</p>
      <p>
            Sincerely,</p>
      <p>
            Ernie Prabhakar</p>
      <p>
            -----------</p>
      <p>
            Ernest N. Prabhakar, Ph.D.</p>
      <p>
            Product Manager, UNIX &amp; Open Source</p>
      <p>
            Mac OS X Product Marketing</p>
      <p>
            (408) 974-3075 </p>
    </section>
    <section>
      <title>Display
            InsightII; from SGI to Panther</title>
      <p>
            (Thanks to Mengjuei Hsieh)</p>
      <p>
            Now you can display InsightII; from SGI to a Mac.</p>
      <p>
            Please, read more at:</p>
      <p>
        <link url="http://rayl0.bio.uci.edu/~mjhsieh/Library/mt/mt-comments.cgi?entry_id=114">Mengjuei
            - Blog</link>
      </p>
      <p>
        <link url="http://rayl0.bio.uci.edu/~mjhsieh/screenshot/11032003.gif">Screenshot</link>
      </p>
    </section>
    <section>
      <title>X11
            Forwarding on MacOS X</title>
      <p>
            Jerry Talkington wrote detailed instructions about</p>
      <p>
            &quot;X11 Forwarding on MacOS X&quot; on his web-site:</p>
      <p>
        <link url="http://tinyurl.com/tbkf">X11
            Forwarding on MacOS X</link>
      </p>
    </section>
    <section>
      <title>Sharing
            the Fink</title>
      <p>
            (How to share software between more than one fink installation)</p>
      <p>
            Thanks to </p>
      <p>Benjamin Reed</p>
      <p> (Fink Project Lead).</p>
      <p>
        <link url="http://ranger.befunk.com/blog/">Tales
            of the Racoon Fink</link>
      </p>
      <p>
            October 29, 2003</p>
      <p>
            ---------------------</p>
      <p>Sharing the Fink</p>
      <p>
            &quot;I was recently asked how to share software between more than one fink
            installation. 
            This is usually because the person has 2 (or more) machines, only one
            of which is fast. =) 
            It's pretty easy to share binaries you've built on one system with another.
            Here's how (keep in mind these instructions will generally only work
            if each system is running the same major version of Mac OS X):</p>
      <p>1. Install Fink on the &quot;master&quot;
            (build) system.</p>
      <p>2. (If the clients
            already have fink installed, you can skip this step.) Copy /sw to the
            &quot;client&quot; systems. 
            First you must enable &quot;Remote Login&quot; on the &quot;master&quot; box. Then, run the
            following on each of the &quot;client&quot; machines:</p>
      <codeblock>sudo rsync -avzr -e ssh user@otherhost:/sw/ /sw/</codeblock>
      <p>
            Just replace user@otherhost above with the username and hostname of the
            system to copy from.</p>
      <p>
            This will make a clone of the fink installation on your &quot;master&quot; box
            on each of the clients.</p>
      <p>3. On the &quot;master&quot;
            box, build something, and then run:</p>
      <codeblock>fink scanpackages</codeblock>
      <p>
            This will make fink generate apt indexes for all of your enabled trees.</p>
      <p>4. On the &quot;master&quot;
            box, enable:</p>
      <codeblock>&quot;Personal Web Sharing&quot;</codeblock>
      <p>
            in the Sharing section of System Preferences, and then set up httpd to
            expose your /sw/fink directory externally. I do so by making an:</p>
      <codeblock>/etc/httpd/users/fink.conf</codeblock>
      <p> file that contains:</p>
      <codeblock>Alias /fink /sw/fink&lt;Directory /sw/fink&gt;
Options Indexes FollowSymLinks&lt;/Directory&gt;</codeblock>
      <p>
            ..and then run:</p>
      <codeblock>sudo /usr/sbin/apachectl graceful</codeblock>
      <p> to (re)start.</p>
      <p>5. On
            the &quot;client&quot; box(es), edit:</p>
      <codeblock>/sw/etc/apt/sources.list</codeblock>
      <p>
            and add the lines representing your fink trees. For example, if my IP
            address of my build box at home is 192.168.42.7, the client would add:</p>
      <codeblock>deb http://192.168.42.7/fink stable main crypto
deb http://192.168.42.7/fink unstable main crypto
deb http://192.168.42.7/fink local main</codeblock>
      <p>6. On the &quot;client&quot;
            box(es), run:</p>
      <codeblock>sudo apt-get update</codeblock>
      <p>
                 If all goes well, you should see something like:</p>
      <codeblock>Hit http://192.168.42.7 stable/main Packages
Hit http://192.168.42.7 stable/main Release
Hit http://192.168.42.7 stable/crypto Packages
...and so on</codeblock>
      <p>7. You should
            then be able to do:</p>
      <codeblock>sudo apt-get install &lt;package&gt;</codeblock>
      <p>
                 for anything that's been built on the &quot;master&quot; box.</p>
      <p>
                 Any time you build more stuff there, you will need to re-run:</p>
      <codeblock>fink scanpackages</codeblock>
      <p> on the master,</p>
      <p>
                  and</p>
      <codeblock>sudo apt-get update</codeblock>
      <p> on the client(s)&quot;.</p>
    </section>
    <section>
      <title>Matlab
            and Apple's X11</title>
      <p>
                  Thanks to Martin Costabel (Fink Developer).</p>
      <p>
            &quot;There is a common misconception about Matlab requiring oroborOSX, which
            needs XDarwin. 
            Matlab works very nicely with Apple's X11 (as far as this bloated &lt;at&gt; #?!# &lt;at&gt; is able to work nicely). 
            There were basically two problems between Matlab and X11, both are solved,
            and you can find information about this on the:</p>
      <p>
        <link url="http://www.mathworks.com/support/solutions/data/36012.shtml">Mathworks
            web site</link>
      </p>
      <p>
            The first problem is one I never found important, because it does not
            appear if you start Matlab from the command line: 
            The &quot;LaunchMatlab&quot; clickable starter has to be taught about Apple's X11
            instead of OroborOSX. 
            This is done by simply editing a text file and replacing names. Mathworks'
            PantherUpdater does this for you.</p>
      <p>
            The second problem is a longstanding binary incompatibility between Matlab
            and xfree86-4.3 (which concerns Apple's X11 on Panther, 
            because it is a variant of xfree86-4.3.0) because of libraries compiled
            with thread support. This is fixed, too, by the PantherUpdater.</p>
      <p>
            The file to download is called MathWorks_Panther_Updater.dmg&quot;</p>
    </section>
    <section>
      <title>Fink,
            the X11SDK and the Apple Installer</title>
      <p>
                  Several people had to install the &quot;X11SDK&quot; twice until they got it
            recognized, because sometimes the Apple installer 
                  forgets to install some files and needs a second run.</p>
      <p>
                  Good news is that if you're 'only' installing binary packages, 
                  and you have fink-0.17.0 or later installed, system-xfree86 no longer
            requires the &quot;X11SDK&quot;.</p>
      <p>
            Anyhow, Martin Costabel has written a small script to compare the bom
            of an installed package with what is really on the disk.</p>
      <p>
            If you run it as:</p>
      <codeblock>sh bomcheck X11SDK</codeblock>
      <p>
            it tells you whether the installation of that package is complete.</p>
      <p>
            You can download the script from here:</p>
      <p>
        <link url="http://cvs.sourceforge.net/viewcvs.py/*checkout*/fink/experimental/costabel/bomcheck?rev=1.1">bomcheck</link>
      </p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
  <chapter filename="help">
    <title>      /
          Help /</title>
    <shorttitle>      /
          Help /</shorttitle>
    <preface>
      <p>
                  Do your homework and study all the information available on the Web.</p>
      <p/>
    </preface>
    <section>
      <title>Available
            Sites</title>
      <p>
        <link url="http://fink.sourceforge.net">Fink
            Web site</link>
      </p>
      <p>
        <link url="http://fink.sourceforge.net/faq/index.php">The
            Fink FAQ's</link>
      </p>
      <p>
        <link url="http://fink.sourceforge.net/doc/users-guide/index.php">Fink
            User's Guide</link>
      </p>
      <p>
        <link url="http://fink.sourceforge.net/doc/bundled/usage.php">Fink
            Usage</link>
      </p>
      <p>
        <link url="http://developer.apple.com/qa/qa2001/qa1232.html">Official
            Apple's X11 FAQ</link>
      </p>
      <p>
        <link url="http://forums.macosxhints.com/showthread.php?s=&amp;threadid=8704">forums.macosxhints.com
            X11 FAQ</link>
      </p>
    </section>
    <section>
      <title>Fink
            archives</title>
      <p>  
            Read or search the Mailing Lists archives to check</p>
      <p>
            if someone is having the same problem as you:</p>
      <codeblock>1- At the Mail-archive.com:</codeblock>
      <p>
        <link url="http://www.mail-archive.com/fink-beginners@lists.sourceforge.net/">Fink-beginners
            mailing list archive</link>
      </p>
      <p>
        <link url="http://www.mail-archive.com/fink-users@lists.sourceforge.net/">Fink-users
            mailing list archive</link>
      </p>
      <p>
            (Search works, but the archives are a week behind)</p>
      <codeblock>2- At sourceforge:</codeblock>
      <p>
        <link url="http://sourceforge.net/mailarchive/forum.php?forum=fink-beginners">Fink-beginners
            mailing list archive</link>
      </p>
      <p>
        <link url="http://sourceforge.net/mailarchive/forum.php?forum=fink-users">Fink-users
            mailing list archive</link>
      </p>
      <p>
            (Small search field (poor) on the left hand side of the page)</p>
      <codeblock>3- The archives at GMANE.org work best for me:</codeblock>
      <p>
        <link url="http://news.gmane.org/thread.php?group=gmane.os.apple.fink.beginners">Fink-beginners
            mailing list archive</link>
      </p>
      <p>
        <link url="http://news.gmane.org/thread.php?group=gmane.os.apple.fink.general">Fink-general
            mailing list archive</link>
      </p>
      <p>
        <link url="http://news.gmane.org/thread.php?group=gmane.os.apple.fink.devel">Fink-devel
            mailing list archive</link>
      </p>
    </section>
    <section>
      <title>Apple's
            X11 archives</title>
      <p>
        <link url="http://lists.apple.com/mhonarc/x11-users/">Apple
            Mailing lists: X11 users</link>
      </p>
      <p>
            After you have studied all the material available, if you still don't
            understand a subject, or you're facing some installation problems with
            a particular package, 
            you are always welcome to subscribe and ask for help at the following
            mailing lists:</p>
      <p>
        <link url="http://fink.sourceforge.net/lists/fink-beginners.php">Fink-beginners</link>
      </p>
      <p>
        <link url="http://fink.sourceforge.net/lists/fink-users.php">Fink-users</link>
      </p>
      <p>
        <link url="http://www.lists.apple.com/mailman/listinfo/x11-users">x11-users:
            X11 for Mac OS X discussion list </link>
      </p>
      <p>
            Also, check for information about Fink and Apple's X11 at the MacOS X
            Hints web site or post your questions at the MacOS X Hints forums:</p>
      <p>
        <link url="http://www.macosxhints.com/">MacOS
            X Hints</link>
      </p>
      <p>
        <link url="http://forums.macosxhints.com/">Macosxhints-forums</link>
      </p>
      <p>
        <link url="http://forums.macosxhints.com/showthread.php?s=&amp;threadid=8704">forums.macosxhints.com
            X11 FAQ</link>
      </p>
    </section>
    <section>
      <title>End of the chapter</title>
    </section>
  </chapter>
</document>
