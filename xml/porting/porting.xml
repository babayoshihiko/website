<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE document SYSTEM "../finkdoc.dtd">

<document filename="index">
<title>Porting Unix software to Darwin and Mac OS X</title>
<shorttitle>Porting</shorttitle>
<cvsid>$Id: porting.xml,v 1.8 2002/04/14 23:10:35 fingolfin Exp $</cvsid>

<preface>
<p>
This document contains hints for porting Unix applications to Darwin
and Mac OS X.
The information here applies to Mac OS X version 10.0.x and Darwin
1.3.x.
Both systems will be referred to as Darwin, since Mac OS X is actually
a superset of Darwin.
</p>
</preface>


<chapter filename="basics">
<title>Basics</title>
<shorttitle>Basics</shorttitle>


<section name="heritage"><title>Where Darwin came from</title>
<p>
Darwin is a Unix-like operating system that evolved from NeXTStep /
OpenStep.
Lore has it that it was initially forked off 4.4BSD Lite.
The BSD heritage still shows, in fact Darwin was recently modernized
with code from FreeBSD and NetBSD.
</p>
<p>
Darwin's kernel is based on a combination of Mach 3.0, BSD, and
proprietary functionality like the object-oriented driver layer
IOKit.
Although Mach originally is a micro-kernel design, the BSD kernel that
sits on top of it is monolithic and the two are now so intertwined
that they must be regarded as a single monolithic kernel.
</p>
<p>
The user-space tools and libraries shipped with Darwin are mostly of
the BSD persuation, as opposed to the GNU tools you get with Linux.
Apple is not as strict as other BSDs though, and goes for useful
compromises.
For example, Apple ships both BSD make and GNU make, with GNU make
installed as the default.
</p>
</section>


<section name="compiler"><title>The Compiler and Tools</title>
<p>
Short story:
The compiler is a gcc derivate, but installed as <code>cc</code>;
you may have to patch Makefiles.
Most packages won't build shared libraries.
If you get errors related to macros, use the
<code>-no-cpp-precomp</code> option.
</p>
<p>
Long story:
The compiler tool chain in the Mac OS X Developer Tools is a strange
beast.
The compiler is based on the gcc 2.95.2 suite, with modifications to
support the Objective C language and some Darwin quirks.
The preprocessor (<code>cpp</code>) is available in two versions.
One is the standard precompiler (from gcc 2.95.2), the other one is a
special precompiler written by Apple, with support for precompiled
headers.
The latter one is used by default, because it is faster.
However, some code doesn't compile with Apple's precompiler, so you
must use the <code>-no-cpp-precomp</code> option to get the standard
precompiler.
(Note: I previously recommended the <code>-traditional-cpp</code>
option.
The semantics of this option have changed slightly with GCC 3,
breaking most packages that use it.
<code>-no-cpp-precomp</code> has the desired effect on both the
current Developer Tools and future compilers based on GCC 3.)
</p>
<p>
The assembler says it's based on gas 1.38.
The linker is not based on GNU tools.
This is a problem when building shared libraries, as GNU libtool and
configure scripts generated by it don't know how to handle Apple's
linker.
</p>
</section>


<section name="host-type"><title>Host type</title>
<p>
Short story:
If configure fails with 'Can't determine host type', copy config.guess
and config.sub from /usr/libexec into the current directory.
</p>
<p>
Long story:
The GNU world uses a canonical format to specify system types.
It has three parts: cpu type, manufacturer and operating system.
Sometimes a fourth part is added - then the third part denotes the
kernel, while the fourth denotes the operating system.
All parts are lower case and concatenated using dashes.
Some examples:
<code>i586-pc-linux-gnu</code>,
<code>hppa1.1-hp-hpux10.20</code>,
<code>sparc-sun-solaris2.6</code>.
The host type for Mac OS X 10.0 is
<code>powerpc-apple-darwin1.3</code>.
</p>
<p>
Many packages that use autoconf want to know the host type of the
system they are compiled on.
(Side note: to support cross-compiling and porting, there are actually
three types - the host type, the build type and the target type.
Usually, they're all the same.)
You can either pass the host type to the configure script as a
parameter or you can let it guess.
</p>
<p>
The configure script uses two companion scripts to determine host
types.
<filename>config.guess</filename> tries to guess the host type,
<filename>config.sub</filename> is used to validate and canonicalize
the host type.
These scripts are maintained as separate entities, but they are
included in every package that uses them.
Until very recently, these scripts didn't know about Darwin or Mac OS
X.
If you have a package that doesn't recognize Darwin, you must replace
the config.guess and config.sub included in the package.
Luckily, Apple put working versions in /usr/libexec, so you can just
copy them from there.
</p>
</section>


<section name="libraries"><title>Libraries</title>
<p>
Short story:
You can safely remove <code>-lm</code> from Makefiles, but you don't
need to.
</p>
<p>
Long story:
Mac OS X doesn't have separate libc, libm, libcurses, libpthread
etc. libraries.
Instead, they're all part of the system library, libSystem.
(In earlier versions, this actually was the System framework.)
However, Apple placed appropriate symlinks in /usr/lib, so linking
with <code>-lm</code> will work.
The only exception is <code>-lutil</code>.
On other systems, libutil contains functions related to
pseudo-terminals and login accounting.
These functions are in libSystem, but there is no symlink to provide a
libutil.dylib.
</p>
</section>

</chapter>


<chapter filename="shared">
<title>Shared Code</title>
<shorttitle>Shared Code</shorttitle>

<section name="lib-and-mod"><title>Shared Libraries vs. Loadable Modules</title>
<p>
One Mach-O feature that hits many people by surprise is the strict
distinction between shared libraries and dynamically loadable
modules.
On ELF systems both are the same; any piece of shared code can be
used as a library and for dynamic loading.
</p>
<p>
Mach-O shared libraries have the file type MH_DYLIB and carry the
extension <code>.dylib</code>.
They can be linked against with the usual static linker flags,
e.g. <code>-lfoo</code> for libfoo.dylib.
However, they can not be loaded as a module.
(Side note: Shared libraries can be loaded dynamically through an
API. However, that API is different from the API for bundles and the
semantics make it useless for an dlopen() emulation. Most notably,
shared libraries can not be unloaded.)
</p>
<p>
Loadable modules are called "bundles" in Mach-O speak.
They have the file type MH_BUNDLE.
Since no component involved cares about it, they can carry any
extension.
The extension <code>.bundle</code> is recommended by Apple, but most
ported software uses <code>.so</code> for the sake of compatibility.
Bundles can be dynamically loaded and unloaded via dyld APIs, and
there is a wrapper that emulates <code>dlopen()</code> on top of that
API.
It is not possible to link against bundles as if they were shared
libraries.
However, it is possible that a bundle is linked against real shared
libraries; those will be loaded automatically when the bundle is
loaded.
</p>
</section>


<section name="version"><title>Version Numbering</title>
<p>
On an ELF system, version numbers are usually appended to the file
name of the shared library, e.g. <filename>libqt.so.2.3.0</filename>.
On Darwin, the version numbers are placed between the library name and
the extension, e.g. <filename>libqt.2.3.0.dylib</filename>.
Note that this allows you to request a specific version of the library
when linking, using <code>-lqt.2.3.0</code> for the example above.
</p>
<p>
When creating a shared library, you can specify a name to be used when
searching for the library at run time.
This is usual practice and allows several major versions of a library
to be installed at the same time.
On ELF systems this is called the <code>soname</code>.
What's different on Darwin is that you can (and should) specify a full
path along with the file name.
This eliminates the need for "rpath" options and the
ldconfig/ld.so.cache system.
To use a library that is not yet installed, you can set the
DYLD_LIBRARY_PATH environment variable; see the dyld man page for
details.
</p>
<p>
The Mach-O format also offers real minor version checking, unknown on
ELF systems.
Every Mach-O library carries two version numbers: a "current" version
and a "compatibility" version.
Both version numbers are written as three numbers separated by dots,
e.g. 1.4.2.
The first number must be non-zero.
The second and third number can be omitted and default to zero.
When no version is specified, it will default to 0.0.0, which is some
kind of wildcard value.
</p>
<p>
The "current" version is for informational purposes only.
The "compatibility" version is used for checking as follows.
When an executable is linked, the version information from the library
is copied into the executable.
When the executable is run, that version information is checked
against the used library.
dyld generates a run time error and terminates the program unless the
used library version is equal to or newer than the one used during
linking.
</p>
</section>


<section name="cflags"><title>Compiler Flags</title>
<p>
The generation of position-independent code (PIC) is the default is
the default on Darwin.
Actually, PowerPC code is position-independent by design, so there is
no performance or space penalty involved.
So, you don't need to specify a PIC option when compiling code for a
shared library or module.
However, the linker doesn't allow "common" symbols in shared
libraries, so you must use the <code>-fno-common</code> compiler
option.
</p>
</section>


<section name="build-lib"><title>Building a Shared Library</title>
<p>
To build a shared library, you invoke the compiler driver with the
<code>-dynamiclib</code> option.
This is best demonstrated by a comprehensive example.
We'll build a library called libfoo, composed of the source files
source.c and code.c.
The version number is 2.4.5, where 2 is the major revision
(incompatible API change), 4 is the minor revision
(backwards-compatible API change) and 5 is the bugfix revision count
(some people call this the "teeny" revision, it denotes fully
compatible changes).
The library depends on no other shared libraries and will be installed
in /usr/local/lib.
</p>
<codeblock>cc -fno-common -c source.c
cc -fno-common -c code.c
cc -dynamiclib -install_name /usr/local/lib/libfoo.2.dylib \
 -compatibility_version 2.4 -current_version 2.4.5 \
 -o libfoo.2.4.5.dylib source.o code.o
rm -f libfoo.2.dylib libfoo.dylib
ln -s libfoo.2.4.5.dylib libfoo.2.dylib
ln -s libfoo.2.4.5.dylib libfoo.dylib</codeblock>
<p>
Note which parts of the version are used where.
Also note that the static linker will use the libfoo.dylib symlink,
while the dynamic linker will use the libfoo.2.dylib symlink.
It is possible to point these symlinks at different minor revisions of
the library.
</p>
</section>


<section name="build-mod"><title>Building a Module</title>
<p>
To build a loadable module, you invoke the compiler driver with the
<code>-bundle</code> option.
If the module uses symbols from the host program, you'll have to
specify <code>-undefined suppress</code> to allow undefined symbols,
and <code>-flat_namespace</code> along with it to make the new linker
in Mac OS X 10.1 happy.
A comprehensive example:
</p>
<codeblock>cc -fno-common -c source.c
cc -fno-common -c code.c
cc -bundle -flat_namespace -undefined suppress \
 -o mymodule.so source.o code.o</codeblock>
<p>
Note that no version numbering is used.
It is possible to use it in theory, but in practice it's pointless.
Also note that there are no naming restrictions for bundles.
Some packages prefer to prepend a "lib" anyway because some other
systems require it; this is harmless.
</p>
</section>


</chapter>


<chapter filename="libtool">
<title>GNU libtool</title>
<shorttitle>libtool</shorttitle>

<preface>
<p>
GNU packages that build libraries use GNU libtool to hide
platform-dependent procedures for library building and installation.
</p>
</preface>

<section name="situation"><title>The Situation</title>
<p>
In the wild, one can find four strands of libtool:
</p>
<ul>

<li><p>
<em>libtool 1.3</em>:
The most common strand.
The last release from this branch is 1.3.5.
It doesn't know about Darwin and only builds static libraries.
It can be recognized by the presence of the files
<filename>ltconfig</filename> and <filename>ltmain.sh</filename> in
the source tree.
</p></li>

<li><p>
<em>libtool 1.4</em>:
Long in the works and recently released as the new
stable version, this branch has better autoconf integration.
Unfortunately that makes migrating packages from 1.3 non-trivial.
It supports Darwin 1.3 / Mac OS X 10.0 out of the box and needs a
small patch to work on Mac OS X 10.1.
It can be recognized by the absence of <filename>ltconfig</filename>.
Versions that identify themselves as 1.3b or 1.3d are actually
development snapshots of 1.4 and must be treated with caution.
</p></li>

<li><p>
<em>The multi-language-branch</em>:
Also called MLB, this version of libtool was a parallel development
branch that added support for C++ and Java (via gcj).
It has now been merged back into the main development line.
Recent versions support Darwin 1.3 and Mac OS X 10.0 out of the box.
The MLB can be recognized by the files <filename>ltcf-c.sh</filename>,
<filename>ltcf-cxx.sh</filename> and <filename>ltcf-gcj.sh</filename>.
</p></li>

<li><p>
<em>The current development branch</em>:
This is the development version that will some day be released as
libtool 1.5.
It has resulted from the merge of 1.4 and the MLB.
It supports C, C++ and Java (via gcj).
Unfortunately, it can't be easily told apart from 1.4, you'll have to
check the version number inside <filename>ltmain.sh</filename>.
</p></li>

</ul>
<p>
In conclusion, libtool 1.3.x and packages that use it (which
happens to be the majority of libtool-using packages out there) need a
patch to build shared libraries on Darwin.
Apple includes a patched version of libtool 1.3.5 in Mac OS X, but it
will not work correctly in most cases.
I have improved that patch to hardcode the correct path and to do full
versioning.
The changes have been incorporated into upstream libtool releases and
development versions starting with 1.4.
I continue to make improvements and forward them to the libtool
maintainers.
The versioning scheme is compatible across all libtool versions.
</p>
<p>
Side note:
The libltdl library included with all libtool versions will only work
on Darwin when dlcompat is installed.
</p>
</section>


<section name="patch-135"><title>The 1.3.5 Patch</title>
<p>
After applying <link
url="http://fink.sourceforge.net/files/libtool-1.3.5-darwin.patch">this
patch</link> <em>[updated 2001-08-30]</em> to the libtool 1.3.5 source, you
must delete the files ltconfig and ltmain.sh.
They will be recreated from the appropriate .in files when you run
configure and make.
But that's only half the work - every package using libtool comes with
its own copies of ltconfig and ltmain.sh.
So you must replace these in every package that you want to build as a
shared library.
Note that you must do this before running the configure script.
For your convenience, you can get the two files right here:
<link url="http://fink.sourceforge.net/files/ltconfig">ltconfig</link> (98K) and
<link url="http://fink.sourceforge.net/files/ltmain.sh">ltmain.sh</link> (110K)
<em>[both updated 2001-08-30]</em>.</p>
</section>

<section name="fixing-14x"><title>Fixing 1.4.x</title>
<p>
There are at least three different versions of libtool 1.4.x now in wide use
(1.4.1, 1.4.2, and later development snapshots). They all have some issues on
Darwin, though the exact changes required to fix them differ. The libtool14
package shipped via Fink has all required patches already applied to it.
However, you still have to manually fix the ltmain.hs/configure files of
affected packages in order to get them working.
</p>

<ol>
<li>
<em>The flat_namespace bug</em>:
This problem only occurs if you use libtool on Mac OS X10.1 and later. What happens
is that libtool tries to use the <code>-undefined suppress</code> to allow undefined
symbols, but doesn't specify along with it the <code>-flat_namespace</code> option.
Starting with 10.1 this won't work anymore. A typical patch looks like this:
<codeblock>
diff -Naur gdk-pixbuf-0.16.0.old/configure gdk-pixbuf-0.16.0.new/configure
--- gdk-pixbuf-0.16.0.old/configure	Wed Jan 23 10:11:48 2002
+++ gdk-pixbuf-0.16.0.new/configure	Thu Jan 31 03:19:54 2002
@@ -3334,7 +3334,7 @@
     ;;
 
   darwin* | rhapsody*)
-    allow_undefined_flag='-undefined suppress'
+    allow_undefined_flag='-flat_namespace -undefined suppress'
     # FIXME: Relying on posixy $() will cause problems for
     #        cross-compilation, but unfortunately the echo tests do not
     #        yet detect zsh echo's removal of \ escapes.
</codeblock>
</li>
<li>
<em>The loadable module bug</em>:
This bug is caused by the non-standard behaviour of zsh (which is the default
shell in 10.0 and 10.1; in 10.2 it is supposed to be replaced by bash).
Zsh's non-standard quoting behaviours prevents loadable module from being built
correctly, they end up as shared libraries instead (unlike Linux, these are
reall different things on Darwin). A typical fix for this (cut off, so you can't
use it unmodified):
<codeblock>
diff -Naur gnome-core-1.4.0.6.old/configure gnome-core-1.4.0.6.new/configure
--- gnome-core-1.4.0.6.old/configure	Sun Jan 27 08:19:48 2002
+++ gnome-core-1.4.0.6.new/configure	Fri Feb  8 01:10:21 2002
@@ -4020,7 +4020,7 @@
     # FIXME: Relying on posixy $() will cause problems for
     #        cross-compilation, but unfortunately the echo tests do not
     #        yet detect zsh echo's removal of \ escapes.
-    archive_cmds='$nonopt $(test "x$module" = xyes &amp;&amp; echo -bundle || echo -dynamiclib) ...'
+    archive_cmds='$nonopt $(test x$module = xyes &amp;&amp; echo -bundle || echo -dynamiclib) ...'
     # We need to add '_' to the symbols in $export_symbols first
     #archive_expsym_cmds="$archive_cmds"' &amp;&amp; strip -s $export_symbols'
     hardcode_direct=yes
</codeblock>
<p>
This problem is fixed in some post-1.4.2 versions of libtool.
</p>
</li>
<li>
<em>The convenience library bug</em>:
Under some conditions, libtool will fail to link convenience libraries, giving "multiple definitions" errors.
This is caused by a more fundamental problem in libtool it seems. For now as a workaround (curing the symptoms
not the actual problem, but with great success anyway), you can use this fix:
<codeblock>
diff -Naur gdk-pixbuf-0.16.0.old/ltmain.sh gdk-pixbuf-0.16.0.new/ltmain.sh
--- gdk-pixbuf-0.16.0.old/ltmain.sh	Wed Jan 23 10:11:43 2002
+++ gdk-pixbuf-0.16.0.new/ltmain.sh	Thu Jan 31 03:19:54 2002
@@ -2862,7 +2862,12 @@
 	if test -n "$export_symbols" &amp;&amp; test -n "$archive_expsym_cmds"; then
 	  eval cmds=\"$archive_expsym_cmds\"
 	else
+	  save_deplibs="$deplibs"
+	  for conv in $convenience; do
+	    deplibs="${deplibs%$conv*} ${deplibs#*$conv}"
+	  done
 	  eval cmds=\"$archive_cmds\"
+	  deplibs="$save_deplibs"
 	fi
 	IFS="${IFS= 	}"; save_ifs="$IFS"; IFS='~'
 	for cmd in $cmds; do
</codeblock>
</li>
</ol>
</section>

<section name="notes"><title>Further Notes</title>
<p>
For more information on libtool itself and what it does, see the <link
url="http://www.gnu.org/software/libtool/libtool.html">libtool
homepage</link>.
</p>

<p>
Side note:
Apple's Developer Tools contain a program also called libtool, which
is used by the compiler driver to build shared libraries.
However, this is completely unrelated with GNU libtool.
The GNU libtool that Apple ships is installed as <code>glibtool</code>
instead.
This can be achieved by configuring GNU libtool with
<code>--program-transform-name=s/libtool/glibtool/</code>.
</p>
</section>

</chapter>


</document>
